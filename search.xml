<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[java - final 关键字]]></title>
      <url>/2017/07/31/java-final%20%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      <content type="html"><![CDATA[<p>java - final 关键字</p>
<h3 id="java-final-关键字"><a href="#java-final-关键字" class="headerlink" title="java - final 关键字"></a>java - final 关键字</h3><p>在 java 中，final 关键字可以修饰类，方法和变量。被 final 修饰通常指“这是无法改变的”。</p>
<h4 id="1-final-数据"><a href="#1-final-数据" class="headerlink" title="1. final 数据"></a>1. final 数据</h4><p>可以分为两种情况：</p>
<ol>
<li>一个永不改变的编译时常量</li>
<li>一个在运行时初始化的值，而你不希望改变它</li>
</ol>
<h5 id="1-1-final-修饰基本数据类型"><a href="#1-1-final-修饰基本数据类型" class="headerlink" title="1.1 final 修饰基本数据类型"></a>1.1 final 修饰基本数据类型</h5><p>这类常量必须是基本数据类型，用 final  修饰，在定义时就必须赋值，对于编译期常量，编译器可以将该常量值代入任何用到它的计算式中，可以在编译期执行计算式，减轻运行时负担。</p>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> i = <span class="number">10</span>; <span class="comment">//定义时就赋值，基本数据类型</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span>[] is = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;; <span class="comment">//即 new int[]&#123;1,2,3&#125; 运行时才被确定，有 new 关键字，数组不是基本数据类型</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> String str = <span class="string">"str"</span>; <span class="comment">// String 不是基本数据类型</span></div></pre></td></tr></table></figure>
<p>补充：java 中的基本数据类型，共 8 种：</p>
<ul>
<li>byte 1字节</li>
<li>char 2字节</li>
<li>short 2字节</li>
<li>double 8字节</li>
<li>int 4字节</li>
<li>boolean 《 Java 虚拟机规范》描述为 4 个字节，boolean 数组为 1 个字节，具体还要看虚拟机实现</li>
<li>float 4字节</li>
<li>long 8字节  </li>
</ul>
<h5 id="1-2-final-修饰引用数据类型"><a href="#1-2-final-修饰引用数据类型" class="headerlink" title="1.2 final 修饰引用数据类型"></a>1.2 final 修饰引用数据类型</h5><p>final 修饰引用数据类型时，final 关键字使被修饰的变量的引用不能改变，然而，对象自身却是可以修改的。</p>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Te te = <span class="keyword">new</span> Te();<span class="comment">// te 为引用数据类型，且被 final 修饰</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//        te = new Te(); // 试图给 te 修改引用，指向一个新的对象，此时编译会报错</span></div><div class="line">        te.i = <span class="number">10</span>; <span class="comment">// te 的内容可以修改（对象自身可以修改）</span></div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Te</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">3</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当变量被定义为 final ，同时 也被 static 修饰，表示该变量被初始化之后就占据着一段不能改变的存储空间，而且只会有一份。</p>
<p>final 使变量不能修改引用（基本数据类型时为值不能修改），而 static 强调只有一份。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String = <span class="string">"str"</span> <span class="comment">// 所在类加载时会被初始化</span></div></pre></td></tr></table></figure>
<h5 id="1-3-空白-final"><a href="#1-3-空白-final" class="headerlink" title="1.3 空白 final"></a>1.3 空白 final</h5><p>所谓空白 final 指被声明为 final，但又未给定初值的域。但编译器又需要确保在使用前变量被赋值，因而 java 要求空白 final 必须在构造器中赋值。静态空白 final 可在静态代码块中赋值，非静态空白  final 要在构造代码块或是每一个构造函数中赋值。</p>
<blockquote>
<p>空白 final 为类使用者提供了更大的灵活性，在保证变量只被赋值一次的同时，可以根据对象而有所不同。</p>
</blockquote>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String STR = <span class="string">"str"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> A;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String STR1;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;  <span class="comment">// 静态空白 final 只能在定义时赋值或在静态代码块中赋值</span></div><div class="line">        A = <span class="number">3</span>;</div><div class="line">        STR1 = <span class="string">"str1"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> b = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> c;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String str;</div><div class="line">    </div><div class="line">    <span class="comment">// 非静态空白 final 可在构造代码块中赋值</span></div><div class="line">    &#123;</div><div class="line">        c = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 选择构造代码块赋值时只需在其中一个构造代码块中赋值即可</span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">// 选择构造函数赋值时必须在每一个构造函数中都进行赋值，因为编译器无法知道类使用者会选择哪一个构造函数构造对象</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</div><div class="line">        str = <span class="string">"str"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        str = s;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-final-参数"><a href="#2-final-参数" class="headerlink" title="2. final 参数"></a>2. final 参数</h4><p>使用 final 修饰方法参数意味着无法在方法中修改参数的值或引用。这一特性主要用于向匿名内部类传递参数。</p>
<p>方法中的匿名内部类如果要直接使用外部方法的参数（或是局部变量），必须将参数或是局部变量声明为 final 。</p>
<p>原因：</p>
<ol>
<li>当编译器将 java 文件编译为 class 文件时，匿名内部类和其所在的类生成的 class 文件并不是一份，而是两份（这类似于编译器对内部类的处理），用一份单独的 class 文件保存匿名内部类，然而匿名内部类要用到另一份 class 文件中的变量，他俩又是两份独立的 class 文件，此时只能<strong>将用到的变量作为匿名内部类构造函数的参数传到匿名内部类</strong>中（使用匿名内部类时是无法添加构造函数的），匿名内部类会生成同名的域来保存这些参数。这个工作是由编译器完成的。<br><br></li>
<li>为什么要用 final 修饰，上面说了编译后是由单独的一份 class 文件保存匿名内部类，然而我们在编写匿名内部类的时候程序“看起来”是直接使用了变量的（没有传参，复制引用的过程），如果匿名内部类修改了变量，那外部的变量也应该相应的做出改变，外部修改了变量那匿名内部类中也应该改变，或者说匿名内部类跟外部的方法是一体的，他们读取到变量的值应该是一样的，如果不要求使用 final 修饰，那外部修改了变量的值，匿名内部类读取时读取到的值却是初始时传入的值，这时就不一致了，这是不符合预期的，我们使用匿名内部类的初衷大多时候就是能直接使用外部的变量，使内外在某一属性上保持一致，因此使用 final 修饰就能保证唯一性，达到一致的效果。</li>
</ol>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">final</span> String str, <span class="keyword">final</span> <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> String str2 = <span class="string">""</span>;</div><div class="line">        <span class="keyword">new</span> In() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//                id += 2; // 不能修改 编译无法通过</span></div><div class="line">                <span class="keyword">if</span> (str.contains(<span class="string">"a"</span>)) &#123;</div><div class="line">                    str.replace(<span class="string">"a"</span>, <span class="string">"b"</span>); <span class="comment">// 引用不能修改，但变量本身可以修改，此时内外保持一致</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">int</span> len = str2.length();</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">In</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考文章：<a href="http://www.cnblogs.com/xiaorenwu702/p/5167997.html" target="_blank" rel="external">java提高篇(十)—–详解匿名内部类 ,形参为什么要用final</a></p>
<h4 id="3-final-方法"><a href="#3-final-方法" class="headerlink" title="3. final 方法"></a>3. final 方法</h4><p>使用 final 修饰方法的原因有两个：</p>
<ol>
<li>把方法锁定，以防任何继承类修改它的定义，这是出于设计考虑，确保在继承中使方法行为保持不变，并且不会被覆盖</li>
<li>过去使用 final 修饰方法的第二个原因是效率，在 java 的早期实现中，将一个方法指明为 final 后，编译器将针对该方法的所有调用转为内嵌调用，这将在一定程度上消除方法调用的开销，但当方法体积很大时，程序代码就会膨胀，这将导致内嵌调用无法提高效率。在最近的 java 版本中，虚拟机可以探测到这些情况，并去掉这些效率反而降低的内嵌调用，因此<strong>不再需要使用 final 方法进行优化了</strong></li>
</ol>
<blockquote>
<p>只有在想明确禁止覆盖时，才应该使用 final 修饰方法</p>
</blockquote>
<h4 id="4-final-和-private-关键字"><a href="#4-final-和-private-关键字" class="headerlink" title="4. final 和 private 关键字"></a>4. final 和 private 关键字</h4><p>类中所有的 private 方法都隐式的指定为 final 的、，由于无法取用 private 方法，所以也就无法覆盖它。可以对 private 方法添加 final 关键字修饰，但这并不能给方法增添任何额外的意义。</p>
<p>“覆盖”只有在某方法是基类的接口的一部分时才出现，private 方法不属于类的接口的一部分，所以也就没有覆盖的说法，可以在子类中定义与父类中 private 方法相同签名的方法，但他们两者仅仅是“签名相同”而已，此外没有任何关联。</p>
<h4 id="5-final-类"><a href="#5-final-类" class="headerlink" title="5. final 类"></a>5. final 类</h4><p>将某个类整体定义为 final ，就表明你不打算继承该类，而且也不允许别人继承。</p>
<p>final 类的域可以根据意愿选择是否为 final，final 关键字对于域的作用不受其所在类是否为 final 影响。</p>
<p>由于 final 禁止继承，所以 final 类中所有的方法隐式指定为 final ，因为无法覆盖他们，在 final 类中可以给方法添加 final 关键字，但这不会增添任何意义。</p>
<p>final 关键字修饰类时表明类无法继承，这意味着类的功能仅限于此，同时也不允许自己和别人对该类进行扩展，有时这是明智的，但要预见类是如何被复用的一般是很困难的，特别是对于一个通用的类更是如此，因此在决定将一个类或方法声明为 final 时，请思考其功能是否仅限于此，是否真的没有任何可能被继承或以其它方式被扩展。</p>
<hr>
<p>文章大部分摘抄自《Java 编程思想》 第七章 7.8节 final 关键字，加上部分自己的理解，若有错误，欢迎指正。</p>
<p>博客断了好久，再一个月就要找工作了，不能懈怠。</p>
<p><br><br></p>
<center><strong>END</strong></center>]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android - 带阴影点击效果，可自定义属性的媒体播放控制按钮(播放、暂停、下一曲、上一曲)]]></title>
      <url>/2017/06/16/Android%20-%20%E5%B8%A6%E9%98%B4%E5%BD%B1%E7%82%B9%E5%87%BB%E6%95%88%E6%9E%9C%EF%BC%8C%E5%8F%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E7%9A%84%E5%AA%92%E4%BD%93%E6%92%AD%E6%94%BE%E6%8E%A7%E5%88%B6%E6%8C%89%E9%92%AE(%E6%92%AD%E6%94%BE%E3%80%81%E6%9A%82%E5%81%9C%E3%80%81%E4%B8%8B%E4%B8%80%E6%9B%B2%E3%80%81%E4%B8%8A%E4%B8%80%E6%9B%B2)/</url>
      <content type="html"><![CDATA[<h4 id="Android-带阴影点击效果，可自定义属性的媒体播放控制按钮-播放、暂停、下一曲、上一曲"><a href="#Android-带阴影点击效果，可自定义属性的媒体播放控制按钮-播放、暂停、下一曲、上一曲" class="headerlink" title="Android - 带阴影点击效果，可自定义属性的媒体播放控制按钮(播放、暂停、下一曲、上一曲)"></a>Android - 带阴影点击效果，可自定义属性的媒体播放控制按钮(播放、暂停、下一曲、上一曲)</h4><blockquote>
<p>自定义 View 开发的可定制大小，颜色，圆角，阴影半径，描边风格，点击时有”荧光“效果的播放(暂停)，上一曲(下一曲)按钮。</p>
</blockquote>
<p>demo 已上传 GitHub ，欢迎下载使用，有问题可以给我留言。<br>仓库地址：<br><a href="https://github.com/DuanJiaNing/MediaView" target="_blank" rel="external">DuanJiaNing/MediaView</a></p>
<h4 id="一-开发背景"><a href="#一-开发背景" class="headerlink" title="一.开发背景"></a>一.开发背景</h4><p>网易云音乐的很多按钮控件点击时都是带阴影效果的，不同于 material design 的涟漪效果，按钮被点击时图标轮廓四周会有白色“阴影”， 或者可以称为“荧光”效果，直接使用图标虽然可以达到同样的效果，但毕竟不灵活，可定制属性较少，于是，不如自己写一个。</p>
<h4 id="二-效果图"><a href="#二-效果图" class="headerlink" title="二.效果图"></a>二.效果图</h4><table align="center"><br><tr><br><th align="center">静态图</th><br><th align="center">动态图</th><br></tr><br><tr><br><td width="350"><img src="https://raw.githubusercontent.com/DuanJiaNing/MediaView/master/screenshort1.png"></td><br><td width="350"><img src="https://raw.githubusercontent.com/DuanJiaNing/MediaView/master/screenshort.gif"></td><br></tr><br></table>

<h4 id="三-介绍"><a href="#三-介绍" class="headerlink" title="三.介绍"></a>三.介绍</h4><blockquote>
<p>控件具有如下继承结构<br>|– android.view.View<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|– abstract MediaView<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|– SkipView    上一曲(下一曲)按钮<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|– PlayView     播放按钮</p>
<h5 id="3-1-构成元素"><a href="#3-1-构成元素" class="headerlink" title="3.1 构成元素"></a>3.1 构成元素</h5></blockquote>
<p>xml 中提供的可定制属性如下：</p>
<ul>
<li>radius 半径：整个控件的半径</li>
<li>shadowRadius 阴影半径</li>
</ul>
<p>（1） 外圆圈</p>
<ul>
<li>strokeWidth 描边宽度</li>
<li>strokeColor 描边颜色</li>
</ul>
<p>（2） 上一曲(下一曲)按钮：</p>
<ul>
<li>distance 单竖线和三角形顶点距离</li>
</ul>
<p>1 单竖线：</p>
<ul>
<li>innerLineWidth(Height) 宽度，高度：任一者赋值为 0 时不进行绘制。</li>
<li>innerLineRadius 圆角大小</li>
</ul>
<p>2 等腰三角形：</p>
<ul>
<li>triangleWidth 三角形顶角到底边的距离</li>
<li>triangleHeight 底边高度</li>
<li>triangleColor 填充颜色</li>
<li>triangleRadius 圆角大小</li>
<li>triangleHollow 是否空心</li>
<li>triangleStroke 空心时的描边宽度</li>
</ul>
<p>（3） 播放，暂停按钮</p>
<ul>
<li>checked 是否播放，true 为正在播放（此时处于可暂停状态）</li>
</ul>
<p>1 播放状态：<br>播放状态下直接绘制继承自 SkipView 的等腰三角形</p>
<p>2 暂停状态：此时两条竖线的属性时完全一致的</p>
<ul>
<li>pauseLineDistance 双竖线间距</li>
<li>pauseLineWidth 竖线宽度</li>
<li>pauseLineHeight 竖线高度</li>
<li>pauseLineRadius 竖线圆角</li>
<li>pauseLineColor 竖线颜色</li>
<li>pauseLineHollow 是否空心</li>
<li>pauseLineStroke 空心状态下指定竖线描边宽度</li>
</ul>
<p><img src="https://raw.githubusercontent.com/DuanJiaNing/MediaView/master/anyic1.jpg" alt=""></p>
<h4 id="四-具体实现"><a href="#四-具体实现" class="headerlink" title="四. 具体实现"></a>四. 具体实现</h4><h5 id="4-1-MediaView"><a href="#4-1-MediaView" class="headerlink" title="4.1 MediaView"></a>4.1 MediaView</h5><p>该类的完整定义如下：<br><code>public abstract class MediaView extends View implements ValueAnimator.AnimatorUpdateListener</code><br>将媒体控件共有的特性提取出来写在这个类中，共有特性有：<br>1 控件中心所在位置。<br>2 控件中心作为圆心，向外延展的半径。<br>3 圆圈的描边宽度<br>4 触摸动画的执行：有两个动画，手指触摸到控件时阴影由无到有的动画，手指离开屏幕时阴影从有到无。</p>
<h6 id="onMeasure-方法"><a href="#onMeasure-方法" class="headerlink" title="onMeasure 方法"></a>onMeasure 方法</h6><p>在该方法中计算出控件的宽高，以及半径。<br>注意：当 xml 中指定控件的宽高为具体值（math_parent 或 具体值）时控件的半径依照如下规则计算，此时在 xml 中指定的半径将失效：</p>
<p>控件宽高分别减去上下 padding 和左右 padding 后值小的一方减去阴影半径和圆圈描边之和的两倍除以 2（哈哈 还不如直接看代码！）。<br>对应代码为：<code>radius = (Math.min(width - wp, height - hp) - t) / 2;</code></p>
<p>当宽高都为 warp_content 时，xml 中指定的半径有效，此时控件高宽计算方式如下：<br><code>width = radius * 2 + t + wp;</code><br><code>height = radius * 2 + t + hp;</code><br>此时要考虑的因素有直径，阴影直径，两侧描边之后以及上下 padding(左右 padding)。<br>以高为例：高为半径的 2 倍加上阴影半径和描边宽度和的两倍加上上下侧的 padding 。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">    <span class="keyword">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">    <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">    <span class="keyword">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">    <span class="keyword">int</span> width;</div><div class="line">    <span class="keyword">int</span> height;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> t = (shadowRadius + strokeWidth) * <span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span> wp = getPaddingLeft() + getPaddingRight();</div><div class="line">    <span class="keyword">int</span> hp = getPaddingTop() + getPaddingBottom();</div><div class="line"></div><div class="line">    <span class="keyword">int</span> te = -<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;</div><div class="line">        width = widthSize;</div><div class="line">        te = <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//xml中宽度设为warp_content</span></div><div class="line">        width = radius * <span class="number">2</span> + t + wp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (heightMode == MeasureSpec.EXACTLY) &#123;</div><div class="line">        height = heightSize;</div><div class="line">        te = <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        height = radius * <span class="number">2</span> + t + hp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) &#123;</div><div class="line">        width = Math.max(width, getMinimumWidth());</div><div class="line">        height = Math.max(height, getMinimumHeight());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setMeasuredDimension(width, height);</div><div class="line"></div><div class="line">    <span class="comment">//长宽任一者指定具体长度（EXACTLY）时，xml 中设置的 radius 失效</span></div><div class="line">    <span class="keyword">if</span> (te != -<span class="number">1</span>)</div><div class="line">        radius = (Math.min(width - wp, height - hp) - t) / <span class="number">2</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h6 id="onLayout-方法"><a href="#onLayout-方法" class="headerlink" title="onLayout 方法"></a>onLayout 方法</h6><p>在 onLayout 方法中确定圆心，注意 getWidth getHeight 只有在 onMeasure 方法执行完之后才能正确获得值，确定规则如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">centerX = getPaddingLeft() + (getWidth() - getPaddingLeft() - getPaddingRight()) / <span class="number">2</span>;</div><div class="line"> centerY = getPaddingTop() + (getHeight() - getPaddingTop() - getPaddingBottom()) / <span class="number">2</span>;</div></pre></td></tr></table></figure></p>
<h6 id="onTouchEvent-方法"><a href="#onTouchEvent-方法" class="headerlink" title="onTouchEvent 方法"></a>onTouchEvent 方法</h6><p>覆写该方法控制触摸动画的执行，点击事件监听。<br>注意：当<strong>收到 ACTION_DOWN 事件之后，先调用父类的 onTouchEvent 方法，然后再返回 true 。</strong></p>
<p>这样做的原因是：在收到 ACTION_DOWN 事件后启动触摸动画（阴影从无到有），在 ACTION_UP 事件到达时恢复（启动释放动画，阴影从有到无），既然需要 ACTION_UP 事件，意味着必须处理  ACTION_DOWN  事件（收到 ACTION_DOWN  时返回 true ，如果返回 false ，那后续的事件就不会传到该控件，也就收不到 ACTION_UP 事件）。</p>
<p>事件分发机制可参看我的另一篇文章：<a href="http://blog.csdn.net/aimeimeits/article/details/71512627" target="_blank" rel="external">Android-View的事件分发机制</a><br>但这样有个问题，返回 true 意味着我（该控件）对系统宣布：此次事件序列接下来发生的所有事件都交给我处理，那点击事件呢？长按事件呢？返回 true 后系统也就不再帮你决定何时触发点击事件了，即点击事件的触发也由你自己决定，但我不想自己控制点击事件的触发时机（有些麻烦），该怎么办呢？</p>
<p>ACTION_DOWN 事件返回 true 前的<code>super.onTouchEvent(event);</code>就可以解决这个问题，在ACTION_UP 到达时也要调用<code>super.onTouchEvent(event);</code>，这样系统仍将帮你处理点击事件。即在外面为控件绑定点击事件监听时能正常回调。<br>原因：<br>View 的点击事件在 ACTION_DOWN 到达时开始，系统会启动一个计时器，长按到一定时间后系统会触发 onLongClick 事件，快速单击时直接触发 onClick 事件，这个过程是在 ACTION_DOWN  时开始，在 ACTION_UP 时决策是否触发点击事件，在 ACTION_DOWN   和  ACTION_UP 之间决策是否触发长按事件。因此在 ACTION_DOWN    和 ACTION_UP 到达时到调用 View 的 onTouchEvent 方法以完成点击，长按事件触发控制。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">       <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">           <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">               startPreAnim();</div><div class="line">               <span class="comment">//调用 View 的事件监听以使用 View 的 click 和 longClick 监听</span></div><div class="line">               <span class="keyword">super</span>.onTouchEvent(event);</div><div class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">           <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">               startReleaseAnim();</div><div class="line">               <span class="comment">//调用 View 的事件监听以使用 View 的 click 和 longClick 监听</span></div><div class="line">               <span class="keyword">super</span>.onTouchEvent(event);</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">default</span>:</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h6 id="onDraw-方法"><a href="#onDraw-方法" class="headerlink" title="onDraw 方法"></a>onDraw 方法</h6><p>该方法以 final 的形式被覆写，这意味着任何继承于 MediaView 的控件都无法覆盖该方法，这主要是为了限制 MediaView  子类控件的UI风格，如果子类重写了 onDraw 方法，那何不直接继承 View，定义一个全新的控件。</p>
<p><code>isCreate</code>变量用于标识是否为第一次绘制，控件阴影初始时并不是 0 ，如果直接绘制，会把阴影也绘制出来，所以第一次绘制时不绘制阴影，之后的重绘（主要是动画时）由动画控制阴影的大小。<br>在调用<code>setShadowRadius</code>方法设置阴影大小时，修改阴影的同时将更新属性动画的参数。</p>
<p><code>paint.setMaskFilter(new BlurMaskFilter(sd, BlurMaskFilter.Blur.SOLID));</code><br>设置画笔绘制图形内容的同时绘制外阴影，不绘制内阴影。</p>
<p>通过 Paint 的<code>setMaskFilter</code>方法设置阴影大小，注意 <code>BlurMaskFilter</code>的构造方法第一个参数是浮点类型，且值必须为大于 0 ，因而无论是属性动画中或是 onDraw 方法中的局部变量<code>sd</code>，亦或<code>setShadowRadius</code>方法，阴影的最小值不会小于 1。</p>
<p>setMaskFilter  方法在开启硬件加速的情况下是无效的，因而要关闭硬件加速。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Android4.0（API14）之后硬件加速功能就被默认开启了,setMaskFilter 在开启硬件加速的情况下无效，需要关闭硬件加速</span></div><div class="line"><span class="keyword">this</span>.setLayerType(View.LAYER_TYPE_SOFTWARE, <span class="keyword">null</span>);</div></pre></td></tr></table></figure></p>
<p>Paint 的<code>setMaskFilter</code>具体介绍请参考这里：<a href="http://blog.csdn.net/nimeghbia/article/details/48891557" target="_blank" rel="external">详解Paint的setMaskFilter(MaskFilter maskfilter)</a></p>
<p>先绘制圆圈，在绘制内部。drawInside 方法是抽象方法，由子类实现。<br><code>protected abstract void drawInside(Canvas canvas);</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line"></div><div class="line">    canvas.drawARGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> sd;</div><div class="line">    <span class="keyword">if</span> (isCreate) &#123;</div><div class="line">        <span class="comment">//第一次绘制时使阴影为0</span></div><div class="line">        <span class="comment">//之后重绘时由动画控制阴影的大小</span></div><div class="line">        sd = <span class="number">1</span>;</div><div class="line">        isCreate = <span class="keyword">false</span>;</div><div class="line">    &#125; <span class="keyword">else</span> sd = shadowRadius;</div><div class="line"></div><div class="line">    <span class="comment">//只绘制外阴影和图形内容本身，不绘制内阴影</span></div><div class="line">    paint.setMaskFilter(<span class="keyword">new</span> BlurMaskFilter(sd, BlurMaskFilter.Blur.SOLID));</div><div class="line"></div><div class="line">    drawOuter(canvas);</div><div class="line"></div><div class="line">    drawInside(canvas);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="4-2-SkipView"><a href="#4-2-SkipView" class="headerlink" title="4.2 SkipView"></a>4.2 SkipView</h5><p>类定义：<code>public class SkipView extends MediaView</code><br>该类完成【上一曲(下一曲)】控件的绘制。<br>该类继承了 MediaView 的属性和方法的同时又很多自己的属性，可以参看上面的 <a href="#">3.1 构成元素<br>（2） 上一曲(下一曲)按钮</a> 查看具体属性</p>
<h6 id="onLayout-方法-1"><a href="#onLayout-方法-1" class="headerlink" title="onLayout 方法"></a>onLayout 方法</h6><p><img src="https://raw.githubusercontent.com/DuanJiaNing/MediaView/master/anyic1.jpg" alt=""></p>
<p>1 在 onLayout 方法中检查【单竖线】的高宽是否小于等于 0，如果任一者赋值为 0，就将两者赋为 0，这样在绘制时就不会绘制单竖线了。</p>
<p>2 如果三角形的高（底边的长度）小于或等于 0 （这可能是因为 xml 中赋值错误，或没有赋值（SkipView 的构造方法中将底边的长度默认值设为 0），就将其赋为半径的 2/3。</p>
<p><strong>下面提到的 顶点 指的都是等腰三角形 顶角 所在的顶点。</strong></p>
<p>3 如果【三角形顶点与底边的距离】小于或等于 0 ，就将该等腰三角形作为等边三角形，计算出值。</p>
<p>4 三角形圆角的绘制使用的是 Path 的 cubicTo 方法，该方法需要指定三个点作为控制点绘制贝塞尔曲线。<br>据此计算出三角形上 9 个点的坐标，9 个点的坐标在图中第三个控件中有标明。计算时根据对称性可简化一些计算。</p>
<p>5 <em>很关键的计算过程建议直接看代码，参照注释理解。</em><br>因为计算的时候是假设【三角形顶点与底边连线】的中点与圆心重合进行计算的，所以 9 个点计算出来后需要进行平移，使三角形的【内心】与圆心重合。这里需要动手推一下平移距离计算公式，即让两点重合需要平移的距离。</p>
<ul>
<li>使两点重合平移（往前移）的距离：先计算出内心与顶点的距离，该距离减去【三角形顶角与底边连线】的一半。</li>
<li>两点重合之后还需要移动（往后移）【单竖线宽度】+【竖线与顶点间距】和的一半。原因是需要把【竖线+间距+三角形】整体移动到【圆圈】中心，这样内部整体才居中。</li>
</ul>
<p>移动时只需修改三角形 9 个顶点的横坐标即可，竖线的位置根据三角形顶点来确定，所以不用考虑。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (innerLineHeight &lt;= <span class="number">0</span> || innerLineWidth &lt;= <span class="number">0</span>) &#123;</div><div class="line">           innerLineHeight = <span class="number">0</span>;</div><div class="line">           innerLineWidth = <span class="number">0</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (triangleHeight &lt;= <span class="number">0</span>)</div><div class="line">           triangleHeight = radius * <span class="number">2</span> / <span class="number">3</span>;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (triangleWidth &lt;= <span class="number">0</span>) &#123;</div><div class="line">           <span class="comment">//将三角形绘制成等边三角形</span></div><div class="line">           <span class="keyword">int</span> t2 = triangleHeight * triangleHeight;</div><div class="line">           triangleWidth = (<span class="keyword">int</span>) Math.sqrt(t2 - (t2 / <span class="number">4</span>));</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">//赋值不合理，进行重置（这不是此控件预期的展现形式，应根据整体比例合理赋值）</span></div><div class="line">       <span class="comment">//只对上限进行处理</span></div><div class="line">       <span class="keyword">if</span> (innerLineHeight &gt;= radius * <span class="number">2</span>)</div><div class="line">           innerLineHeight = radius * <span class="number">2</span>;</div><div class="line">       <span class="keyword">if</span> (innerLineWidth &gt;= radius)</div><div class="line">           innerLineWidth = radius;</div><div class="line">       <span class="keyword">if</span> (triangleWidth &gt;= radius)</div><div class="line">           triangleWidth = radius;</div><div class="line">       <span class="keyword">if</span> (triangleHeight &gt; radius * <span class="number">2</span>)</div><div class="line">           triangleHeight = radius * <span class="number">2</span>;</div><div class="line"></div><div class="line">       <span class="comment">//以顶点作为参考</span></div><div class="line">       <span class="comment">//圆角导致的纵坐标迁移量</span></div><div class="line">       <span class="keyword">float</span> ry = triangleRadius / <span class="number">2</span>;</div><div class="line">       <span class="comment">//圆角导致的横坐标迁移量</span></div><div class="line">       <span class="keyword">float</span> rx = (<span class="keyword">float</span>) Math.sqrt(triangleRadius * triangleRadius - ry * ry);</div><div class="line"></div><div class="line">       <span class="comment">//计算三角形上 9 个点的坐标</span></div><div class="line">       <span class="comment">//拟使【三角形顶点与底边中点相连的线段的中点】在【圆心】上进行计算</span></div><div class="line">       <span class="comment">//计算时根据三角形在坐标轴上的位置关系简化计算</span></div><div class="line">       <span class="keyword">int</span> halfW = triangleWidth / <span class="number">2</span>;</div><div class="line">       coordinate[<span class="number">0</span>][<span class="number">0</span>] = centerX - halfW;</div><div class="line">       coordinate[<span class="number">0</span>][<span class="number">1</span>] = centerY;</div><div class="line">       coordinate[<span class="number">1</span>][<span class="number">0</span>] = (centerX - halfW) + rx;</div><div class="line">       coordinate[<span class="number">1</span>][<span class="number">1</span>] = centerY - ry;</div><div class="line">       coordinate[<span class="number">8</span>][<span class="number">0</span>] = coordinate[<span class="number">1</span>][<span class="number">0</span>];</div><div class="line">       coordinate[<span class="number">8</span>][<span class="number">1</span>] = centerY + ry;</div><div class="line"></div><div class="line">       coordinate[<span class="number">3</span>][<span class="number">0</span>] = centerX + halfW;</div><div class="line">       coordinate[<span class="number">3</span>][<span class="number">1</span>] = centerY - triangleHeight / <span class="number">2</span>;</div><div class="line">       coordinate[<span class="number">2</span>][<span class="number">0</span>] = (centerX + halfW) - rx;</div><div class="line">       coordinate[<span class="number">2</span>][<span class="number">1</span>] = centerY - (triangleHeight / <span class="number">2</span> - ry);</div><div class="line">       coordinate[<span class="number">7</span>][<span class="number">0</span>] = coordinate[<span class="number">2</span>][<span class="number">0</span>];</div><div class="line">       coordinate[<span class="number">7</span>][<span class="number">1</span>] = centerY + (triangleHeight / <span class="number">2</span> - ry);</div><div class="line"></div><div class="line">       coordinate[<span class="number">6</span>][<span class="number">0</span>] = coordinate[<span class="number">3</span>][<span class="number">0</span>];</div><div class="line">       coordinate[<span class="number">6</span>][<span class="number">1</span>] = centerY + triangleHeight / <span class="number">2</span>;</div><div class="line">       coordinate[<span class="number">4</span>][<span class="number">0</span>] = centerX + halfW;</div><div class="line">       coordinate[<span class="number">4</span>][<span class="number">1</span>] = centerY - (triangleHeight / <span class="number">2</span> - triangleRadius);</div><div class="line">       coordinate[<span class="number">5</span>][<span class="number">0</span>] = coordinate[<span class="number">4</span>][<span class="number">0</span>];</div><div class="line">       coordinate[<span class="number">5</span>][<span class="number">1</span>] = centerY + (triangleHeight / <span class="number">2</span> - triangleRadius);</div><div class="line"></div><div class="line">       <span class="comment">//平移三角形使其居中</span></div><div class="line">       <span class="comment">//平移之前【三角形顶点与底边中点相连的线段中点】与【圆心】重合，此时内部的【整体图形】没有在圆圈内【居中】</span></div><div class="line">       <span class="comment">//平移所有点使【三角形内心】与【圆心】重合</span></div><div class="line">       <span class="comment">// ** 计算【等边三角形内心与顶点的距离】</span></div><div class="line">       <span class="keyword">double</span> a2 = triangleWidth * triangleWidth;</div><div class="line">       <span class="keyword">double</span> c2 = triangleHeight * triangleHeight / <span class="number">4</span>;</div><div class="line">       <span class="keyword">double</span> c = triangleHeight / <span class="number">2</span>;</div><div class="line">       <span class="keyword">double</span> a = triangleWidth;</div><div class="line">       <span class="keyword">double</span> x = (Math.pow(Math.sqrt(a2 + c2) - c, <span class="number">2</span>) + a2) / (<span class="number">2</span> * a);</div><div class="line"></div><div class="line">       <span class="comment">//往前移动【三角形内心到圆心位置】，然后往后移动【竖线宽度】和【顶点到竖线距离】之和的一半</span></div><div class="line">       <span class="keyword">double</span> tr = (x - halfW) - (distance + innerLineWidth) / <span class="number">2</span>;</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; coordinate.length; i++) &#123;</div><div class="line">           coordinate[i][<span class="number">0</span>] -= tr;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h6 id="drawInside-方法"><a href="#drawInside-方法" class="headerlink" title="drawInside 方法"></a>drawInside 方法</h6><p>覆写 MediaView 的 drawInside 方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawInside</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    drawLine(canvas);</div><div class="line">    drawTriangle(canvas);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h6 id="drawLine-和-drawTriangle-方法"><a href="#drawLine-和-drawTriangle-方法" class="headerlink" title="drawLine 和 drawTriangle 方法"></a>drawLine 和 drawTriangle 方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 绘制单竖线</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">drawLine</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (innerLineHeight &lt;= <span class="number">0</span> || innerLineWidth &lt;= <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    paint.setStyle(Paint.Style.FILL);</div><div class="line">    paint.setColor(triangleColor);</div><div class="line"></div><div class="line">    <span class="comment">//绘制竖线</span></div><div class="line">    <span class="comment">//参考三角形的 顶点 绘制</span></div><div class="line">    <span class="keyword">float</span> left = coordinate[<span class="number">0</span>][<span class="number">0</span>] - distance - innerLineWidth;</div><div class="line">    <span class="keyword">float</span> top = coordinate[<span class="number">0</span>][<span class="number">1</span>] - innerLineHeight / <span class="number">2</span>;</div><div class="line">    <span class="keyword">float</span> right = left + innerLineWidth;</div><div class="line">    <span class="keyword">float</span> bottom = top + innerLineHeight;</div><div class="line">    RectF rectF = <span class="keyword">new</span> RectF(left, top, right, bottom);</div><div class="line">    canvas.drawRoundRect(rectF, innerLineRadius, innerLineRadius, paint);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 绘制三角形</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">drawTriangle</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (triangleHollow) &#123;</div><div class="line">        paint.setStyle(Paint.Style.STROKE);</div><div class="line">        paint.setStrokeWidth(triangleStroke);</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">        paint.setStyle(Paint.Style.FILL);</div><div class="line"></div><div class="line">    paint.setColor(triangleColor);</div><div class="line"></div><div class="line">    <span class="comment">//绘制三角形</span></div><div class="line">    <span class="comment">//顶点上的点及其两侧的点使用贝塞尔曲线连接，实现圆弧效果</span></div><div class="line">    Path path = <span class="keyword">new</span> Path();</div><div class="line">    path.moveTo(coordinate[<span class="number">1</span>][<span class="number">0</span>], coordinate[<span class="number">1</span>][<span class="number">1</span>]);</div><div class="line">    path.lineTo(coordinate[<span class="number">2</span>][<span class="number">0</span>], coordinate[<span class="number">2</span>][<span class="number">1</span>]);</div><div class="line">    path.cubicTo(coordinate[<span class="number">2</span>][<span class="number">0</span>], coordinate[<span class="number">2</span>][<span class="number">1</span>], coordinate[<span class="number">3</span>][<span class="number">0</span>], coordinate[<span class="number">3</span>][<span class="number">1</span>], coordinate[<span class="number">4</span>][<span class="number">0</span>], coordinate[<span class="number">4</span>][<span class="number">1</span>]);</div><div class="line">    path.lineTo(coordinate[<span class="number">5</span>][<span class="number">0</span>], coordinate[<span class="number">5</span>][<span class="number">1</span>]);</div><div class="line">    path.cubicTo(coordinate[<span class="number">5</span>][<span class="number">0</span>], coordinate[<span class="number">5</span>][<span class="number">1</span>], coordinate[<span class="number">6</span>][<span class="number">0</span>], coordinate[<span class="number">6</span>][<span class="number">1</span>], coordinate[<span class="number">7</span>][<span class="number">0</span>], coordinate[<span class="number">7</span>][<span class="number">1</span>]);</div><div class="line">    path.lineTo(coordinate[<span class="number">8</span>][<span class="number">0</span>], coordinate[<span class="number">8</span>][<span class="number">1</span>]);</div><div class="line">    path.cubicTo(coordinate[<span class="number">8</span>][<span class="number">0</span>], coordinate[<span class="number">8</span>][<span class="number">1</span>], coordinate[<span class="number">0</span>][<span class="number">0</span>], coordinate[<span class="number">0</span>][<span class="number">1</span>], coordinate[<span class="number">1</span>][<span class="number">0</span>], coordinate[<span class="number">1</span>][<span class="number">1</span>]);</div><div class="line">    path.close();</div><div class="line"></div><div class="line">    canvas.drawPath(path, paint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="4-3-PlayView"><a href="#4-3-PlayView" class="headerlink" title="4.3 PlayView"></a>4.3 PlayView</h5><p>【播放(暂停)】按钮<br>类定义：<code>public class PlayView extends SkipView implements Checkable</code><br>该类继承了 SkipView 的属性和方法的同时又很多自己的属性，可以参看上面的 <a href="#">3.1 构成元素<br>（3） 播放，暂停按钮</a> 查看具体属性</p>
<h6 id="drawInside-方法-1"><a href="#drawInside-方法-1" class="headerlink" title="drawInside 方法"></a>drawInside 方法</h6><p>覆写了 SkipView 的 drawInside 方法<br>在【正在播放】状态下绘制双竖线，<code>drawLine</code> 方法也覆写了 SkipView 的方法。<br>在【没有播放】状态下直接调用父类的 <code>drawTriangle</code>方法绘制三角形。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawInside</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isPlaying) &#123;</div><div class="line">        drawLine(canvas);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">super</span>.drawTriangle(canvas);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h6 id="onTouchEvent-方法-1"><a href="#onTouchEvent-方法-1" class="headerlink" title="onTouchEvent 方法"></a>onTouchEvent 方法</h6><p>覆写了父类的方法，但只修改了少部分，在 ACTION_UP 事件到达时反转当前状态。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">       <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">           <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">               startPreAnim();</div><div class="line">               <span class="comment">//调用 View 的事件监听以使用 View 的 click 和 longClick 监听</span></div><div class="line">               <span class="keyword">super</span>.onTouchEvent(event);</div><div class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">           <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">               startReleaseAnim();</div><div class="line">               <span class="comment">//状态反转</span></div><div class="line">               toggle();</div><div class="line">               <span class="comment">//调用 View 的事件监听以使用 View 的 click 和 longClick 监听</span></div><div class="line">               <span class="keyword">super</span>.onTouchEvent(event);</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">default</span>:</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h6 id="toggle-方法"><a href="#toggle-方法" class="headerlink" title="toggle 方法"></a>toggle 方法</h6><p>该方法覆写自 <code>android.widget.Checkable</code>接口，反转当前选中状态。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//反转状态</span></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">toggle</span><span class="params">()</span> </span>&#123;</div><div class="line">       isPlaying = !isPlaying;</div><div class="line">       <span class="keyword">if</span> (checkedChangeListener != <span class="keyword">null</span>)</div><div class="line">           checkedChangeListener.onCheckedChanged(<span class="keyword">this</span>, isPlaying);</div><div class="line">       invalidate();</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h6 id="drawLine-方法"><a href="#drawLine-方法" class="headerlink" title="drawLine 方法"></a>drawLine 方法</h6><p>该方法中绘制 【播放状态】下的双竖线，绘制时需要以圆点为中心，在两侧绘制两条竖线，这样就能使两条竖线居中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">drawLine</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (pauseLineHollow) &#123;</div><div class="line">        paint.setStyle(Paint.Style.STROKE);</div><div class="line">        paint.setStrokeWidth(pauseLineStroke);</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">        paint.setStyle(Paint.Style.FILL);</div><div class="line"></div><div class="line">    paint.setColor(pauseLineColor);</div><div class="line"></div><div class="line">    <span class="comment">//绘制双竖线</span></div><div class="line">    <span class="keyword">float</span> left = centerX - pauseLineDistance / <span class="number">2</span> - pauseLineWidth;</div><div class="line">    <span class="keyword">float</span> top = centerY - pauseLineHeight / <span class="number">2</span>;</div><div class="line">    <span class="keyword">float</span> right = left + pauseLineWidth;</div><div class="line">    <span class="keyword">float</span> bottom = top + pauseLineHeight;</div><div class="line">    RectF rectF = <span class="keyword">new</span> RectF(left, top, right, bottom);</div><div class="line">    canvas.drawRoundRect(rectF, pauseLineRadius, pauseLineRadius, paint);</div><div class="line"></div><div class="line">    <span class="keyword">float</span> l = right + pauseLineDistance;</div><div class="line">    <span class="keyword">float</span> t = top;</div><div class="line">    <span class="keyword">float</span> r = l + pauseLineWidth;</div><div class="line">    <span class="keyword">float</span> b = bottom;</div><div class="line">    RectF rf = <span class="keyword">new</span> RectF(l, t, r, b);</div><div class="line">    canvas.drawRoundRect(rf, pauseLineRadius, pauseLineRadius, paint);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="五-如何使用"><a href="#五-如何使用" class="headerlink" title="五.如何使用"></a>五.如何使用</h4><h5 id="5-1-复制源文件"><a href="#5-1-复制源文件" class="headerlink" title="5.1 复制源文件"></a>5.1 复制源文件</h5><p>使用 【上一曲(下一曲)】和【播放，暂停】控件需复制 MediaView.java ， SkipView.java ， PlayView.java 和 attrs.xml 文件到你的项目中。</p>
<p>如果你只需要 【上一曲(下一曲)】对应的控件：<br>1 复制 MediaView.java 和 SkipView.java 到你的项目中<br>2 将 attrs 文件中的 <code>&lt;declare-styleable name=&quot;MediaView&quot;&gt;....&lt;/declare-styleable&gt;</code>及其对应的 attr 属性定义，<code>&lt;declare-styleable name=&quot;SkipView&quot;&gt;....&lt;/declare-styleable&gt;</code>及其对应的 attr 属性定义 复制到你项目中的 values 文件夹下的资源文件中。</p>
<h5 id="5-2-使用示例"><a href="#5-2-使用示例" class="headerlink" title="5.2 使用示例"></a>5.2 使用示例</h5><p>在完成 5.1 之后，需要 Rebuild Project ，然后就可以在你的项目中使用了。</p>
<p>可以在布局文件中直接使用：<br>使用时包名替换成你的源文件所在位置</p>
<p><strong>【上一曲(下一曲)】控件</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.duan.mediaviewdemo.view.SkipView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/sv_01"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_weight</span>=<span class="string">"0.5"</span></div><div class="line"></div><div class="line">    <span class="attr">app:innerLineHeight</span>=<span class="string">"30dp"</span></div><div class="line">    <span class="attr">app:innerLineWidth</span>=<span class="string">"6dp"</span></div><div class="line"></div><div class="line">    <span class="attr">app:innerLineRadius</span>=<span class="string">"8dp"</span></div><div class="line"></div><div class="line">    <span class="attr">app:distance</span>=<span class="string">"-8dp"</span></div><div class="line">    <span class="attr">app:triangleHeight</span>=<span class="string">"40dp"</span></div><div class="line"></div><div class="line">    <span class="attr">app:strokeWidth</span>=<span class="string">"0dp"</span></div><div class="line">    <span class="attr">app:triangleColor</span>=<span class="string">"#2ca4a4"</span></div><div class="line">    <span class="attr">app:triangleRadius</span>=<span class="string">"8dp"</span></div><div class="line"></div><div class="line">    /&gt;</div></pre></td></tr></table></figure></p>
<p><strong>【播放，暂停】控件</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.duan.mediaviewdemo.view.PlayView</span></span></div><div class="line">      <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></div><div class="line"></div><div class="line">      <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">      <span class="attr">android:layout_weight</span>=<span class="string">"0.5"</span></div><div class="line"></div><div class="line">      <span class="attr">android:rotation</span>=<span class="string">"180"</span></div><div class="line">      <span class="attr">app:checked</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">app:pauseLineDistance</span>=<span class="string">"8dp"</span></div><div class="line">      <span class="attr">app:pauseLineHeight</span>=<span class="string">"35dp"</span></div><div class="line"></div><div class="line">      <span class="attr">app:pauseLineHollow</span>=<span class="string">"true"</span></div><div class="line"></div><div class="line">      <span class="attr">app:pauseLineRadius</span>=<span class="string">"0dp"</span></div><div class="line">      <span class="attr">app:pauseLineWidth</span>=<span class="string">"10dp"</span></div><div class="line">      <span class="attr">app:strokeColor</span>=<span class="string">"#e4188f"</span></div><div class="line">      <span class="attr">app:triangleColor</span>=<span class="string">"#e4188f"</span></div><div class="line">      <span class="attr">app:strokeWidth</span>=<span class="string">"3dp"</span></div><div class="line">      <span class="attr">app:triangleHeight</span>=<span class="string">"35dp"</span></div><div class="line"></div><div class="line"></div><div class="line">      <span class="attr">app:triangleHollow</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">app:triangleRadius</span>=<span class="string">"5dp"</span></div><div class="line">      <span class="attr">app:triangleStroke</span>=<span class="string">"7dp"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>在 java 中使用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">    SkipView sv = (SkipView) findViewById(R.id.sv_01);</div><div class="line">    PlayView pv = (PlayView) findViewById(R.id.pv_01);</div><div class="line"></div><div class="line">    sv.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"click"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    pv.setOnCheckedChangeListener(<span class="keyword">new</span> PlayView.OnCheckedChangeListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(PlayView view, <span class="keyword">boolean</span> checked)</span> </span>&#123;</div><div class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"checked:"</span> + checked, Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>代码有点多，说的也可能不清楚  (0.0)，不如直接看代码吧。demo 已上传 GitHub ，欢迎下载使用，有问题可以给我留言。<br>仓库地址：</p>
<center><a href="https://github.com/DuanJiaNing/MediaView" target="_blank" rel="external">DuanJiaNing/MediaView</a></center>

<p><center><i><b>END</b></i></center></p>
<font size="+1" color="#888888">如果觉得不错就给颗 star 吧 &gt;.&lt;</font>
]]></content>
      
        
        <tags>
            
            <tag> 自定义 View </tag>
            
            <tag> 播放/暂停 </tag>
            
            <tag> 上一曲/下一曲 </tag>
            
            <tag> 媒体播放控制控件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android - Bitmap 的加载和 Cache]]></title>
      <url>/2017/06/13/Android%20-%20Bitmap%20%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%92%8C%20Cache/</url>
      <content type="html"><![CDATA[<p>Android - Bitmap 的加载和 Cache</p>
<h3 id="Android-Bitmap-的加载和-Cache"><a href="#Android-Bitmap-的加载和-Cache" class="headerlink" title="Android - Bitmap 的加载和 Cache"></a>Android - Bitmap 的加载和 Cache</h3><p>Android 应用可使用的最大堆内存受到 Android 系统的限制，通常情况为 16 M - 48 M，当应用使用的内存超出限制时就会引发内存溢出错误：<code>java.lang.OutOfMemoryError</code></p>
<p>大多数应用中都会涉及到 Bitmap ，而 Bitmap 往往会占用较多的内存，因此实现高效加载的同时控制好内存占用是加载 Bitmap 时需要遵循的原则。</p>
<p>缓存在很多开发场景中都会涉及，实际开发中经常需要对 Bitmap 进行缓存，通过缓存 Bitmap，能够极大的提高图片加载效率以及用户体验，同时能够减轻内存负担。</p>
<h4 id="1-Bitmap-的加载"><a href="#1-Bitmap-的加载" class="headerlink" title="1 Bitmap 的加载"></a>1 Bitmap 的加载</h4><p> Bitmap 指的是一张图片，可以是 png 格式也可以是 jpg 等其他常见的图片格式。<br> android 中通常使用 BitmapFactory 来加载 Bitmap，BitmapFactory 提供了如下几种方法从不同位置加载 Bitmap：</p>
<ul>
<li>BitmapFactory.decodeByteArray() 从字节数组中加载</li>
<li>BitmapFactory.decodeFile() 从文件中加载</li>
<li>BitmapFactory.decodeFileDescriptor() 通过”文件描述符“加载</li>
<li>BitmapFactory.decodeResource() 从资源中加载，通常为 <code>drawable</code>下的资源</li>
<li>BitmapFactory.decodeStream() 从输入流中加载</li>
</ul>
<h5 id="1-1-如何高效加载-Bitmap？"><a href="#1-1-如何高效加载-Bitmap？" class="headerlink" title="1.1 如何高效加载 Bitmap？"></a>1.1 如何高效加载 Bitmap？</h5><p>上面 BitmapFactory 的几个加载方法中每种加载方法都会有一个包含 <code>BitmapFactory.Options</code> 参数的重载方法，<code>BitmapFactory.Options</code>类可以将位图的尺寸按需进行压缩，只加载与 <code>ImageView</code>(或其它控件)尺寸相同的压缩尺寸后的位图，这样就可以将加载位图的大小压缩从而在一定程度上避免 OOM。</p>
<blockquote>
<p>使用<code>BitmapFactory.Options</code>加载位图时主要用到它的 inSampleSize 参数，即采样率，当 inSampleSize 为 1 时，采样后的图片大小与原始图片的大小相等；当 inSampleSize 大于 1 ，比如 2 时，采样后的图片宽高都为原始图片的 1/2 ，而像素为原始图片的 1/4,。</p>
</blockquote>
<p>比如有宽高为 1280 <em> 720 的一张图片，此时所占内存为 1280 </em> 720 <em> 4，当 inSampleSize 为 2 时，其正真加载尺寸为 640 </em> 360，所占内存为 640 <em> 360 </em> 4。</p>
<p>官方文档指出，inSampleSize 的取值应该总是 2 的指数，当不是指数时将向下取整选择最接近的 2 的指数代替。</p>
<p>调整方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//调整bitmap 大小</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">bitmapResizeFromResource</span><span class="params">(Resources res, <span class="keyword">int</span> id, <span class="keyword">int</span> reqWidth, <span class="keyword">int</span> reqHeight)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line"></div><div class="line">        <span class="comment">//只解析图片的原始宽高，而不正真加载图片</span></div><div class="line">        options.inJustDecodeBounds = <span class="keyword">true</span>;</div><div class="line">        BitmapFactory.decodeResource(res, id, options);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> inSampleSize = <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (reqWidth &gt; <span class="number">0</span> &amp;&amp; reqHeight &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> height = options.outHeight;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> width = options.outWidth;</div><div class="line"></div><div class="line">            <span class="comment">//如果宽或高有任一者不满足要求就进行调整</span></div><div class="line">            <span class="keyword">if</span> (height &gt; reqHeight || width &gt; reqHeight) &#123;</div><div class="line"></div><div class="line">                <span class="comment">// inSampleSize 为 1 没有作用，使从 2 开始增加</span></div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> halfHeight = height / <span class="number">2</span>;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> halfWidth = width / <span class="number">2</span>;</div><div class="line"></div><div class="line">                <span class="keyword">while</span> ((halfHeight / inSampleSize) &gt;= reqHeight &amp;&amp; (halfWidth / inSampleSize) &gt;= reqWidth)</div><div class="line">                    inSampleSize *= <span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        options.inSampleSize = inSampleSize;</div><div class="line">        options.inJustDecodeBounds = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> BitmapFactory.decodeResource(res, id, options);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="2-Android-中的缓存策略"><a href="#2-Android-中的缓存策略" class="headerlink" title="2 Android 中的缓存策略"></a>2 Android 中的缓存策略</h4><p> 缓存策略在 Android 开发中有着广泛的使用场景，尤其在图片加载这个场景。</p>
<blockquote>
<p>当程序第一次从网络（或其它来源）加载图片后，就将其缓存到存储设备上，这样下次使用时就不需要再从网络上下载，很多时候为了提高用户体验，往往还会把图片在内存中再缓存一份，这样当应用打算从网络请求一张图片时，程序首先会从内存中去获取，如果内存中没有就去存储设备中获取，如果存储设备中也没有就从网络上下载。</p>
</blockquote>
<p>缓存策略并没有统一的标准，一般来说，缓存策略主要包含缓存的添加、获取和删除。缓存的添加和获取都比较好理解，那么为什么要删除呢？这是因为不管是内存缓存还是存储缓存，他们的大小都是有限制的（移动设备的内存可用容量和存储设备，如 SD 卡等的容量也是有限的），当缓存装满时，就需要通过<strong>缓存算法</strong>选择部分缓存数据删除，以添加新的缓存数据。</p>
<p>目前常用的缓存算法是 LRU （Least Recently Used）算法，即最近最少使用算法。这个算法名字是不是很耳熟？《计算机操作系统》在 <em>存储器管理</em>  一章中介绍页面置换算法时就有 LRU 算法。</p>
<h5 id="2-1-LruCache"><a href="#2-1-LruCache" class="headerlink" title="2.1 LruCache"></a>2.1 LruCache</h5><blockquote>
<p>LruCache 是 Android 提供的一个缓存类，LruCache 时一个泛型类，它内部采用一个 LinkedHashMap 以强引用的方式存储外界的缓存对象，其提供了 get 和 put 方法来完成缓存的获取和添加，当缓存满时，LruCache 会移除较早使用的缓存对象，然后再添加新的缓存对象。</p>
</blockquote>
<p>LruCache 支持删除操作，通过 remove 方法可以删除一个指定的缓存对象。</p>
<h5 id="2-2-弱引用、软引用、虚引用、强引用"><a href="#2-2-弱引用、软引用、虚引用、强引用" class="headerlink" title="2.2 弱引用、软引用、虚引用、强引用"></a>2.2 弱引用、软引用、虚引用、强引用</h5><p>很早 java API 就添加了弱引用和软引用，引用类在垃圾回收工作的过程中有种要作用。</p>
<h6 id="2-2-1-强引用-Strong-Reference"><a href="#2-2-1-强引用-Strong-Reference" class="headerlink" title="2.2.1 强引用(Strong Reference)"></a>2.2.1 强引用(Strong Reference)</h6><p>平常我们开发时创建对象的方式大都是以强引用的方式创建，如<code>String str = &quot;abc&quot;</code>中变量 str 就是字符串对象<code>&quot;abc&quot;</code> 的一个强引用。<br>如下代码会移除 str 的强引用：<code>str = null</code>，此时垃圾回收器就会在某一时刻回收该对象。<br><strong>强引用可以阻止垃圾回收器回收对象。</strong></p>
<h6 id="2-2-2-弱引用-WeakReference"><a href="#2-2-2-弱引用-WeakReference" class="headerlink" title="2.2.2 弱引用 (WeakReference)"></a>2.2.2 弱引用 (WeakReference)</h6><p>你可以通过如下方式创建一个软引用对象：<br><code>String str = &quot;test&quot;</code><br><code>WeakReference&lt;String&gt; wr = new WeakReference&lt;String&gt;(str);</code><br>如果一个对象只有弱引用指向他，当移除强引用时(<code>str = null</code>)，垃圾回收器会立即回收该对象。<br><strong>弱引用无法阻止垃圾回收器回收对象。</strong></p>
<h6 id="2-2-3-软引用-SoftReference"><a href="#2-2-3-软引用-SoftReference" class="headerlink" title="2.2.3 软引用(SoftReference)"></a>2.2.3 软引用(SoftReference)</h6><p><code>String str = &quot;test&quot;;</code><br><code>SoftPreference sr = new SoftPreference(str)</code><br>如果有软引用指向对象，当移除强引用时(<code>str = null</code>)，对象不会立即被回收，只有在 JVM 需要内存时，才会回收该对象。<br><strong>软引无法阻止垃圾回收器回收对象，但可以延迟回收</strong></p>
<h6 id="2-2-4-虚引用-PhantomReference"><a href="#2-2-4-虚引用-PhantomReference" class="headerlink" title="2.2.4 虚引用{PhantomReference}"></a>2.2.4 虚引用{PhantomReference}</h6><p><code>String str = &quot;test&quot;</code><br><code>PhantomReference pr = new PhantomReference(str)</code><br>当移除强引用时(<code>str = null</code>)，拥有虚引用的对象可以在任何时刻被垃圾回收器回收。<br><strong>虚引用无法阻止垃圾回收器回收对象。</strong></p>
<p>参考文章：<a href="https://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651477541&amp;idx=1&amp;sn=d4a110d011ac32ab0749f9747c1dc126&amp;chksm=bd253a5a8a52b34ca45225ffd917583c46403707acfda0ccd8fbe1fefb1e776b938b6fce6558&amp;mpshare=1&amp;scene=23&amp;srcid=0609Qd4sklt86sXYR0xpyIxE#rd" target="_blank" rel="external">Java中弱引用、软引用、虚引用及强引用的区别</a></p>
<h5 id="2-3-DiskLruCache"><a href="#2-3-DiskLruCache" class="headerlink" title="2.3 DiskLruCache"></a>2.3 DiskLruCache</h5><blockquote>
<p>DiskLruCache 用于实现存储设备缓存，即磁盘缓存，它通过将缓存对象写入文件系统从而实现缓存。</p>
</blockquote>
<p>DiskLruCache 得到了 android 官方文档的推荐，但它不属于 Android SDK 的一部分，源码可在这里获得：<a href="http://download.csdn.net/detail/sinyu890807/7709759" target="_blank" rel="external">DiskLruCache.java</a></p>
<p>DiskLruCache 的使用不做介绍，可参看这篇文章：<a href="http://blog.csdn.net/guolin_blog/article/details/28863651" target="_blank" rel="external">Android DiskLruCache完全解析，硬盘缓存的最佳方案</a></p>
<center><b><em>END</em></b></center>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Bitmap </tag>
            
            <tag> Cache </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[n 阶贝塞尔曲线计算公式实现]]></title>
      <url>/2017/05/30/n%20%E9%98%B6%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F%E5%AE%9E%E7%8E%B0%20(1)/</url>
      <content type="html"><![CDATA[<h3 id="n-阶贝塞尔曲线计算公式实现"><a href="#n-阶贝塞尔曲线计算公式实现" class="headerlink" title="n 阶贝塞尔曲线计算公式实现"></a>n 阶贝塞尔曲线计算公式实现</h3><p>关于贝塞尔曲线是什么，可以用来做什么，这里就不再介绍，如果你还不了解，可以先去看看下面这篇文章：<a href="http://blog.csdn.net/cdnight/article/details/48468653" target="_blank" rel="external">贝塞尔曲线扫盲</a></p>
<h4 id="1-效果参考"><a href="#1-效果参考" class="headerlink" title="1. 效果参考"></a>1. 效果参考</h4><table><br><tr><br><td><br><img src="http://img.blog.csdn.net/20170530115228765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><br></td><br><td><br><img src="http://htmljs.b0.upaiyun.com/uploads/1415845715278-bezier-quadratic-animation.gif"><br></td><br></tr><br></table><br><img src="http://img.blog.csdn.net/20170530115632598?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><br>#### 2. 思路解析<br><br>百度百科上给出的一般参数公式是这样的：<br>给定点 P0,P1,P2, … ,Pn，其贝塞尔曲线公式如下（即贝塞尔曲线上的点 B(t) 可由如下公式计算得到）：<br><img src="http://img.blog.csdn.net/20170530115146448?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><br>可以看出其公式是由一个格式固定的表达式之和来表示，这个表达式就是关键：<br><img src="http://img.blog.csdn.net/20170530115205624?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>该表达式可分为四个部分看：<br><br>- 从 i 递增到 n 的常数部分<br>- Pi 坐标部分<br>- (1 - t)^(n - i)<br>- t^i<br>可以看出这四部分都与 i 的值相关，此外 t 值的计算方式为：i/(n+1)<br><br>##### 如果直接从上面的公式上找规律比较抽象，那就从具体的例子中找规律吧：<br><br>设 Bt 为要计算的贝塞尔曲线上的坐标，N 为控制点个数，P0,P1,P2..Pn 为贝塞尔曲线控制点的坐标，当 N 值不同时有如下计算公式:<br>如 N 为 3 表示贝塞尔曲线的控制点有 3 个点，这时 n 为 2 ，这三个点分别用 P0,P1,P2 表示。<br><br>- N = 3: P = (1-t)^2<em>P0 + 2</em>(1-t)<em>t</em>P1 + t^2<em>P2 <br><br>- N = 4: P = (1-t)^3</em>P0 + 3<em>(1-t)^2</em>t<em>P1 + 3(1-t)</em>t^2<em>P2 + t^3</em>P3 <br><br>- N = 5: P = (1-t)^4<em>P0 + 4</em>(1-t)^3<em>t</em>P1 + 6(1-t)^2<em>t^2</em>P2 + 4<em>(1-t)</em>t^3<em>P3 + t^4</em>P4 <br><br><br>将贝塞尔曲线一般参数公式中的表达式用如下方式表示：<br>设有常数 a,b 和 c，则该表达式可统一表示为如下形式：<br>a <em> (1 - t)^b </em> t^c <em> Pn;<br><br>分析当 N 分别为3,4,5 时对应 a,b,c 的值：<br>如 N = 3 时，公式有三个表达式，第一个表达式为 (1-t)^2</em>P0，其对应 a,b,c 值分别为：1,2,0<br><br>- N = 3:&nbsp;&nbsp;&nbsp;1,2,0&nbsp;&nbsp;&nbsp;2,1,1&nbsp;&nbsp;&nbsp;1,0,2<br>a: 1 2 1<br>b: 2 1 0<br>c: 0 1 2<br>- N = 4:&nbsp;&nbsp;&nbsp;1,3,0&nbsp;&nbsp;&nbsp;3,2,1&nbsp;&nbsp;&nbsp;3,1,2&nbsp;&nbsp;&nbsp;1,0,3<br>a: 1 3 3 1<br>b: 3 2 1 0<br>c: 0 1 2 3<br>- N = 5:&nbsp;&nbsp;&nbsp;1,4,0&nbsp;&nbsp;&nbsp;4,3,1&nbsp;&nbsp;&nbsp;6,2,2&nbsp;&nbsp;&nbsp;4,1,3&nbsp;&nbsp;&nbsp;1,0,4<br>a: 1 4 6 4 1<br>b: 4 3 2 1 0<br>c: 0 1 2 3 4<br><br>根据上面的分析就可以总结出 a,b,c 对应的取值规则：<br><br>- b: (N - 1) 递减到 0     (b 为 1-t 的幂)<br>- c: 0 递增到 (N - 1)     (c 为 t 的幂)<br>- a: 在 N 分别为 1,2,3,4,5 时将其值用如下形式表示： <br><br>N=1:———1<br>N=2:——–1&nbsp;&nbsp;1<br>N=3:——1&nbsp;&nbsp;2&nbsp;&nbsp;1<br>N=4:—–1&nbsp;&nbsp;3&nbsp;&nbsp;3&nbsp;&nbsp;1<br>N=5:—1&nbsp;&nbsp;4&nbsp;&nbsp;6&nbsp;&nbsp;4&nbsp;&nbsp;1<br>a 值的改变规则为： <a href="http://baike.baidu.com/item/杨辉三角" target="_blank" rel="external">杨辉三角</a><br><br>#### 3. 使用 java 来实现<br>接下来就实现它：先再来一个例子<br>比如计算控制点坐标分别为：P0(3,8)，P1(2,3)，P2(2,7)，想要返回 10 个在贝塞尔曲线上的点，用 java 可以这样写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span>[] p0 = &#123;<span class="number">3</span>, <span class="number">8</span>&#125;;</div><div class="line">        <span class="keyword">float</span>[] p1 = &#123;<span class="number">4</span>, <span class="number">3</span>&#125;;</div><div class="line">        <span class="keyword">float</span>[] p2 = &#123;<span class="number">2</span>, <span class="number">7</span>&#125;;</div><div class="line">        <span class="keyword">float</span>[][] result = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">10</span>][<span class="number">2</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            <span class="keyword">float</span> t = i / <span class="number">10</span>;</div><div class="line">            result[i][<span class="number">0</span>] = (<span class="keyword">float</span>) (<span class="number">1</span> * Math.pow(<span class="number">1</span> - t, <span class="number">2</span>) * Math.pow(t, <span class="number">0</span>) * p0[<span class="number">0</span>] + <span class="number">2</span> * Math.pow(<span class="number">1</span> - t, <span class="number">1</span>) * Math.pow(t, <span class="number">1</span>) * p1[<span class="number">0</span>] + <span class="number">1</span> * Math.pow(<span class="number">1</span> - t, <span class="number">0</span>) * Math.pow(t, <span class="number">2</span>) * p2[<span class="number">0</span>]);</div><div class="line">            result[i][<span class="number">1</span>] = (<span class="keyword">float</span>) (<span class="number">1</span> * Math.pow(<span class="number">1</span> - t, <span class="number">2</span>) * Math.pow(t, <span class="number">0</span>) * p0[<span class="number">1</span>] + <span class="number">2</span> * Math.pow(<span class="number">1</span> - t, <span class="number">1</span>) * Math.pow(t, <span class="number">1</span>) * p1[<span class="number">1</span>] + <span class="number">1</span> * Math.pow(<span class="number">1</span> - t, <span class="number">0</span>) * Math.pow(t, <span class="number">2</span>) * p2[<span class="number">1</span>]);</div><div class="line">        &#125;</div></pre></td></tr></table></figure><br><br>好了，最后的计算方法是下面这个：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">     <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> poss      贝塞尔曲线控制点坐标</div><div class="line">     * <span class="doctag">@param</span> precision 精度，需要计算的该条贝塞尔曲线上的点的数目</div><div class="line">     * <span class="doctag">@return</span> 该条贝塞尔曲线上的点（二维坐标）</div><div class="line">	 */</div><div class="line"><span class="keyword">public</span> <span class="keyword">float</span>[][] calculate(<span class="keyword">float</span>[][] poss, <span class="keyword">int</span> precision) &#123;</div><div class="line"></div><div class="line">        <span class="comment">//维度，坐标轴数（二维坐标，三维坐标...）</span></div><div class="line">        <span class="keyword">int</span> dimersion = poss[<span class="number">0</span>].length;</div><div class="line"></div><div class="line">        <span class="comment">//贝塞尔曲线控制点数（阶数）</span></div><div class="line">        <span class="keyword">int</span> number = poss.length;</div><div class="line"></div><div class="line">        <span class="comment">//控制点数不小于 2 ，至少为二维坐标系</span></div><div class="line">        <span class="keyword">if</span> (number &lt; <span class="number">2</span> || dimersion &lt; <span class="number">2</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">float</span>[][] result = <span class="keyword">new</span> <span class="keyword">float</span>[precision][dimersion];</div><div class="line"></div><div class="line">        <span class="comment">//计算杨辉三角</span></div><div class="line">        <span class="keyword">int</span>[] mi = <span class="keyword">new</span> <span class="keyword">int</span>[number];</div><div class="line">        mi[<span class="number">0</span>] = mi[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= number; i++) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">int</span>[] t = <span class="keyword">new</span> <span class="keyword">int</span>[i - <span class="number">1</span>];</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; t.length; j++) &#123;</div><div class="line">                t[j] = mi[j];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            mi[<span class="number">0</span>] = mi[i - <span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i - <span class="number">2</span>; j++) &#123;</div><div class="line">                mi[j + <span class="number">1</span>] = t[j] + t[j + <span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//计算坐标点</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; precision; i++) &#123;</div><div class="line">            <span class="keyword">float</span> t = (<span class="keyword">float</span>) i / precision;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dimersion; j++) &#123;</div><div class="line">                <span class="keyword">float</span> temp = <span class="number">0.0f</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; number; k++) &#123;</div><div class="line">                    temp += Math.pow(<span class="number">1</span> - t, number - k - <span class="number">1</span>) * poss[k][j] * Math.pow(t, k) * mi[k];</div><div class="line">                &#125;</div><div class="line">                result[i][j] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><br><br>在 android 中继承 View 然后重写 onDraw 方法，在 Activity 绑定的布局文件中加入该自定义 View ，调用 calculate 方法就可以画出来任意阶的贝塞尔曲线啦。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">........</div><div class="line">	<span class="comment">// calculate 方法在 BezierImpl 中实现</span></div><div class="line">    <span class="keyword">private</span> BezierImpl bezier = <span class="keyword">new</span> BezierImpl();</div><div class="line">    <span class="keyword">private</span> Paint paint = <span class="keyword">new</span> Paint();</div><div class="line">    <span class="keyword">float</span>[][] poss = &#123;</div><div class="line">            &#123;<span class="number">353.0f</span>, <span class="number">383.0f</span>&#125;,</div><div class="line">            &#123;<span class="number">670.0f</span>, <span class="number">266.0f</span>&#125;,</div><div class="line">            &#123;<span class="number">403.0f</span>, <span class="number">128.0f</span>&#125;,</div><div class="line">            &#123;<span class="number">148.0f</span>, <span class="number">369.0f</span>&#125;,</div><div class="line">            &#123;<span class="number">400.0f</span>, <span class="number">513.0f</span>&#125;,</div><div class="line">            &#123;<span class="number">564.0f</span>, <span class="number">503.0f</span>&#125;,</div><div class="line">            &#123;<span class="number">582.0f</span>, <span class="number">378.0f</span>&#125;,</div><div class="line">            &#123;<span class="number">682.0f</span>, <span class="number">878.0f</span>&#125;,</div><div class="line">            &#123;<span class="number">182.0f</span>, <span class="number">878.0f</span>&#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> x0, y0, x, y;</div><div class="line">        paint.setColor(Color.DKGRAY);</div><div class="line">        paint.setStrokeWidth(<span class="number">3.0f</span>);</div><div class="line">        x0 = poss[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">        y0 = poss[<span class="number">0</span>][<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; poss.length; i++) &#123;</div><div class="line">            x = poss[i][<span class="number">0</span>];</div><div class="line">            y = poss[i][<span class="number">1</span>];</div><div class="line">            canvas.drawLine(x0, y0, x, y, paint);</div><div class="line">            x0 = x;</div><div class="line">            y0 = y;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        paint.setColor(Color.RED);</div><div class="line">        paint.setStrokeWidth(<span class="number">5.0f</span>);</div><div class="line">        <span class="keyword">float</span>[][] po = bezier.calculate(poss, <span class="number">500</span>);</div><div class="line">        x0 = po[<span class="number">0</span>][<span class="number">0</span>];</div><div class="line">        y0 = po[<span class="number">0</span>][<span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">500</span>; i++) &#123;</div><div class="line">            x = po[i][<span class="number">0</span>];</div><div class="line">            y = po[i][<span class="number">1</span>];</div><div class="line">            canvas.drawLine(x0, y0, x, y, paint);</div><div class="line">            x0 = x;</div><div class="line">            y0 = y;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...........</div></pre></td></tr></table></figure><br><br>——<br>最后贴一个最近在做的一个自定义 View（GummyView），使用了到了贝塞尔曲线，用了上面的方法，有兴趣的话可以 Fork 或给我留言 &gt;.<a href="。
地址：[DuanJiaNing/GummyView](https://github.com/DuanJiaNing/GummyView)

目前实现的效果是这样的：
&lt;table">。
地址：[DuanJiaNing/GummyView](https://github.com/DuanJiaNing/GummyView)

目前实现的效果是这样的：
&lt;table</a><br><tr><br><td><img src="https://raw.githubusercontent.com/DuanJiaNing/GummyView/master/gummy_01.gif"></td><br><td><img src="https://raw.githubusercontent.com/DuanJiaNing/GummyView/master/gummy_02.gif"></td><br><td><img src="https://raw.githubusercontent.com/DuanJiaNing/GummyView/master/gummy_03.gif"></td><br></tr><br>

<center><u><b><em>END</em></b></u></center>]]></content>
      
        
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 贝塞尔曲线 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo + GitHub Page 搭建属于自己的博客]]></title>
      <url>/2017/05/20/Hexo-+-GitHub-Page-%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h3 id="Hexo-GitHub-Page-搭建属于自己的博客"><a href="#Hexo-GitHub-Page-搭建属于自己的博客" class="headerlink" title="Hexo + GitHub Page 搭建属于自己的博客"></a>Hexo + GitHub Page 搭建属于自己的博客</h3><p>搭建一个个人博客的想法萌生很久了，但一直被搁置，今天终于把个人博客搭好了：<br>地址：<a href="https://duanjianing.github.io/" target="_blank" rel="external">Duan</a></p>
<p>在此记录一下搭建的过程：</p>
<p>先要安装 Git，安装 Git 的方法就省略了，Git 的安装和使用教程资源推荐：<br><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=503177922&amp;idx=1&amp;sn=6ef35c039a6564b1cec6343754a6c004&amp;mpshare=1&amp;scene=23&amp;srcid=0520cudKAjtYzw6s9Pj7EQJd#rd" target="_blank" rel="external">stormzhang GitHub教程</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650661788&amp;idx=1&amp;sn=b7c54f9b13f4e30fe151905f11c02800&amp;scene=21#wechat_redirect" target="_blank" rel="external">从0开始学习 GitHub 系列之「Git速成」</a></p>
<p>博客使用的是 Hexo + GitHub Page 的方式，Hexo 使用的主题是 Next，Hexo next 主题的细节配置可以在这里找到，有中文版的：<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT 使用文档</a></p>
<h4 id="1-下载安装-Hexo"><a href="#1-下载安装-Hexo" class="headerlink" title="1 下载安装 Hexo"></a>1 下载安装 Hexo</h4><p>Hexo 安装和搭建依赖 Nodejs，所有在此之前需要先安装 Nodejs<br><a href="https://nodejs.org/en/" target="_blank" rel="external">下载Node.js</a><br>参考地址：<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">安装Node.js</a></p>
<p>在准备好之后，使用 Git Bash 输入如下命令安装 Hexo：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo</div></pre></td></tr></table></figure>
<h4 id="2-部署博客到-GitHub"><a href="#2-部署博客到-GitHub" class="headerlink" title="2 部署博客到 GitHub"></a>2 部署博客到 GitHub</h4><h6 id="2-1-在电脑中创建项目"><a href="#2-1-在电脑中创建项目" class="headerlink" title="2.1 在电脑中创建项目"></a>2.1 在电脑中创建项目</h6><p>在你的电脑上，建立一个目录，作为项目的主目录，就以我自己的为例：<br>我创建的目录：<code>E:\Blog\Hexo</code></p>
<p>Windows 进到该目录下然后鼠标右键 <code>Git Bash Here</code>（成功安装 Git 就会有这个），或者在任意位置<code>Git Bash Here</code>，然后依次输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /e/B<span class="built_in">log</span>/Hexo/</div><div class="line">$ git init</div></pre></td></tr></table></figure>
<p>Hexo 随后会在该目录下建立网站所需的文件</p>
<h6 id="2-2-启动-hexo-自带服务器，实时查看修改效果"><a href="#2-2-启动-hexo-自带服务器，实时查看修改效果" class="headerlink" title="2.2 启动 hexo 自带服务器，实时查看修改效果"></a>2.2 启动 hexo 自带服务器，实时查看修改效果</h6><p>输入如下命令，启动 Hexo 自带服务器，这时打开浏览器输入 <code>http://localhost:4000/</code>就能看到默认的博客界面了</p>
<p>注意这里如果你想直接在 bash 里复制网址，不用用 Ctrl + C，用右键菜单复制，不然服务器就会停掉。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ai@Duan MINGW64 /e/B<span class="built_in">log</span>/Hexo</div><div class="line">$ hexo server</div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure></p>
<h6 id="2-3-创建一篇新博客"><a href="#2-3-创建一篇新博客" class="headerlink" title="2.3 创建一篇新博客"></a>2.3 创建一篇新博客</h6><p>bash 中执行如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure></p>
<p>这时在 <code>E:\Blog\Hexo\source\_posts</code>下面应该就自动生成了一个名叫 <code>My-New-Post.md</code>（空格自动被 ‘-‘ 替换）的 markDown 文件，这时去浏览器里刷新一下，一篇叫 <code>My New Post</code>的博客就生成了。</p>
<p>打开<code>My-New-Post.md</code>看一下，发现里面已经有如下的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: My New Post</div><div class="line">date: 2017-05-20 12:54:56</div><div class="line">tags: </div><div class="line">---</div></pre></td></tr></table></figure>
<p>这里 <code>title</code>是文章的标题，网站上解析文章标题时就是读取的这个，<code>date</code>时时间，如果你是在 bash 用 <code>hexo new</code>命令生成，那么会自动取当前时间，<code>tags</code>是标签，只有一个标签时直接写在后面即可，有多个标签时要按如下的格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tags: </div><div class="line">- Android</div><div class="line">- java</div></pre></td></tr></table></figure></p>
<p>这里要特别注意<code>title:</code>，<code>date:</code>，<code>tags:</code>在<code>:</code>后面都有一个空格，这个空格千万不能省，不然就解析不了，下面将要说到的 <code>_config.yml</code>文件也是一样的。</p>
<p>接下来执行如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure></p>
<p>该命令执行完后，会在 E:\Blog\Hexo\public 目录下生成一系列html，css等文件。</p>
<h6 id="2-4-部署到-Github"><a href="#2-4-部署到-Github" class="headerlink" title="2.4 部署到 Github"></a>2.4 部署到 Github</h6><p>正式部署(deploy)之前，需要在 GitHub 上创建一个仓库名为 <code>DuanJiaNing.github.io</code>的仓库，把<code>DuanJiaNing</code>替换为你自己的用户名。然后复制 SSH 地址，我的是：<code>git@github.com:DuanJiaNing/DuanJiaNing.github.io.git</code></p>
<p>打开<code>_config.yml</code>(E:\Blog\Hexo_config.yml)文件，定位到如下位置，并修改（注意<code>:</code>后的空格不能省）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: git@github.com:DuanJiaNing/DuanJiaNing.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>保存一下，接下来在 bash 中输入如下命令部署到 GitHub 仓库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p>
<p>浏览器中打开<code>https://duanjianing.github.io/</code>，这时应该能看到你自己的博客界面了。</p>
<p>可以选择 <code>hexo new</code>命令新建一篇博客，或是直接复制其他的 md 文件到 E:\Blog\Hexo\source_posts 文件夹中，复制的话记得要在复制的 md 文件开头加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: ****</div><div class="line">date: ***</div><div class="line">tags: **</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>每次部署新文章到 GitHub 可以依次执行如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure></p>
<h4 id="3-使用-next-主题"><a href="#3-使用-next-主题" class="headerlink" title="3 使用 next 主题"></a>3 使用 next 主题</h4><p>next 主题的下载和使用在 <a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT 使用文档</a> 中说得很清楚，大多数问题都能在那得到解决。</p>
<center><u><b><em>END</em></b></u></center>]]></content>
      
        
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kotlin 学习笔记 - 01]]></title>
      <url>/2017/05/19/Kotlin-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-01/</url>
      <content type="html"><![CDATA[<p>原文地址：<a href="http://www.cnblogs.com/figozhg/p/4983919.html" target="_blank" rel="external">用Kotlin开发Android应用</a></p>
<h3 id="1-类定义"><a href="#1-类定义" class="headerlink" title="1 类定义"></a>1 类定义</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Personal</span></span>(</div><div class="line">        <span class="keyword">var</span> name: String,</div><div class="line">        <span class="keyword">var</span> id: <span class="built_in">Int</span> = <span class="number">1</span>,</div><div class="line">        <span class="keyword">var</span> sex: String = <span class="string">"male"</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p>格式：类名(构造参数…)<br>构造参数可以指定默认值，那么在初始化实例时，对应位置参数就可以不传值，方法也是，但这里要注意顺序的问题，如 id 不想传值，sex 想传值，这种情况的话似乎不行（就目前学到的关于 Kotlin 的知识来说）<br>初始化方式有以下几种：<br><code>val per = Personal(12)</code><br><code>val per1 = Personal(13,&quot;lili&quot;)</code><br><code>val per2 = Personal(14,&quot;tom&quot;,&quot;male&quot;)</code><br>另外构造参数同时可以作为该类的属性（域），可以直接操作：<br><code>per.name = &quot;jack&quot;</code><br><code>val id = per.id</code></p>
<h3 id="2-字符串构造"><a href="#2-字符串构造" class="headerlink" title="2 字符串构造"></a>2 字符串构造</h3><p>使用 <code>${}</code> 嵌入字符串中<br><code>System.out.println(&quot;person name is = ${per.name}&quot;)</code><br>如果对变量直接引用则只需使用 <code>$</code> 后跟变量名即可<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">(</span></span></div><div class="line">        <span class="keyword">var</span> sex = <span class="string">"male"</span></div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"person sex is = <span class="subst">$sex</span>"</span>)</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>注意：<br>当<code>$sex</code>紧接着就是字母、数字或下划线时仍需要使用 <code>{}</code></p>
<h3 id="3-空类型安全"><a href="#3-空类型安全" class="headerlink" title="3 空类型安全"></a>3 空类型安全</h3><h4 id="3-1-使用-显示指明对象可以为-null"><a href="#3-1-使用-显示指明对象可以为-null" class="headerlink" title="3.1 使用 ? 显示指明对象可以为 null"></a>3.1 使用 <code>?</code> 显示指明对象可以为 null</h4><p>此时要明确指定数据类型<br><code>var sex: String?</code><br>也只有这样，这个参数才能被赋为 null<br><code>var sex: String? = null</code><br>即不能为 null （没有 ? ）的变量是不允许赋 null 的，从而避免遇到非预期的空指针异常</p>
<p>当变量可以为 null ，那么使用该变量的时候 Kotlin 就强制必须判断是否为 null<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> mTextView:TextView? = <span class="literal">null</span></div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</div><div class="line">        setContentView(R.layout.activity_main)</div><div class="line">        initViews(<span class="literal">null</span>)</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initViews</span><span class="params">(view: <span class="type">View</span>?)</span></span> &#123;</div><div class="line">        mTextView = findViewById(R.id.text_view) <span class="keyword">as</span> TextView?</div><div class="line">        mTextView?.text = <span class="string">"i have change the text"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意这一句，如果不加 <code>?</code>，编译是无法通过的。<br><code>mTextView?.text = &quot;i have change the text&quot;</code></p>
<h4 id="3-2-确定不为-null-才使用，否则抛出异常"><a href="#3-2-确定不为-null-才使用，否则抛出异常" class="headerlink" title="3.2 确定不为 null 才使用，否则抛出异常"></a>3.2 确定不为 null 才使用，否则抛出异常</h4><p><code>id!!.toString()</code><br>使用 <code>!!</code> 代表，表示使用的时候开发者断定此变量一定不会为 null 。但如果开发者错了，变量为 null，那么程序会抛运行时异常而立即终止，开发者需要承担程序终止的风险，所有没十足的把握就尽量不用吧。</p>
<h4 id="3-3-如果为空就给一个值"><a href="#3-3-如果为空就给一个值" class="headerlink" title="3.3 如果为空就给一个值"></a>3.3 如果为空就给一个值</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testNull</span><span class="params">(id: <span class="type">Int</span>? = <span class="literal">null</span>)</span></span> &#123;</div><div class="line">       <span class="keyword">val</span> caseNull = id?.toString()</div><div class="line">       <span class="keyword">val</span> tr = caseNull ?: <span class="string">"144"</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>id 不为 null 才调用 toString 方法，id 为 null 则 id.toString 也为 null，此时caseNull 也会为 null，要使 caseNull 不为 null，就使用 <code>?:</code> 为其指定一个值。<br>也可以简写为：<code>val tr = id?.toString()?: &quot;144&quot;</code></p>
<h3 id="4-扩展函数"><a href="#4-扩展函数" class="headerlink" title="4 扩展函数"></a>4 扩展函数</h3><p>可以为任何类添加新函数，只需在函数名前加上类名。在调用处，该函数将被导入到类中。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">fun</span> Activity.<span class="title">toast</span><span class="params">(context: <span class="type">Context</span>, message: <span class="type">CharSequence</span>, duration: <span class="type">Int</span> = Toast.LENGTH_SHORT)</span></span> &#123;</div><div class="line">    Toast.makeText(context, <span class="string">"msg:<span class="subst">$message</span>"</span>, duration).show()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以在 Activity 中这样使用</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> util = Util()</div><div class="line">    util.toast(<span class="keyword">this</span>,<span class="string">"a test msg"</span>)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但不能过度使用，应创建专门的委托类</p>
<h3 id="5-函数式支持"><a href="#5-函数式支持" class="headerlink" title="5 函数式支持"></a>5 函数式支持</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">val</span> util = Util()</div><div class="line">	<span class="keyword">val</span> tv = TextView(<span class="keyword">this</span>)</div><div class="line">	tv.setOnClickListener &#123; </div><div class="line">	    <span class="keyword">var</span> i = <span class="number">12</span></div><div class="line">	    util.toast(<span class="keyword">this</span>,<span class="string">"click <span class="subst">$i</span>"</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6-when-关键字"><a href="#6-when-关键字" class="headerlink" title="6 when 关键字"></a>6 when 关键字</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</div><div class="line">     <span class="keyword">var</span> ii = <span class="number">0</span></div><div class="line">        <span class="keyword">when</span> (ii) &#123;</div><div class="line">            <span class="number">0</span> -&gt; println( <span class="string">"0：<span class="subst">$ii</span>"</span>)</div><div class="line">            <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span> -&gt; println(<span class="string">"1-10：<span class="subst">$ii</span>"</span>)</div><div class="line">            <span class="keyword">else</span> -&gt; println(<span class="string">"<span class="subst">$ii</span>"</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>in：在区间内（闭区间）<br>else：否则</p>
<h3 id="7-open-关键字"><a href="#7-open-关键字" class="headerlink" title="7 open 关键字"></a>7 open 关键字</h3><p>一个类想被继承，必须标注为 open<br>一个方法想被覆写，父类方法上要加 open，子类覆写时要加 override</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Util</span> </span>&#123;</div><div class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">getUtil</span><span class="params">()</span></span>: Util &#123;</div><div class="line">        <span class="keyword">return</span> Util()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringUtil</span> : <span class="type">Util</span></span>() &#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getUtil</span><span class="params">()</span></span>: Util &#123;</div><div class="line">        <span class="keyword">return</span> StringUtil()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="8-Data-class"><a href="#8-Data-class" class="headerlink" title="8 Data class"></a>8 Data class</h3><p>Java 中我们会创建一些只用于保存数据的实体类</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(</div><div class="line">        <span class="keyword">var</span> name: String,</div><div class="line">        <span class="keyword">var</span> id: <span class="built_in">Int</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p>hashCode equals toString getter/setter 自动生成</p>
<h3 id="9-其他知识点"><a href="#9-其他知识点" class="headerlink" title="9 其他知识点"></a>9 其他知识点</h3><ul>
<li>语句末可以（推荐）不使用 ; 号</li>
<li>强类型语言：变量类型确定后就不能更改（不能强转）</li>
<li>var：一般类型</li>
<li>val：最终类型（只能赋值一次）</li>
<li>使用 : 代替 java 中的 extends 关键字，所继承的类型同时要调用其构造方法</li>
<li>类型和名称以另一种方式编写，用冒号分割。</li>
<li>在Java中，我们可以用注释使我们的代码更清晰，但不是必须的。而Kotlin强制我们这么做。</li>
<li>方法参数：类型和名称以另一种方式编写，用冒号分割。</li>
<li>显示使用 override </li>
</ul>
<center><u><b><em>END</em></b></u></center>]]></content>
      
        
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 的消息机制]]></title>
      <url>/2017/05/16/Android-%E7%9A%84%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h3 id="Android-Android-的消息机制"><a href="#Android-Android-的消息机制" class="headerlink" title="Android-Android 的消息机制"></a>Android-Android 的消息机制</h3><blockquote>
<p>Android 的消息机制主要指的是 Handler 的运行机制，Handler 是 Android 消息机制的上层接口，通过 Handler 可以轻松的将一个任务切换到 Handler 所在的线程中去执行，由于 Android 开发规范的限制，我们不能在非 UI 线程中更新 UI，同时不应该也不能在 UI 线程中进行耗时的 I/O 操作或者进行网络访问，这时就需要使用 Handler。</p>
</blockquote>
<h4 id="1-Handler、MessageQueue、Looper-概述"><a href="#1-Handler、MessageQueue、Looper-概述" class="headerlink" title="1 Handler、MessageQueue、Looper 概述"></a>1 Handler、MessageQueue、Looper 概述</h4><blockquote>
<p>Handler 的运行需要底层的 MessageQueue 和 Looper 的支撑。</p>
</blockquote>
<ul>
<li>MessageQueue：其中文翻译是“消息队列”，内部存储了一组消息（Message），虽然叫消息队列，但其内部使用的数据结构并不是队列，而是单链表。</li>
<li>Looper：Looper 会以无限循环的方式去 MessageQueue 中查找是否还有未处理的消息或新消息，有的话就处理，没有则等待。</li>
<li>ThreadLocal：Looper 中使用到了 ThreadLocal ，ThreadLocal 并不是线程，我们知道 Handler 创建时会采用当前线程的 Looper 来构造消息循环系统，那他怎么找到当前线程的 Looper 实例呢？ThreadLocal 可以在每个线程中存储同一个对象的不同副本，即不同线程可以调用同一个 ThreadLocal 实例的方法获取属于自己的 Looper 实例，</li>
</ul>
<h4 id="2-Android-消息机制概述"><a href="#2-Android-消息机制概述" class="headerlink" title="2 Android 消息机制概述"></a>2 Android 消息机制概述</h4><h5 id="2-1-ViewRootImpl"><a href="#2-1-ViewRootImpl" class="headerlink" title="2.1 ViewRootImpl"></a>2.1 ViewRootImpl</h5><blockquote>
<p>ViewRootImpl 是链接 WindowManager 和DecorView 的纽带，另外 View 的绘制也是通过ViewRootImpl 来完成的。</p>
</blockquote>
<p>它的主要作用总结如下：</p>
<ul>
<li>链接WindowManager和DecorView的纽带，更广一点可以说是Window和View之间的纽带。</li>
<li>完成View的绘制过程，包括measure、layout、draw过程。</li>
<li>向DecorView分发收到的用户发起的event事件，如按键，触屏等事件。</li>
</ul>
<p>ViewRootImpl 是View 树的树根，但它不是View，它实现了 View 与 WindowManager 之间的通信协议，<br>参考链接：<a href="http://www.2cto.com/kf/201606/519988.html" target="_blank" rel="external">Android中的ViewRootImpl类源码解析</a></p>
<h5 id="2-2-系统怎么知道你在哪里更新的-UI"><a href="#2-2-系统怎么知道你在哪里更新的-UI" class="headerlink" title="2.2 系统怎么知道你在哪里更新的 UI"></a>2.2 系统怎么知道你在哪里更新的 UI</h5><p>Android 规定开发着不能在非 UI 线程中更新 UI，如果你不遵守这个规定，那么将引发运行时异常<code>CalledFromWrongThreadException</code>，其原因在于 ViewRootImpl 对 UI 操作做了验证， ViewRootImpl 作为视图层次结构的顶部，对 UI 的访问操作大部分都会传递到 ViewRootImpl  中，ViewRootImpl 会在 checkThread 方法中检查访问操作是否在 UI 线程，不是的话就会抛出异常。</p>
<p></p><h5><center>ViewRootImpl # checkThread() </center><p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkThread</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">if</span> (mThread != Thread.currentThread()) &#123;</div><div class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> CalledFromWrongThreadException(</div><div class="line">                 <span class="string">"Only the original thread that created a view hierarchy can touch its views."</span>);</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h5 id="2-3-系统为什么不允许在-UI-线程中访问-UI-呢？"><a href="#2-3-系统为什么不允许在-UI-线程中访问-UI-呢？" class="headerlink" title="2.3 系统为什么不允许在 UI 线程中访问 UI 呢？"></a>2.3 系统为什么不允许在 UI 线程中访问 UI 呢？</h5><blockquote>
<p>这是因为 Android 的 UI 控件不是线程安全的，如果在多线程中并发访问可能会导致 UI 控件处于不可预期的状态，那为什么不对 UI 控件的访问加上锁呢？缺点有两个：首先加上锁机制会让 UI 访问的逻辑变得复杂；其次锁机制会降低 UI 访问的效率，因为锁机制会阻塞某些线程的执行。</p>
</blockquote>
<h4 id="3-ThreadLocal-的工作原理"><a href="#3-ThreadLocal-的工作原理" class="headerlink" title="3 ThreadLocal 的工作原理"></a>3 ThreadLocal 的工作原理</h4><blockquote>
<p><u><b>java.lang.ThreadLocal</b></u></p>
<p>该类提供了线程局部 (thread-local) 变量。这些变量不同于它们的普通对应物，因为访问某个变量（通过其 get 或 set 方法）的每个线程都有自己的局部变量，它独立于变量的初始化副本。ThreadLocal 实例通常是类中的 private static 字段，它们希望将状态与某一个线程（例如，用户 ID 或事务 ID）相关联。 </p>
<p>ThreadLocal 是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，数据存储后，只有在指定线程中可以获取到数据，对于其他线程来说则无法获取到数据。</p>
</blockquote>
<p>举个栗子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    ThreadLocal&lt;Integer&gt; mLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        Main test = <span class="keyword">new</span> Main ();</div><div class="line">		test.mLocal.set(<span class="number">30</span>);</div><div class="line">        test.print(<span class="string">"thread: "</span> + Thread.currentThread().getName() + <span class="string">" "</span> + test.mLocal.get());</div><div class="line">        test.test();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String string)</span> </span>&#123;</div><div class="line">        System.out.println(string);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">new</span> Thread(<span class="string">"Thread#1"</span>) &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mLocal.set(<span class="number">31</span>);</div><div class="line">                print(<span class="string">"thread: "</span> + <span class="keyword">this</span>.getName() + <span class="string">" "</span> + mLocal.get());</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(<span class="string">"Thread#2"</span>) &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mLocal.set(<span class="number">32</span>);</div><div class="line">                print(<span class="string">"thread: "</span> + <span class="keyword">this</span>.getName() + <span class="string">" "</span> + mLocal.get());</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(<span class="string">"Thread#3"</span>) &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                mLocal.set(<span class="number">32</span>);</div><div class="line">                print(<span class="string">"thread: "</span> + <span class="keyword">this</span>.getName() + <span class="string">" "</span> + mLocal.get());</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的例子在执行 test 方法时，启动了三个线程，在这三个线程中分别修改了 mLocal 的值，当各自线程通过调用 ThreadLocal 的 get 方法取值时取到的值是不同的，即各个线程有属于自己的一个值。</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function">F:\<span class="title">javaStuff</span>&gt;<span class="title">javac</span> <span class="title">Main.java</span></span></div><div class="line"><span class="title">F</span>:\<span class="title">javaStuff</span>&gt;<span class="title">java</span> <span class="title">Main</span></div><div class="line"><span class="title">thread</span>: <span class="title">main</span> 30</div><div class="line"><span class="title">thread</span>: <span class="title">Thread</span>#1 31</div><div class="line"><span class="title">thread</span>: <span class="title">Thread</span>#2 32</div><div class="line"><span class="title">thread</span>: <span class="title">Thread</span>#3 32</div></pre></td></tr></table></figure>
<blockquote>
<p>ThreadLocal 之所以有这么奇妙的功能，是因为不同线程访问同一个 ThreadLocal 对象的 get 方法，ThreadLocal 内部会从各自的线程中取出一个数据实体，然后再从数据实体中取得对应的 value 值。</p>
</blockquote>
<p>那这个线程私有的数据实体在哪呢？<br>先看看 ThreadLocal 的 get 方法</p>
<p></p><h5><center>JDK 1.8.0_45  ThreadLocal # get () </center><p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        Thread t = Thread.currentThread();</div><div class="line">        ThreadLocalMap map = getMap(t);</div><div class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</div><div class="line">            ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> (T)e.value;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> setInitialValue();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>可以看到这里使用了 ThreadLocalMap.Entry 来保存数据，在《Android 开发艺术探索》一书中说的是使用 ThreadLocal.Values 来保存数据，这里的不同应该是由于 JDK 版本升级过程导致的。<br>再看看在 Thread 中 对 ThreadLocalMap 的引用：</p>
<p></p><h5><center>Thread # threadLocals </center><p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* ThreadLocal values pertaining to this thread. This map is maintained</span></div><div class="line">     * by the ThreadLocal class. */</div><div class="line">    ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<p>从 ThreadLocal 的 get方法可以知道<code>getMap(t)</code>操作会得到当前线程的 threadLocals 对象，看看 getMap 方法。</p>
<p></p><h5><center>ThreadLocal # getMap(Thread t)</center><p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> t.threadLocals;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>到这里就很清晰了，getMap 方法会返回当前线程的 threadLocals  。</p>
<h5 id="3-1-ThreadLocal-使用场景"><a href="#3-1-ThreadLocal-使用场景" class="headerlink" title="3.1 ThreadLocal 使用场景"></a>3.1 ThreadLocal 使用场景</h5><ul>
<li>当某些数据是以线程作为作用域并且不同线程具有不同的数据副本。</li>
<li>复杂逻辑下的数据传递，比如监听器的传递，有些时候一个线程中的任务过于复杂，这可能表现为函数调用栈比较深以及代码入口的多样性，在这种情况下我们又需要监听器贯穿整个线程的执行过程，这个时候该怎么办？这个时候就可以采用 ThreadLocal ，采用 ThreadLocal 可以让监听器作为线程内的全局对象，在线程内部只需调用 ThreadLocal 的 get 方法就能获得监听器。</li>
</ul>
<h4 id="4-MessageQueue-的工作原理"><a href="#4-MessageQueue-的工作原理" class="headerlink" title="4 MessageQueue 的工作原理"></a>4 MessageQueue 的工作原理</h4><p>一个 Handler 可以正常工作的线程只会有一个 MessageQueue 的实例。<br>MessageQueue 主要包含两个操作：</p>
<ul>
<li>插入：enqueueMessage</li>
<li>删除（读取）：next</li>
</ul>
<h5 id="4-1-enqueueMessage-方法"><a href="#4-1-enqueueMessage-方法" class="headerlink" title="4.1 enqueueMessage 方法"></a>4.1 enqueueMessage 方法</h5><p></p><h5><center>MessageQueue # enqueueMessage(Message msg, long when) </center><p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        ...</div><div class="line">        msg.markInUse();</div><div class="line">        msg.when = when;</div><div class="line">        Message p = mMessages;</div><div class="line">        <span class="keyword">boolean</span> needWake;</div><div class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</div><div class="line">            <span class="comment">// New head, wake up the event queue if blocked.</span></div><div class="line">            msg.next = p;</div><div class="line">            mMessages = msg;</div><div class="line">            needWake = mBlocked;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ...</div><div class="line">            Message prev;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                prev = p;</div><div class="line">                p = p.next;</div><div class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">                    needWake = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            msg.next = p; <span class="comment">// invariant: p == prev.next</span></div><div class="line">            prev.next = msg;</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>if (p == null || when == 0 || when &lt; p.when) {..</code>： 其中 p 为下一个待处理的消息，如果 p 为 null，或插入消息的执行时间为“立刻”(when  == 0)，或插入消息执行时间比下一个待处理消息早，那么插入消息就做为新的消息队列头，将其插入对头（<code>msg.next = p; mMessages = msg;</code>）。<br>若该判断不满足，即当前消息队列不为空，插入消息的执行时间不是“立刻”，则将其插入队列（按执行时间排序）。</p>
<h5 id="4-1-next-方法"><a href="#4-1-next-方法" class="headerlink" title="4.1 next 方法"></a>4.1 next 方法</h5><p></p><h5><center>MessageQueue # next() </center><p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        ...</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</div><div class="line">                Binder.flushPendingCommands();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            nativePollOnce(ptr, nextPollTimeoutMillis);</div><div class="line"></div><div class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">                <span class="comment">// Try to retrieve the next message.  Return if found.</span></div><div class="line">                <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</div><div class="line">                Message prevMsg = <span class="keyword">null</span>;</div><div class="line">                Message msg = mMessages;</div><div class="line">                <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></div><div class="line">                    <span class="keyword">do</span> &#123;</div><div class="line">                        prevMsg = msg;</div><div class="line">                        msg = msg.next;</div><div class="line">                    &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (now &lt; msg.when) &#123;</div><div class="line">                        <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></div><div class="line">                        nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">// Got a message.</span></div><div class="line">                        mBlocked = <span class="keyword">false</span>;</div><div class="line">                        <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</div><div class="line">                            prevMsg.next = msg.next;</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            mMessages = msg.next;</div><div class="line">                        &#125;</div><div class="line">                        msg.next = <span class="keyword">null</span>;</div><div class="line">                        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Returning message: "</span> + msg);</div><div class="line">                        msg.markInUse();</div><div class="line">                        <span class="keyword">return</span> msg;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// No more messages.</span></div><div class="line">                    nextPollTimeoutMillis = -<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">                ...</div><div class="line">            &#125;</div><div class="line">		...</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>可以发现 next 方法是一个无限循环方法，如果消息队列中没有消息，那么 next 方法会一直阻塞。当有新的消息到来时，next 方法会返回这条消息并将其从单链表中移除。</p>
</blockquote>
<p>MessageQueue 的 next 方法会被 Looper 的 loop 方法调用，从而使 loop 方法也成为阻塞方法。</p>
<h4 id="4-Looper-的工作原理"><a href="#4-Looper-的工作原理" class="headerlink" title="4 Looper 的工作原理"></a>4 Looper 的工作原理</h4><p>一个 Handler 可以正常工作的线程只会有一个 Looper 的实例。</p>
<blockquote>
<p>Looper 在 Android 的消息机制中扮演者消息循环的角色，具体来说就是它会不断的从 MessageQueue 中查看是否有新消息，如果有新消息就立刻处理，否则就一直阻塞在那里。</p>
</blockquote>
<p>先看看 Looper 的构造方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">       mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</div><div class="line">       mThread = Thread.currentThread();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>可以看到 Looper 的构造方法是私有的，即外界无法通过 new 关键字创建其实例。<br>构造方法会实例化 MessageQueue 的实例 <code>mQueue</code>。</p>
<h5 id="4-1-在非-UI-线程使用-Handler"><a href="#4-1-在非-UI-线程使用-Handler" class="headerlink" title="4.1 在非 UI 线程使用 Handler"></a>4.1 在非 UI 线程使用 Handler</h5><ul>
<li><p>如果想在一个子线程（非 UI 线程）中正常的使用 Handler ，就必须让当前线程拥有一个 Looper（Looper.prepare()），并且执行其 loop （Looper.loop()）方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Handler mHandler;</div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">new</span> Thread() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">               mHandler = <span class="keyword">new</span> Handler();</div><div class="line">               Looper.prepare();</div><div class="line">               Looper.loop();</div><div class="line">           &#125;</div><div class="line">       &#125;.start();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>看看 Looper.prepare() 方法<br></p><h5><center>Looper # prepare() </center><p></p>
</h5></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</div><div class="line">       prepare(<span class="keyword">true</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">      &#125;</div><div class="line">      sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><code>sThreadLocal.get()</code> 返回结果不为空表示当前线程的 Looper.prepare() 方法已经被调用过，即当前线程已存在 Looper 实例。这就可以保证一个线程只有一个Looper，同时也保证了一个线程只有一个 MessageQueue （参照 Looper 构造方法可知）。<br>这里有个关键的变量 <code>sThreadLocal</code>，看看它的声明：</p>
<p></p><h5><center>Looper # sThreadLocal  </center><p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sThreadLocal.get() will return null unless you've called prepare().</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</div></pre></td></tr></table></figure>
<p>参照上面对 ThreadLocal 的说明就可以知道 <code>sThreadLocal.get()</code>返回的是当前线程对应的那个 Looper 对象。 </p>
<ul>
<li>Looper.loop() 方法</li>
</ul>
<blockquote>
<p>Looper 最重要的一个方法是 loop 方法，只有调用了 loop 后，消息循环系统才会正真的起作用。</p>
</blockquote>
<p> </p><h5><center>Looper # loop() </center><p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">       <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line"></div><div class="line">       <span class="comment">// Make sure the identity of this thread is that of the local process,</span></div><div class="line">       <span class="comment">// and keep track of what that identity token actually is.</span></div><div class="line">       Binder.clearCallingIdentity();</div><div class="line">       <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line"></div><div class="line">       <span class="keyword">for</span> (;;) &#123;</div><div class="line">           Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">           <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="comment">// No message indicates that the message queue is quitting.</span></div><div class="line">               <span class="keyword">return</span>;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></div><div class="line">           <span class="keyword">final</span> Printer logging = me.mLogging;</div><div class="line">           <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">               logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</div><div class="line">                       msg.callback + <span class="string">": "</span> + msg.what);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="keyword">final</span> <span class="keyword">long</span> traceTag = me.mTraceTag;</div><div class="line">           <span class="keyword">if</span> (traceTag != <span class="number">0</span> &amp;&amp; Trace.isTagEnabled(traceTag)) &#123;</div><div class="line">               Trace.traceBegin(traceTag, msg.target.getTraceName(msg));</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               msg.target.dispatchMessage(msg);</div><div class="line">           &#125; <span class="keyword">finally</span> &#123;</div><div class="line">               <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</div><div class="line">                   Trace.traceEnd(traceTag);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">               logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="comment">// Make sure that during the course of dispatching the</span></div><div class="line">           <span class="comment">// identity of the thread wasn't corrupted.</span></div><div class="line">           <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</div><div class="line">           <span class="keyword">if</span> (ident != newIdent) &#123;</div><div class="line">               Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></div><div class="line">                       + Long.toHexString(ident) + <span class="string">" to 0x"</span></div><div class="line">                       + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></div><div class="line">                       + msg.target.getClass().getName() + <span class="string">" "</span></div><div class="line">                       + msg.callback + <span class="string">" what="</span> + msg.what);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           msg.recycleUnchecked();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>myLooper()</code>：方法可以获得当前线程的 Looper，该方法是 public 的，在类外也可以调用。</li>
<li><code>Message msg = queue.next(); // might block</code>：next 方法在上面分析<em>MessageQueue 的工作原理</em>时已经分析过了，会next 方法是一个无限循环方法，如果消息队列中没有消息，那么 next 方法会一直阻塞。当有新的消息到来时，next 方法会返回这条消息并将其从单链表中移除。如果 next 方法返回 null，那么 loop 循环就会结束，</li>
<li><code>msg.target.dispatchMessage(msg);</code>：当 next 有消息返回时，Looper 就会处理这条消息，这里的 msg.target 时发送这条消息的 Handler 对象，这样 Handler 发送的消息最终又交给它的 dispatchMessage 方法来处理了。这里要注意的是，dispatchMessage 方法会是在创建 Handler 的线程中执行的，这样就成功的将代码逻辑切换到指定的线程中去执行。（dispatchMessage  方法将在 <u>Handler 的工作原理</u> 中分析）</li>
</ul>
<h5 id="4-2-主线程（ActivityThread-）的消息循环"><a href="#4-2-主线程（ActivityThread-）的消息循环" class="headerlink" title="4.2 主线程（ActivityThread ）的消息循环"></a>4.2 主线程（ActivityThread ）的消息循环</h5><p>Android 的主线程由 ActivityThread 类表示。</p>
<blockquote>
<p>Looper 除了 prepare 方法外，还提供了 prepareMainLooper 方法，这个方法主要是给主线程也就是 ActivityThread 创建 Looper 使用的，其本质也是通过 prepare 方法来实现的。</p>
<p>Java 程序少不了会有一个执行入口 main 方法，那 Android 程序的 main方法在哪呢？<br>其实 Android 的 main 方法被包装在 ActivityThread 类中。所有的 Android 程序都有且仅有一个ActivityThread 类的实例，ActivityThread 所在的线程即为主线程（UI 线程）。</p>
</blockquote>
<p>Android 程序 从ActivityThread 的 main 方法开始执行，调用 prepareMain 方法为主线程创建一个 Looper 和 一个 MessageQueue，然后创建一个 ActivityThread 对象，在 ActivityThread 的初始化代码中会创建一个 Handler 对象。接着 main 方法会调用 Looper.loop() 方法进入消息循环，不断地从消息队列中读取并处理消息。</p>
<p>参考链接：<br><a href="http://blog.csdn.net/lfdfhl/article/details/51279160" target="_blank" rel="external"> Android中线程那些事</a><br><a href="http://www.jianshu.com/p/0efc71f349c8" target="_blank" rel="external">ActivityThread的main方法究竟做了什么？</a></p>
<p></p><h5><center>ActivityThread  # main(String[] args)</center><p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">     ...</div><div class="line">     Looper.prepareMainLooper();</div><div class="line"></div><div class="line">     ActivityThread thread = <span class="keyword">new</span> ActivityThread();</div><div class="line">     thread.attach(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">     <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</div><div class="line">         sMainThreadHandler = thread.getHandler();</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">         Looper.myLooper().setMessageLogging(<span class="keyword">new</span></div><div class="line">                 LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="comment">// End of event ActivityThreadMain.</span></div><div class="line">     Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">     Looper.loop();</div><div class="line"></div><div class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>这里就产生了一个挺有趣的问题：<u><b>ActivityThread 的 main 方法会在 loop 方法处不断循环，没有要处理的消息就会<strong>阻塞</strong>，那为什么这里的阻塞不会引发 ANR（Application Not Responding） 呢？</b></u></p>
<p>想象这样一种情况，如果不执行 loop 方法，那么 Android 程序的主线程一运行完程序就会退出！即用户才打开 APP ，APP 就自己关了，这显然是不可以的。<br>那 Android 是怎么实现阻塞而不引发 ANR 呢？</p>
<p>这里需要先了解 ANR 的产生原因：</p>
<ul>
<li>当前的事件没有机会得到处理（即主线程正在处理前一个事件，前一个事件没有及时的完成或者 looper 被某种原因阻塞住了）</li>
<li>当前的事件正在处理，但没能在规定时间内完成（广播事件处理的 10s 限定，输入事件分发 5s ，前台服务 20s 等）</li>
</ul>
<p>由 ANR 产生的原因可以知道一个关键的因素是 —— <strong>没有及时完成</strong>，即在规定时间内没有完成，而主线程 loop 循环这个操作系统并没有对其有时间限定，而 loop 循环内部在处理消息时，对某个具体消息的执行有时是有时间限定的，超过了这个时间就会引发 ANR。</p>
<h5 id="4-3-Looper-的退出方式"><a href="#4-3-Looper-的退出方式" class="headerlink" title="4.3 Looper 的退出方式"></a>4.3 Looper 的退出方式</h5><blockquote>
<p>Looper 也是可以退出的，Looper 提供了 quit 和 quitSafely 来退出一个 Looper</p>
</blockquote>
<ul>
<li>quit 和 quitSafely 方法<br>这两个方法的区别在于： quit 方法会直接退出 Looper，而 quitSafely 只是设定一个退出标记，然后把消息队列中的已有消息处理完成后才安全退出。<br><h5><center>Looper # quit() &amp; quitSafely()</center></h5></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;</div><div class="line">        mQueue.quit(<span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quitSafely</span><span class="params">()</span> </span>&#123;</div><div class="line">        mQueue.quit(<span class="keyword">true</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>可以看到都调用了 MessageQueue 的 quit 方法。看看 MessageQueue 的 quit 方法</p>
<p></p><h5><center>MessageQueue # quit(boolean safe)</center><p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quit</span><span class="params">(<span class="keyword">boolean</span> safe)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (!mQuitAllowed) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Main thread not allowed to quit."</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">           <span class="keyword">if</span> (mQuitting) &#123;</div><div class="line">               <span class="keyword">return</span>;</div><div class="line">           &#125;</div><div class="line">           mQuitting = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (safe) &#123;</div><div class="line">               removeAllFutureMessagesLocked();</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               removeAllMessagesLocked();</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="comment">// We can assume mPtr != 0 because mQuitting was previously false.</span></div><div class="line">           nativeWake(mPtr);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>若当前的 MessageQueue 实例属于主线程，那么调用主线程 Looper 的 quit（或 quitSafely）都会抛出这个异常，<code>mQuitAllowed</code>变量在 Looper 的 prepareMainLooper 方法中会被赋值为 false（具体在<code>private static void prepare(boolean quitAllowed)</code>方法中赋值）。</p>
<p>参照 loop 方法可知当 MessageQueue 的 next 方法返回为 null 时，loop 循环就会退出，由此可知，<code>removeAllMessagesLocked</code>方法会直接将下一个待处理消息置为 null，这样 next 方法调用时就会返回 null；<code>removeAllFutureMessagesLocked</code>方法则会在当前消息队列的队尾添加一个 null 消息，并拒绝再接收消息，那么当当前已有的消息处理完就会返回给 next 方法 null，loop 循环就会结束。</p>
<h4 id="5-Handler-的工作原理"><a href="#5-Handler-的工作原理" class="headerlink" title="5 Handler 的工作原理"></a>5 Handler 的工作原理</h4><blockquote>
<p>Handler 的工作主要包括消息的发送和接收。消息的发送可以通过 post 的一系列方法以及 send 的一系列方法来实现，post 的一系列方法最终是通过 send 的一系列方法来实现的。</p>
</blockquote>
<p>send 一系列方法：</p>
<ul>
<li>立即发送消息一条消息：sendMessage</li>
<li>发送空的延迟消息：sendEmptyMessageDelayed</li>
<li>立即发送一条空消息：sendEmptyMessage         </li>
<li>发送一条消息到队列头：sendMessageAtFrontOfQueue </li>
<li>在指定时间发送消息：sendMessageAtTime         </li>
<li>发送延迟消息：sendMessageDelayed        </li>
<li>在指定时间发送空消息：sendEmptyMessageAtTime   </li>
</ul>
<p>post 一系列方法：发送 Runnable 对象，内部调用的是 send 的一系列方法</p>
<ul>
<li>post </li>
<li>postDelayed  </li>
<li>postAtFrontOfQueue   </li>
<li>postAtTime</li>
<li>sendMessageAtTime </li>
</ul>
<p>send 和 post 的一系列方法最终的函数调用（真正进行消息发送操作）为 <code>sendMessageAtTime</code>，或是<code>sendMessageAtFrontOfQueue</code>方法，其他的 sendXXX 和 postXXX 方法最后都会转到这两个方法，对这两个方法进行分析如下</p>
<h5 id="5-1-sendMessageAtTime-方法"><a href="#5-1-sendMessageAtTime-方法" class="headerlink" title="5.1 sendMessageAtTime 方法"></a>5.1 sendMessageAtTime 方法</h5><p>send 的一系列方法中 sendMessage、sendEmptyMessageDelayed、sendEmptyMessage、sendMessageDelayed、sendEmptyMessageAtTime 方法；post 的一系列方法 post、postDelayed、postAtTime 方法的最终调用都为 sendMessageAtTime 方法。</p>
<p></p><h5><center>Handler # sendMessageAtTime(Message msg, long uptimeMillis) </center><p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">        MessageQueue queue = mQueue;</div><div class="line">        <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</div><div class="line">            RuntimeException e = <span class="keyword">new</span> RuntimeException(</div><div class="line">                    <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</div><div class="line">            Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>方法的第二个参数<code>uptimeMillis</code>文档中解释为：传递该消息的绝对时间，该时间将以 SystemClock.uptimeMillis（开机的到现在的毫秒数，不包括系统睡眠时间）的值作为基数。</p>
<p><code>sendMessageDelayed</code>或<code>sendMessageDelayed</code>方法内部会调用<code>sendMessageAtTime</code>方法，调用形式大都是这样的：<code>sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis)</code>,延迟时间（delayMillis）加上开机到现在的毫秒数即为发送该条消息的绝对时间，<code>sendMessage</code>方法中会调用<code>sendMessageDelayed</code>方法，此时传入的<code>delayMillis</code>就为 0 。</p>
<p>可以看到该方法内部首先会检查 mQueue 是否为 null，为 null 就表示当前线程没有 MessageQueue 对象，为什么没有 MessageQueue 对象，问问自己，MessageQueue 的实例应该在哪里实例化? 在Looper 的构造函数里，那 Looper 的构造函数又在哪里调用呢？ 在 Looper.prepare() …….，对了，很多时候程序抛出该异常就是因为你忘了调用 Looper.prepare() 方法。 </p>
<p>接下来调用 enqueueMessage 方法，看名字就可以猜出来其内部肯定会调用 MessageQueue 的 enqueueMessage 方法将消息插入到消息队列中。</p>
<p></p><h5><center>Handler # enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) </center><p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">        msg.target = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">if</span> (mAsynchronous) &#123;</div><div class="line">            msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="5-2-sendMessageAtFrontOfQueue-方法"><a href="#5-2-sendMessageAtFrontOfQueue-方法" class="headerlink" title="5.2 sendMessageAtFrontOfQueue 方法"></a>5.2 sendMessageAtFrontOfQueue 方法</h5><p>send 一系列方法的 sendMessageAtFrontOfQueue；post 一系列方法的 postAtFrontOfQueue 方法的最终调用为  sendMessageAtFrontOfQueue 方法。</p>
<p></p><h5><center>Handler # sendMessageAtFrontOfQueue(Message msg) </center><p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtFrontOfQueue</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    MessageQueue queue = mQueue;</div><div class="line">    <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</div><div class="line">        RuntimeException e = <span class="keyword">new</span> RuntimeException(</div><div class="line">            <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</div><div class="line">        Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> enqueueMessage(queue, msg, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法同样会检查 mQueue 是否为 null。<br>注意这里调用<code>enqueueMessage</code>方法时传入的 <code>uptimeMillis</code> 的值为 0 ，你可以往上翻翻，找到 MessageQueue 的 <code>enqueueMessage(Message msg, long when)</code>方法的分析，此时传到 MessageQueue 的 enqueueMessage 方法里的     <code>when</code>的值就为 0 ，通过<code>MessageQueue#enqueueMessage</code>方法就可以知道，当 <code>when == 0</code>，该条消息将被插入消息队列的队头位置。</p>
<h5 id="5-3-总结"><a href="#5-3-总结" class="headerlink" title="5.3 总结"></a>5.3 总结</h5><blockquote>
<p>可以发现 Handler 发送消息的过程仅仅是向消息队列中插入一条消息，MessageQueue 的 next 方法就会返回 这条消息给 Looper，Looper 收到消息后开始处理，最终消息由 Handler 处理，即 Handler 的 dispatchMessage 方法会被调用，这时 Handler 就进入处理消息的阶段。 </p>
</blockquote>
<h5 id="5-4-Handler-的-dispatchMessage-方法"><a href="#5-4-Handler-的-dispatchMessage-方法" class="headerlink" title="5.4 Handler 的 dispatchMessage 方法"></a>5.4 Handler 的 dispatchMessage 方法</h5><blockquote>
<p>dispatchMessage 方法会检查消息（Message）的 callback 是否为 null，不为 null 就 通过 handleCallback 来处理消息，实际上就是 Handler 的一系列 post 方法传过来的 Runable 参数。</p>
</blockquote>
<p> </p><h5><center>Handler # dispatchMessage(Message msg) </center><p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</div><div class="line">        handleCallback(msg);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        handleMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>dispatchMessage 方法先会检查消息的 callback 是否为 null，其次检查 Handler 的 mCallback 是否为 null，不为 null 则调用其 handleMessage 方法，若该方法返回 true 则消息处理完成，否则（最后）调用 Handler 对象的 handleMessage 方法处理消息。</p>
<p>这里有个小技巧，Handler 的 mCallback 域，通常我们使用 Handler 的方法是使用其导出来（子类），或者是匿名内部类（实质也是子类），这是我们就需要覆写 Handler 的 handleMessage 方法。那如果不想通过继承的方式使用 Handler 呢，mCallback 就是一种途径：<br>Handler 提供了一个构造函数<code>public Handler(Callback callback)</code>，这就允许我们通过传参的方式使用 Handler。</p>
<p>上面提到的几个变量，Message 的 callback，Handler 的 mCallback，callback 是 Runnable 对象，mCallback 为 Handler 的内部类。</p>
<p> </p><h5><center>Handler # Callback  </center><p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<hr>
<p>文章部分内容摘抄自《Android 开发艺术探索》第 10 章 —— Android 的消息机制，加上大部分自己的理解和总结，可能有错误，欢迎指正。</p>
<center><b><u><em>END</em></u><ub></ub></b></center></h5></h5></h5></h5></h5></h5></h5></h5></h5></h5></h5></h5></h5></h5></h5>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Handler </tag>
            
            <tag> MessageQueue </tag>
            
            <tag> Looper </tag>
            
            <tag> ThreadLocal </tag>
            
            <tag> 消息机制 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android：View 的工作原理]]></title>
      <url>/2017/05/13/Android-View-%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="Android-View-的工作原理"><a href="#Android-View-的工作原理" class="headerlink" title="Android-View 的工作原理"></a>Android-View 的工作原理</h3><blockquote>
<p>View 的工作流程主要指的是 measure、layout、draw 这三大流程，即测量、布局和绘制，其中 measure 确定 View 的测量宽/ 高，layout 确定 View 的最终宽/高和四个顶点的位置，而 draw 则将 View 绘制到屏幕。</p>
</blockquote>
<p>在介绍 View 的三大流程之前，需要先了解 ViewRoot、DecorView 和 MeasureSpec 的基本概念，才能更好的理解 View 的 measure、layout、draw过程。<br><br></p>
<h4 id="1-ViewRoot-和-DecorView"><a href="#1-ViewRoot-和-DecorView" class="headerlink" title="1 ViewRoot 和 DecorView"></a>1 ViewRoot 和 DecorView</h4><blockquote>
<ul>
<li>ViewRoot 对应于 ViewRootImpl 类，它是连接 WindowManager 和 DecorView 的纽带，View 的三大流程均是通过 ViewRoot 来完成的。<br><br></li>
<li>View 的绘制流程是从 ViewRoot 的 performTraversals 方法开始的，它经过 measure、layout 和 draw 三个过程才能最终将一个 View 绘制出来，<br><br></li>
<li>measure 决定了 View 的宽和高，measure 完成之后，可以通过 getMeasureHeight/Width 来获得 View 的测量宽和高，在几乎所有情况下它都是与 View 的最终宽高相等的（getHeight/Width）。 layout 过程决定了 View 的四个顶点和最终宽高，完成以后就可以通过 getTop/Left/Bottom/Right 来获得其四个顶点相对父容器的坐标。只有 draw 完成以后 View 的内容才会呈现到屏幕上。<br><br></li>
<li>DecorView 做为顶级 View ，一般情况其内部会包含一个竖直方向的 LinearLayout，该 LinearLayout 分为两部分，上面部分为 标题栏，下面为内容栏。内容栏为一个 id 为 android.R.id.content 的 FrameLayout，而平时开发使用 setContentView 时就是将 View 添加到这个 FrameLayout 中。<br>因此要在 Activity 中获得我们设置的 View，可通过如下方式获得：<br><code>View contentView = 
((ViewGroup)getWindow().getDecorView().findViewbyId(android.R.Id.content)).getChildAt(0);</code></li>
</ul>
</blockquote>
<h4 id="2-MeasureSpec"><a href="#2-MeasureSpec" class="headerlink" title="2 MeasureSpec"></a>2 MeasureSpec</h4><blockquote>
<p>MeasureSpec 代表一个 32 为的 int 值，高 2 位代表 SpecMode，低 30 位表示 SpecSize，SpecMode 指测量模式，SpecSize 指某种测量模式下的规格大小。</p>
</blockquote>
<h5 id="2-1-SpecMode-有三种"><a href="#2-1-SpecMode-有三种" class="headerlink" title="2.1 SpecMode 有三种"></a>2.1 SpecMode 有三种</h5><ul>
<li>UNSPECIFIED 父容器不对 View 有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量的状态。<br><br></li>
<li>EXACTLY 父容器已经测出 View 所需的精确大小，这个时候 View 的最终大小就是 SpecSize 的值。<strong>它对应于 LayoutParams 中的 match_parent 和具体的数值这两种模式</strong>。<br><br></li>
<li>AT_MOST 父容器指定一个可用的最大大小即 SpecSize，View 的大小不能大于这个值，具体是什么要看不同 VIew 的具体实现。<strong>它对应于 LayoutParams 中的 warp_content</strong>。</li>
</ul>
<h5 id="2-2-MeasureSpec-和-LayoutParams-的对应关系"><a href="#2-2-MeasureSpec-和-LayoutParams-的对应关系" class="headerlink" title="2.2 MeasureSpec 和 LayoutParams 的对应关系"></a>2.2 MeasureSpec 和 LayoutParams 的对应关系</h5><p>MeasureSpec 的值是我们无法直接控制的，但我们可以通过给 View 设置 LayoutParams 来间接修改 MeasureSpec 的值。</p>
<blockquote>
<p>在 View 测量的时候，系统会将 LayoutParams 在父容器的约束下转换为对应的 MeasureSpec，然后根据这个 MeasureSpec 测量出 View 的宽高。需要注意的是父容器传给待测 View（子 View）的 MeasureSpec 的值由 子 View 的 LayoutParams 和父容器（父容器的 MeasureSpec）共同决定。</p>
</blockquote>
<p>子 View 的 MeasureSpec 赋值规则在<strong><code>ViewGroup#getChildMeasureSpec(int spec, int padding, int childDimension)</code></strong>方法中定义：<br>该方法的调用可在 ViewGroup 的 <code>measureChild</code>和<code>measureChildWithMargins</code>方法中找到。</p>
<p>赋值规则可总结为如下表格：<br><img src="http://img.blog.csdn.net/20170513185032164?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><br>由上表可以清晰的看出子 View 的 MeasureSpec 的确定规则，比如当父容器的 MeasureSpec 的 SpecMode 为 EXACTLY： </p>
<ul>
<li>子 View 的 LayoutParams (android:width/height)为具体数值（如20dp）时，子 View 的<code>onMeasure(int widthMeasureSpec, int heightMeasureSpec)</code>方法中得到的 MeasureSpec（widthMeasureSpec 或 heightMeasureSpec）的 SpecMode 将为 EXACTLY，SpecSize 为 20dp；<br><br></li>
<li>子 View 的 LayoutParams (android:width/height)为 match_parent 时，子 View 的 MeasureSpec 的 SpecMode 将为 EXACTLY，SpecSize 为父容器的大小；<br><br></li>
<li>子 View 的 LayoutParams (android:width/height)为 warp_content 时，子 View 的 MeasureSpec 的 SpecMode 将为 AT_MOST，SpecSiz 为父容器的大小。<br><br></li>
<li>UNSPECIFIED 主要用于系统内部多次 Measure 的情形，一般来说，不需要关注。</li>
</ul>
<h5 id="2-3-MeasureSpec-的传递"><a href="#2-3-MeasureSpec-的传递" class="headerlink" title="2.3 MeasureSpec 的传递"></a>2.3 MeasureSpec 的传递</h5><p>父容器（ViewGroup）传递给子 View 的 MeasureSpec 的值通过<strong><code>getChildMeasureSpec</code></strong>方法确定，父容器将多次调用该方法以分别求得子 View 的<code>widthMeasureSpec</code>和<code>widthMeasureSpec</code>，然后调用子 View 的<code>measure</code>方法，最终将子 View 的 MeasureSpec 传递到<code>onMeasure</code>方法中完成子 View 的测量。</p>
<h4 id="3-measure-过程"><a href="#3-measure-过程" class="headerlink" title="3 measure 过程"></a>3 measure 过程</h4><blockquote>
<p>measure 过程分情况来看，如果只是一个原始的 View（继承体系中没有 ViewGroup），那么通过 measure 方法就完成其测量过程，如果是 ViewGroup ，除了完成自己的测量过程外，还要遍历去调用子元素的 measure 方法，各个子元素再递归去执行这个流程，完成测量。</p>
</blockquote>
<h5 id="3-1-View-的-measure-过程"><a href="#3-1-View-的-measure-过程" class="headerlink" title="3.1 View 的 measure 过程"></a>3.1 View 的 measure 过程</h5><p>View 的 measure 过程由其 measure 方法控制，measure 方法内部会调用 onMeasure 方法完成具体的测量。</p>
<center><strong>View # onMeasure(int widthMeasureSpec, int heightMeasureSpec)</strong></center><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class="line">            getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br><center><strong>View # getDefaultSize(int size, int measureSpec)</strong></center>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDefaultSize</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> result = size;</div><div class="line">       <span class="keyword">int</span> specMode = MeasureSpec.getMode(measureSpec);</div><div class="line">       <span class="keyword">int</span> specSize = MeasureSpec.getSize(measureSpec);</div><div class="line"></div><div class="line">       <span class="keyword">switch</span> (specMode) &#123;</div><div class="line">       <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:</div><div class="line">           result = size;</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">       <span class="keyword">case</span> MeasureSpec.AT_MOST:</div><div class="line">       <span class="keyword">case</span> MeasureSpec.EXACTLY:</div><div class="line">           result = specSize;</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> result;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>对 onMeasure 方法内调用的方法进行解释：</p>
<ul>
<li>getSuggestedMinimumWidth / Height()：返回视图应使用的建议最小宽度/高度<br>内部逻辑：如果 View 没有设置背景，那么返回 android:minWidth / minHeight 属性指定的值，这个值可以为 0 ；如果设置了背景，则返回 android:minWidth / minHeight 和背景的最小宽度/高度这两者中的最大值。<br><br></li>
<li>getDefaultSize(int size, int measureSpec)：该方法内部逻辑也比较简单，UNSPECIFIED 的情况我们不需要关注，在 AT_MOST 或 EXACTLY 模式下返回值 即为 width / heightMeasureSpec 的 SpecSize。<br><br></li>
<li>setMeasuredDimension(int measuredWidth, int measuredHeight)：该方法返回时我们就可以在 onLayout 中通过 getMeasureWidth 方法获得测量宽高了。</li>
</ul>
<h5 id="3-2-ViewGroup-的-measure-过程"><a href="#3-2-ViewGroup-的-measure-过程" class="headerlink" title="3.2 ViewGroup 的 measure 过程"></a>3.2 ViewGroup 的 measure 过程</h5><p> ViewGroup 除了完成自己的测量过程外，还要遍历去调用子元素的 measure 方法，各个子元素再递归去执行这个流程。</p>
<blockquote>
<p>和 View 不同的是，ViewGroup 是一个抽象类，因此它没有重写 View 的 onMeasure 方法，但它提供了一个叫 measureChildren 的方法。</p>
</blockquote>
 <center><strong>ViewGroup # measureChildren(int widthMeasureSpec, int heightMeasureSpec)</strong></center>

<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChildren</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">      <span class="keyword">final</span> <span class="keyword">int</span> size = mChildrenCount;</div><div class="line">      <span class="keyword">final</span> View[] children = mChildren;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</div><div class="line">          <span class="keyword">final</span> View child = children[i];</div><div class="line">          <span class="keyword">if</span> ((child.mViewFlags &amp; VISIBILITY_MASK) != GONE) &#123;</div><div class="line">              measureChild(child, widthMeasureSpec, heightMeasureSpec);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
 <center><strong>ViewGroup # measureChild(View child, int parentWidthMeasureSpec,</strong><br>            <strong>int parentHeightMeasureSpec)</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">measureChild</span><span class="params">(View child, <span class="keyword">int</span> parentWidthMeasureSpec,</span></span></div><div class="line">        <span class="keyword">int</span> parentHeightMeasureSpec) &#123;</div><div class="line">    <span class="keyword">final</span> LayoutParams lp = child.getLayoutParams();</div><div class="line"></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</div><div class="line">            mPaddingLeft + mPaddingRight, lp.width);</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</div><div class="line">            mPaddingTop + mPaddingBottom, lp.height);</div><div class="line"></div><div class="line">    child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br>measureChildren 方法会遍历子 View，并对子 View 执行测量流程，子 View 的测量流程调用在 measureChild 方法中开启， measureChild 方法内部会调用 getChildMeasureSpec 方法获得子 View 的 MeasureSpec ，<strong>然后调用子 View 的 measure 方法</strong>(如果子 View 为 ViewGroup 则递归回到 ViewGroup 的 measure 过程，如果子 View 为原始的 View，则到了 View 的 measure 过程，这一次递归即将结束)。<br><br>ViewGroup 作为抽象类并没有定义其测量的具体过程（抽象类只能实例化其子类，子类必须重写从 View 中继承来的 onMeasure 方法），比如 Linearlayout、RelativeLayout、FrameLayout等。<br><br>#### 4 layout 过程<br><br>&gt;Layout 的 作用是 ViewGroup 用来确定子元素的位置，当 ViewGroup 的位置确定后，它在 onLayout 中会遍历所有子元素并调用其 layout 方法，在 layout 方法中 onLayout 方法又会被调用。<br><br>##### 4.1 View 的 layout 过程<br><br>View 的 layout 方法定义如下：<br><code>public void layout(int l, int t, int r, int b)</code><br>&gt;layout 方法中会通过 setFrame 方法来设定 View 的四个顶点的位置，即初始化 mLeft，mRight，mTop 和 mBottom，View 的四个顶点一旦确定，那么 View 在父容器中的位置也就确定了。<br><br>在 layout 方法中会调用 onLayout 方法，但 View 基类并没有对 onLayout 方法定义具体的实现，onLayout 方法在 View 中的定义如下：<br> <center><strong>View # onLayout(boolean changed, int left, int top, int right, int bottom)</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">   &#125;</div></pre></td></tr></table></figure><br><br>##### 4.2 ViewGroup 的 layout 过程<br><br> <center><strong>ViewGroup # layout(int l, int t, int r, int b)</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!mSuppressLayout &amp;&amp; (mTransition == <span class="keyword">null</span> || !mTransition.isChangingLayout())) &#123;</div><div class="line">        <span class="keyword">if</span> (mTransition != <span class="keyword">null</span>) &#123;</div><div class="line">            mTransition.layoutChange(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">super</span>.layout(l, t, r, b);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// record the fact that we noop'd it; request layout when transition finishes</span></div><div class="line">        mLayoutCalledWhileSuppressed = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br>ViewGroup 的 layout 方法 调用了 View 的 layout 方法（<code>super.layout(l, t, r, b)</code>），而 View 的 layout 方法内部会调用 onLayout 方法，ViewGroup 覆写了 View 的 onLayout 方法，使 onLayout 方法成为抽象方法，那么 ViewGroup 的子类就必须提供 onLayout 的具体实现。即 ViewGroup 的 layout 依赖于抽象方法 onLayout（细节依赖抽象——依赖倒置原则）。<br><br>ViewGroup 和 View 对 onLayout 方法的声明如下：<br> <center><strong>ViewGroup # onLayout(boolean changed, int left, int top, int right, int bottom)</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed,</span></span></div><div class="line">           <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b);</div></pre></td></tr></table></figure><br><br>ViewGroup 完成自己的 layout 的同时需要遍历所有子元素开启子元素的 layout 过程，但开启子元素的 layout 过程这一点在 ViewGroup 基类中并没有体现，像 ViewGroup 的开启子元素的 measure 过程体现在 ViewGroup 的 measureChild 方法中，在 measureChild 方法中会调用子元素的 measure 方法。这是怎么回事呢？<br>这就又回到 ViewGroup 的 onLayout 方法上了，既然 ViewGroup 的 onLayout 方法是抽象的，那么开启子元素的 layout 过程就应该在 ViewGroup 的子类的 onLayout 方法中。举个栗子，FrameLayout 的 onLayout 方法：<br><br> <center><strong>FrameLayout# onLayout(boolean changed, int left, int top, int right, int bottom)</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">    layoutChildren(left, top, right, bottom, <span class="keyword">false</span> <span class="comment">/* no force left gravity */</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br>看看 layoutChildren 方法。<br> <center><strong>FrameLayout# layoutChildren(int left, int top, int right, int bottom, boolean forceLeftGravity)</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">layoutChildren</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom, <span class="keyword">boolean</span> forceLeftGravity)</span> </span>&#123;</div><div class="line">...</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">          <span class="keyword">final</span> View child = getChildAt(i);</div><div class="line">          <span class="keyword">if</span> (child.getVisibility() != GONE) &#123;</div><div class="line">              ...</div><div class="line">              <span class="keyword">switch</span> (verticalGravity) &#123;</div><div class="line">                  <span class="keyword">case</span> Gravity.TOP:</div><div class="line">                      childTop = parentTop + lp.topMargin;</div><div class="line">                      <span class="keyword">break</span>;</div><div class="line">                  <span class="keyword">case</span> Gravity.CENTER_VERTICAL:</div><div class="line">                      childTop = parentTop + (parentBottom - parentTop - height) / <span class="number">2</span> +</div><div class="line">                      lp.topMargin - lp.bottomMargin;</div><div class="line">                      <span class="keyword">break</span>;</div><div class="line">                  <span class="keyword">case</span> Gravity.BOTTOM:</div><div class="line">                      childTop = parentBottom - height - lp.bottomMargin;</div><div class="line">                      <span class="keyword">break</span>;</div><div class="line">                  <span class="keyword">default</span>:</div><div class="line">                      childTop = parentTop + lp.topMargin;</div><div class="line">              &#125;</div><div class="line"></div><div class="line">              child.layout(childLeft, childTop, childLeft + width, childTop + height);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><br><br>可以看到在 layoutChildren 方法中遍历了 FrameLayout 的子元素，并调用子元素的 layout 方法。<br><br>#### 5 draw 过程<br><br>View 的 draw 过程遵循如下步骤：<br><br>&gt;1. 绘制背景：background.draw(canvas)<br>&gt;2. 绘制自己：onDraw<br>&gt;3. 绘制children：dispatchDraw<br>&gt;4. 绘制装饰：onDrawScrollBars<br><br>该流程在 draw 源码中可以明显看出：<br><center><strong>View # draw(Canvas canvas) </strong></center><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@CallSuper</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> privateFlags = mPrivateFlags;</div><div class="line">       <span class="keyword">final</span> <span class="keyword">boolean</span> dirtyOpaque = (privateFlags &amp; PFLAG_DIRTY_MASK) == PFLAG_DIRTY_OPAQUE &amp;&amp;</div><div class="line">               (mAttachInfo == <span class="keyword">null</span> || !mAttachInfo.mIgnoreDirtyState);</div><div class="line">       mPrivateFlags = (privateFlags &amp; ~PFLAG_DIRTY_MASK) | PFLAG_DRAWN;</div><div class="line"></div><div class="line">       <span class="comment">/*</span></div><div class="line">        * Draw traversal performs several drawing steps which must be executed</div><div class="line">        * in the appropriate order:</div><div class="line">        *</div><div class="line">        *      1. Draw the background</div><div class="line">        *      2. If necessary, save the canvas' layers to prepare for fading</div><div class="line">        *      3. Draw view's content</div><div class="line">        *      4. Draw children</div><div class="line">        *      5. If necessary, draw the fading edges and restore layers</div><div class="line">        *      6. Draw decorations (scrollbars for instance)</div><div class="line">        */</div><div class="line"></div><div class="line">       <span class="comment">// Step 1, draw the background, if needed</span></div><div class="line">       <span class="keyword">int</span> saveCount;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (!dirtyOpaque) &#123;</div><div class="line">           drawBackground(canvas);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">// skip step 2 &amp; 5 if possible (common case)</span></div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> viewFlags = mViewFlags;</div><div class="line">       <span class="keyword">boolean</span> horizontalEdges = (viewFlags &amp; FADING_EDGE_HORIZONTAL) != <span class="number">0</span>;</div><div class="line">       <span class="keyword">boolean</span> verticalEdges = (viewFlags &amp; FADING_EDGE_VERTICAL) != <span class="number">0</span>;</div><div class="line">       <span class="keyword">if</span> (!verticalEdges &amp;&amp; !horizontalEdges) &#123;</div><div class="line">           <span class="comment">// Step 3, draw the content</span></div><div class="line">           <span class="keyword">if</span> (!dirtyOpaque) onDraw(canvas);</div><div class="line"></div><div class="line">           <span class="comment">// Step 4, draw the children</span></div><div class="line">           dispatchDraw(canvas);</div><div class="line"></div><div class="line">           <span class="comment">// Overlay is part of the content and draws beneath Foreground</span></div><div class="line">           <span class="keyword">if</span> (mOverlay != <span class="keyword">null</span> &amp;&amp; !mOverlay.isEmpty()) &#123;</div><div class="line">               mOverlay.getOverlayView().dispatchDraw(canvas);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="comment">// Step 6, draw decorations (foreground, scrollbars)</span></div><div class="line">           onDrawForeground(canvas);</div><div class="line"></div><div class="line">           <span class="comment">// we're done...</span></div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">      ...</div><div class="line">   &#125;</div></pre></td></tr></table></figure><br><br>draw 方法会依次调用上述流程的对应方法完成自己的绘制和子元素的绘制，这里重点来看看 dispatchDraw 方法，即 draw 流程的分发。<br><br><center><strong>View # dispatchDraw(Canvas canvas) </strong></center><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">dispatchDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure><br><br>可见 View 并没有对 dispatchDraw 方法提供实现，说明其实现与具体的 View 相关。<br><br>##### 5.1 ViewGroup 的 dispatchDraw 方法<br><br>ViewGroup 对 dispatchDraw 方法定义了具体的实现，在方法内部调用了 drawChild 方法<br><br><center><strong>ViewGroup# drawChild(Canvas canvas, View child, long drawingTime) </strong></center><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">drawChild</span><span class="params">(Canvas canvas, View child, <span class="keyword">long</span> drawingTime)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> child.draw(canvas, <span class="keyword">this</span>, drawingTime);</div><div class="line">    &#125;</div></pre></td></tr></table></figure><br><br>可以看到在 drawChild 方法中会去调用子元素的 draw 方法开启子元素的 draw 流程。<br><br>———-<br>文章大部分内容摘抄自《Android 开发艺术探索》第 4 章 —— View 的工作原理，加上部分自己的理解和总结，可能有错误，欢迎指正。<br><br><center><strong><em>END</em> </strong></center>

</center></center></center></center></center></center>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> View 的工作流程 </tag>
            
            <tag> measure </tag>
            
            <tag> layout </tag>
            
            <tag> draw </tag>
            
            <tag> MeasureSpec </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android：View 的事件分发机制]]></title>
      <url>/2017/05/09/Android-View-%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h4 id="Android-View的事件分发机制"><a href="#Android-View的事件分发机制" class="headerlink" title="Android-View的事件分发机制"></a>Android-View的事件分发机制</h4><ul>
<li>View 的事件由 MotionEvent 类表示，MotionEvent 定义了大量的常量来表示用户的手指（鼠标、手写笔、轨迹球）在屏幕上的各种状态。View 的事件分发机制指的就是 View （ViewGroup、Button等）在复杂的层级关系里对 MotionEvent 事件的分配和处理规则。</li>
<li>事件序列：当一次手指触摸屏幕行为开始，往往后续会连续触发一连串的事件，如：DOWN -&gt; ..MOVE.. -&gt; UP。也可以说从 <em>ACTION_DOWN</em> 开始到  <em>ACTION_UP</em> 事件到达的过程为一次事件序列。</li>
</ul>
<h5 id="一-MotionEvent"><a href="#一-MotionEvent" class="headerlink" title="一. MotionEvent"></a>一. MotionEvent</h5><p>MotionEvent 类的定义如下：<br><code>public final class MotionEvent extends InputEvent implements Parcelable</code><br>该类继承了 InputEvent （抽象类，输入事件的表示类），同时该类是可序列化的。</p>
<h6 id="1-1-常见的事件状态："><a href="#1-1-常见的事件状态：" class="headerlink" title="1.1 常见的事件状态："></a>1.1 常见的事件状态：</h6><ul>
<li><code>ACTION_DOWN</code><br>手指刚接触屏幕，按下的手势已经开始，此次事件序列的起始位置（坐标）被赋值。<br>-<code>ACTION_UP</code><br>手指从屏幕松开的一瞬间，按下的手势结束，此次事件序列结束，最终的结束位置（坐标）决定。</li>
<li><code>ACTION_MOVE</code><br>在接收到 ACTION_DOWN 之后，接收到 ACTION_UP 之前，在手指和屏幕保持接触的前提下手指的位置（坐标）发生了改变。</li>
</ul>
<h5 id="1-2-默认的规则"><a href="#1-2-默认的规则" class="headerlink" title="1.2 默认的规则"></a>1.2 默认的规则</h5><p><a id="rule"></a></p>
<blockquote>
<p>规则 1</p>
<blockquote>
<p>ViewGroup 默认不拦截任何事件。Android 源码中 ViewGroup 的 onInterceptTouchEvent 方法默认返回 false</p>
</blockquote>
<p>规则 2</p>
<blockquote>
<p>View 的 onTouchEvent 默认都会消耗事件（返回 true） ，除非他是不可点击的（clickable 、 longClickable 和 contextClickable 都为 false）。</p>
</blockquote>
<p>规则 3</p>
<blockquote>
<p>onCLick 会发生的前提是当前 View 是可点击的，并且它收到了 DOWN 和 UP 事件。</p>
</blockquote>
</blockquote>
<h5 id="二-触摸事件涉及到的主要方法"><a href="#二-触摸事件涉及到的主要方法" class="headerlink" title="二.  触摸事件涉及到的主要方法"></a>二.  触摸事件涉及到的主要方法</h5><ul>
<li><code>public boolean dispatchTouchEvent(MotionEvent event)</code><br>事件分发逻辑处理的主要方法，如果触摸事件传递到当前 View 那么该方法一定会被调用，返回结果受当前 View 的 onTouchEvent 和下级 View 的 dispatchTouchEvent 方法的影响，表示是否消耗掉当前事件。</li>
<li><code>public boolean onInterceptTouchEvent(MotionEvent event)</code><br>在 dispatchTouchEvent 方法中调用，用来判断是否拦截某个事件，如果当前 View 拦截了某个事件，那么在同一个事件序列中该方法不会再调用，返回结果表示是否拦截当前事件。 </li>
<li><code>public boolean onTouchEvent(MotionEvent event)</code><br>在 dispatchTouchEvent 方法中调用，用来处理触摸事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一事件序列中，当前 View 无法再次接收到事件。</li>
</ul>
<h5 id="三-事件分发过程"><a href="#三-事件分发过程" class="headerlink" title="三. 事件分发过程"></a>三. 事件分发过程</h5><h6 id="3-1-ViewGroup-的-dispatchTouchEvent-方法"><a href="#3-1-ViewGroup-的-dispatchTouchEvent-方法" class="headerlink" title="3.1 ViewGroup 的 dispatchTouchEvent 方法"></a>3.1 ViewGroup 的 dispatchTouchEvent 方法</h6><ol>
<li>对于一个根 ViewGroup 来说，点击事件产生后，首先会传递给它，这时它的<code>dispatchTouchEvent</code>就会被调用：</li>
</ol>
<ul>
<li>如果这个 ViewGroup 的 <code>onInterceptTouchEvent</code>方法返回 true就表示它要拦截当前事件，接着事件就会交给这个 ViewGroup 处理，即它的 <code>onTouchEvent</code>方法就会被调用</li>
<li>如果这个 ViewGroup 的 <code>onInterceptTouchEvent</code> 方法返回 false 就表示它不拦截当前事件，这时当前事件就会继续传递给它的子元素，接着子元素的 <code>dispatchTouchEvent</code>方法就会被调用，如此反复直到最终事件被处理。</li>
</ul>
<ol>
<li>参照源码加深理解<br>源码 <code>dispatchTouchEvent</code> 方法比较复杂，这里分段从前往后选取关键部分依次进行分析。</li>
</ol>
<p>（1）判断当前 View（ViewGroup）是否拦截事件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">		-------------ViewGroup#dispatchTouchEvent---------------</div><div class="line"> public boolean dispatchTouchEvent(MotionEvent ev) &#123;</div><div class="line"> ...</div><div class="line">// Check for interception.</div><div class="line">            final boolean intercepted;</div><div class="line">            if (actionMasked == MotionEvent.ACTION_DOWN</div><div class="line">                    || mFirstTouchTarget != null) &#123;</div><div class="line">                final boolean disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != 0;</div><div class="line">                if (!disallowIntercept) &#123;</div><div class="line">                    intercepted = onInterceptTouchEvent(ev);</div><div class="line">                    ev.setAction(action); // restore action in case it was changed</div><div class="line">                &#125; else &#123;</div><div class="line">                    intercepted = false;</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                // There are no touch targets and this action is not an initial down</div><div class="line">                // so this view group continues to intercept touches.</div><div class="line">                intercepted = true;</div><div class="line">            &#125;</div><div class="line">            ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一句一句进行分析：</p>
<center><font size="+2"><strong><code>if (actionMasked == MotionEvent.ACTION_DOWN || mFirstTouchTarget != null)</code></strong>:</font></center><br>如果当前事件为 <em>ACTION_DOWN</em>，并且<code>mFirstTouchTarget</code>不为空，就进行后面的操作。那么<code>mFirstTouchTarget</code>是什么呢？<br>&gt;根据 ViewGroup 的 onDispatchTouchEvent 方法后面部分得分析可知，当事件由 <em>ViewGroup</em>的子元素成功处理时（ViewGroup）没有进行拦截，mFirstTouchTarget 将被赋值，并指向其子元素，反过来，如果<em>ViewGroup</em>对事件进行拦截，mFirstTouchTarget != null 就不成立。<br><br>大家可能疑惑这句将<code>mFirstTouchTarget</code>是否为空作为判断条件，而<code>mFirstTouchTarget</code>的赋值却在这个<code>if()</code>判断之后，那<code>mFirstTouchTarget</code>不是一定为 null！<br>    <code>mFirstTouchTarget</code>作为全局变量，当<code>dispatchTouchEvent</code><strong>第一次</strong>被调用时其值一定为空，而<code>actionMasked == MotionEvent.ACTION_DOWN</code>一定为 true ，这时，ViewGroup 的 <code>onInterceptTouchEvent</code>会被调用，如果其返回为 true，表示要拦截（那么 intercepted 为 true，mFirstTouchTarget 将不被赋值为空），那么此次的 <em>ACTION_DOWN</em>事件就被拦截，<em>ACTION_DOWN</em>是一次事件序列的开始，那么当此次事件序列的下一个事件到达调用<code>dispatchTouchEvent</code>方法并运行到<code>if()</code>时，该<code>if()</code>将为 false（此时 <code>actionMasked != MotionEvent.ACTION_DOWN</code>且<code>mFirstTouchTarget  == null</code>），则 <code>intercepted = true</code>，这就得出一个结论：<br>&gt;结论 1<br>&gt;&gt;某个 View 一旦决定拦截，那么这一事件序列都只能由它来处理（如果事件序列能够传递给他的话），并且它的 onInterceptTouchEvent 不会再被调用。<br><br><center><font size="+2"><strong><code>final boolean disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != 0;if (!disallowIntercept) {...</code></strong></font></center><br>这句中使用到了一个标记位<code>FLAG_DISALLOW_INTERCEPT</code>，那么这个标记位是否启用是由谁决定、怎么决定的呢？<br>这里我们讨论的是 ViewGroup 的    <code>dispatchTouchEvent</code> 方法，<code>dispatchTouchEvent</code> 方法如果不拦截事件，那么 ViewGroup 就会将事件传递给它的子 View，这时子 View 可以通过其所在容器（父视图 ViewGroup）的引用调用 ViewGroup 的 <code>requestDisallowInterceptTouchEvent(boolean disallowIntercept)</code>方法改变 ViewGroup 的行为（启用或停用<code>FLAG_DISALLOW_INTERCEPT</code>标记位），使 ViewGroup 不再拦截除 ACTION_DOWN 以外的其它事件。<br><br>为什么说除了 ACTION_DOWN 以外的事件呢？<br>&gt;这是因为 ViewGroup 在分发事件时，如果是 ACTION_DOWN 事件就会重置 <code>FLAG_DISALLOW_INTERCEPT</code>标记位，使该标记位失效，即当面对 ACTION_DOWN 事件时，ViewGroup 总会调用自己的 <code>onInterceptTouchEvent</code>方法来询问自己是否要拦截事件。这一点在源码中也有体现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Handle an initial down.</span></div><div class="line">            <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">                <span class="comment">// Throw away all previous state when starting a new touch gesture.</span></div><div class="line">                <span class="comment">// The framework may have dropped the up or cancel event for the previous gesture</span></div><div class="line">                <span class="comment">// due to an app switch, ANR, or some other state change.</span></div><div class="line">                cancelAndClearTouchTargets(ev);</div><div class="line">                resetTouchState();</div><div class="line">            &#125;</div></pre></td></tr></table></figure><br><br>&gt;结论 2<br>&gt;&gt;事件传递是由外向内的，即事件总是先传递给父元素，然后再由父元素分发给子元素，通过 requestDisallowInterceptTouchEvent 方法可以在子元素中干预父元素的事件分发过程，但是 ACTION_DOWN 事件除外。<br><br>（2）ViewGroup 不拦截事件，将事件分发给子 View<br><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">       -------------ViewGroup#dispatchTouchEvent---------------</div><div class="line">public boolean dispatchTouchEvent(MotionEvent ev) &#123;</div><div class="line">...</div><div class="line">						final View[] children = mChildren;</div><div class="line">                        for (int i = childrenCount - 1; i &gt;= 0; i--) &#123;</div><div class="line">                            final int childIndex = getAndVerifyPreorderedIndex(</div><div class="line">                                    childrenCount, i, customOrder);</div><div class="line">                            final View child = getAndVerifyPreorderedView(</div><div class="line">                                    preorderedList, children, childIndex);</div><div class="line"></div><div class="line">                            // If there is a view that has accessibility focus we want it</div><div class="line">                            // to get the event first and if not handled we will perform a</div><div class="line">                            // normal dispatch. We may do a double iteration but this is</div><div class="line">                            // safer given the timeframe.</div><div class="line">                            if (childWithAccessibilityFocus != null) &#123;</div><div class="line">                                if (childWithAccessibilityFocus != child) &#123;</div><div class="line">                                    continue;</div><div class="line">                                &#125;</div><div class="line">                                childWithAccessibilityFocus = null;</div><div class="line">                                i = childrenCount - 1;</div><div class="line">                            &#125;</div><div class="line"></div><div class="line">                            if (!canViewReceivePointerEvents(child)</div><div class="line">                                    || !isTransformedTouchPointInView(x, y, child, null)) &#123;</div><div class="line">                                ev.setTargetAccessibilityFocus(false);</div><div class="line">                                continue;</div><div class="line">                            &#125;</div><div class="line"></div><div class="line">                            newTouchTarget = getTouchTarget(child);</div><div class="line">                            if (newTouchTarget != null) &#123;</div><div class="line">                                // Child is already receiving touch within its bounds.</div><div class="line">                                // Give it the new pointer in addition to the ones it is handling.</div><div class="line">                                newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class="line">                                break;</div><div class="line">                            &#125;</div><div class="line"></div><div class="line">                            resetCancelNextUpFlag(child);</div><div class="line">                            if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) &#123;</div><div class="line">                                // Child wants to receive touch within its bounds.</div><div class="line">                                mLastTouchDownTime = ev.getDownTime();</div><div class="line">                                if (preorderedList != null) &#123;</div><div class="line">                                    // childIndex points into presorted list, find original index</div><div class="line">                                    for (int j = 0; j &lt; childrenCount; j++) &#123;</div><div class="line">                                        if (children[childIndex] == mChildren[j]) &#123;</div><div class="line">                                            mLastTouchDownIndex = j;</div><div class="line">                                            break;</div><div class="line">                                        &#125;</div><div class="line">                                    &#125;</div><div class="line">                                &#125; else &#123;</div><div class="line">                                    mLastTouchDownIndex = childIndex;</div><div class="line">                                &#125;</div><div class="line">                                mLastTouchDownX = ev.getX();</div><div class="line">                                mLastTouchDownY = ev.getY();</div><div class="line">                                newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class="line">                                alreadyDispatchedToNewTouchTarget = true;</div><div class="line">                                break;</div><div class="line">                            &#125;</div><div class="line">                   ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><br><br><center><font size="+2"><code>for (int i = childrenCount - 1; i &gt;= 0; i--) {...</code></font><br></center><br>将事件分发给子 View 的过程通过遍历每一个子 View，判断子 View是否能接收到事件，能就调用其 <code>dispatchTouchEvent</code>方法，若子 View 的 <code>dispatchTouchEvent</code>方法返回 false ，表示子 View 未消耗事件，则继续循环；如果子 View 的 <code>dispatchTouchEvent</code>方法返回 true，表示子 View 消耗了事件，那么<code>mFirstTouchTarget</code>将被赋值，同时结束循环。<br>- 如何判断子 View 是否能接收到事件：<br>子元素是否在播放动画<br>点击事件的坐标是否落在子元素的区域内<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">if (childWithAccessibilityFocus != null) &#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line">if (!canViewReceivePointerEvents(child) || !isTransformedTouchPointInView(x, y, child, null)) &#123;</div><div class="line">	...</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure><br><br>- <code>mFirstTouchTarget</code>的赋值：对应代码为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class="line">alreadyDispatchedToNewTouchTarget = <span class="keyword">true</span>;</div><div class="line"><span class="keyword">break</span>;</div></pre></td></tr></table></figure><br><br>具体的赋值在<code>addTouchTarget</code>方法内部。<br>- 遍历所有子元素都没有被处理：这包含两种情况，第一种为 ViewGroup 没有子元素，第二种是子元素处理了点击事件，但 子元素的 <code>dispatchTouchEvent</code>方法返回了false（这一般是因为子元素在<code>onTouchEvent</code>方法中返回了false），此时 ViewGroup 将自己处理事件。<br>结论：<br><a id="result3"></a><br>&gt;结论 3<br>&gt;&gt;某个 View 一旦开始处理事件，如果它不消耗 ACTION_DOWN 事件（onTouchEvent返回false），那么同一事件序列中的其他事件都不会再交给它来处理，并且事件将重新交由它的父元素去处理，即父元素的 onTouchEvent 会被调用。意思就是事件一旦交给一个 View 来处理，那么它就必须消耗掉，否则同一事件序列中剩下的事件就不再交给它来处理。<br><br><br> 这个结论可以结合代码来理解：<br><strong><code>某个 View 一旦开始处理事件</code></strong>：在开始循环前各个关键变量的值应该是这样的：<br>1.<code>mFirstTouchTarget</code>一定为空<br>2.<code>intercepted</code>一定为 false<br>3.可以推出<code>actionMasked == MOtionEvent.ACTION_DOWN</code>（这里参照 3.1 的部分）。<br><br> 之后遍历子 View 开始，在确定了<strong>某一个</strong>子 View <em>CV</em> 能接收到事件后，调用<em>CV</em>的<code>dispatchTouchEvent</code>方法（<code>dispatchTransformedTouchEvent</code>方法内部）：<br> - 若<code>dispatchTouchEvent</code>返回 true ，表示<em>CV</em>消耗了<strong>ACTION_DOWN</strong>事件，这时对<code>mFirstTouchTarget</code>赋值，使其指向<em>CV</em>，并跳出循环。当此次事件序列的下一个事件到达，假设为 ACTION_MOVE，此时<code>mFirstTouchTarget != null</code>成立，如果<em>CV</em>调用了<code>requestDisallowInterceptTouchEvent</code>方法启用<code>FLAG_DISALLOW_INTERCEPT</code>标记位（<code>disallowIntercept 为 true</code>），则 <code>intercepted</code>为 false，若<code>FLAG_DISALLOW_INTERCEPT</code>标记位没有被启用，那么 ViewGroup 的 <code>onInterceptTouchEvent</code>再次调用，参考 <a href="#rule">规则 1 </a>可以知道，一般情况下<code>intercepted</code>也会为 false，那么 <strong>同一事件序列中的其他事件都会交给它处理</strong>。<br> - 若<code>dispatchTouchEvent</code>返回 false，即 <em>CV</em> 不消耗 ACTION_DOWN 事件（onTouchEvent返回false）,此时会继续往下遍历子 View，如果遍历结束都没有被处理，那么 ViewGroup 将自己处理该事件，即<strong>父元素的 onTouchEvent 会被调用</strong>。<br><br>###### 3.2 View 的 dispatchTouchEvent 方法<br><br>View 的<code>dispatchTouchEvent</code>方法要简单一些，这里的 View 不包括 ViewGroup 。<br>&gt;View（不包括 ViewGroup）做为一个单独的元素，它没有子元素无法向下传递事件，所以只能自己处理事件。<br><br>（一） 事件传递到了某一个具体的 View 那就表明该 View 能接收到触摸事件，传递过来的第一个事件一定是此次事件序列的 <code>ACTION_DOWN</code> 事件，如果 View 消耗了 <code>ACTION_DOWN</code> 事件（返回true），那么该事件序列的后续事件都会传递给他，如果没消耗 <code>ACTION_DOWN</code> ，那么它将无法收到后续事件。参考  <a href="#result3">结论 3 </a><br><br>如果 View 只想处理 <code>ACTION_DOWN</code> 事件，而不处理其他事件，那可以覆写 <code>dispatchTouchEvent</code>方法或通过设置监听器实现（<code>setOnTouchListener(OnTouchListener l)</code>），在方法中加入如下判断即可：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">if</span>(event.getAction() == MotionEvent.ACTION_DOWN)</div><div class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">...</div></pre></td></tr></table></figure><br><br>（二） 内部监听和外部监听<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">-------------View#dispatchTouchEvent---------------</div><div class="line"> public boolean dispatchTouchEvent(MotionEvent event) &#123;</div><div class="line">...</div><div class="line">        if (onFilterTouchEventForSecurity(event)) &#123;</div><div class="line">            if ((mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp; handleScrollBarDragging(event)) &#123;</div><div class="line">                result = true;</div><div class="line">            &#125;</div><div class="line">            //noinspection SimplifiableIfStatement</div><div class="line">            ListenerInfo li = mListenerInfo;</div><div class="line">            if (li != null &amp;&amp; li.mOnTouchListener != null</div><div class="line">                    &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</div><div class="line">                    &amp;&amp; li.mOnTouchListener.onTouch(this, event)) &#123;</div><div class="line">                result = true;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if (!result &amp;&amp; onTouchEvent(event)) &#123;</div><div class="line">                result = true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">...</div><div class="line">        return result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><br><br>&gt;从源码可以看出，首先会判断有没有设置 OnTouchListener ，如果有，并且 OnTouchListener 中的 onTouch 方法返回 true，那么 onTouchEvent 就不会被调用，可见 OnTouchListener 的优先级高于 OnTouchEvent，这样做的好处是方便在外界处理触摸事件。<br><br>所以如果想屏蔽 View 默认的触摸事件处理只需为 View 设置监听器并返回 true 即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">view.setOnTouchListener(<span class="keyword">new</span> View.OnTouchListener() &#123;</div><div class="line">	  <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">      &#125;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure><br><br>（三）View 的 onTouchEvent 对 DISEABLED 的处理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">     <span class="keyword">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</div><div class="line">         <span class="keyword">if</span> (action == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</div><div class="line">             setPressed(<span class="keyword">false</span>);</div><div class="line">         &#125;</div><div class="line">         <span class="comment">// A disabled view that is clickable still consumes the touch</span></div><div class="line">         <span class="comment">// events, it just doesn't respond to them.</span></div><div class="line">         <span class="keyword">return</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE</div><div class="line">                 || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)</div><div class="line">                 || (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE);</div><div class="line">     &#125;</div><div class="line">...</div><div class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><br><br>&gt;从源码可看出，当 View 处于不可用状态时，只要 CLICKABLE ，LONG_CLICKABLE 和 CONTEXT_CLICKABLE  有一者为 true，onTouchEvent 就会返回 true，即消耗事件。<br><br>这里有个<code>CONTEXT_CLICKABLE</code>，这个常量指的又是什么呢？<br><code>CONTEXT_CLICKABLE</code>是 Android SDK 23 （Android 6.0）加入的，表示触控笔上下文单击（触控笔按钮）和鼠标右键单击是否可用。为其设置监听器时应使用 onContextClick 代替 onStylusButtonPress。<br><br>（四）View 的 onTouchEvent 对点击事件的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">      <span class="keyword">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</div><div class="line">             (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE) ||</div><div class="line">             (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE) &#123;</div><div class="line">       <span class="keyword">switch</span> (action) &#123;</div><div class="line">       <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">        ...</div><div class="line">                         <span class="keyword">if</span> (!focusTaken) &#123;</div><div class="line">                             <span class="comment">// Use a Runnable and post this rather than calling</span></div><div class="line">                             <span class="comment">// performClick directly. This lets other visual state</span></div><div class="line">                             <span class="comment">// of the view update before click actions start.</span></div><div class="line">                             <span class="keyword">if</span> (mPerformClick == <span class="keyword">null</span>) &#123;</div><div class="line">                                 mPerformClick = <span class="keyword">new</span> PerformClick();</div><div class="line">                             &#125;</div><div class="line">                             <span class="keyword">if</span> (!post(mPerformClick)) &#123;</div><div class="line">                                 performClick();</div><div class="line">                             &#125;</div><div class="line">                         &#125;</div><div class="line">                     &#125;</div><div class="line">...</div><div class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure><br><br>&gt;当 ACTION_UP 事件到达时，会触发 performClick 方法，如果 View 设置了 OnClickListener，那么 performClick 内部会调用它的 onClick 方法。<br><br>注释中说明了要使用 post 方法通过 Handler 执行 onClick，这让我们能够在 onClick 执行之前看到 View 的状态更新。<br><br>（五）CLICKABLE ，LONG_CLICKABLE 和 CONTEXT_CLICKABLE  的设置<br>&gt;View 的 LONG_CLICKABLE 属性默认为 false ，而 CLICKABLE 属性是否为 false 和具体的 View 相关，确切来说是可点击的 View 的 CLICKABLE 为 true ，不可点击的 View 的 CLICKABLE 为 false，比如 Button 是可点击的，而 TextView 是不可点击 的。通过 setClickable 、 setLongClickable 和 setContextClickable 可修改三者的值。另外，setOnClickListener、setOnLongClickListener 和 setOnContextClickListener 方法内部会自动将 View 的对应属性的 XXXable 值改为 true。<br><br>文章大部分摘抄自《Android 开发艺术探索》，第三章 3.4 节 —— View的事件分发机制，加上部分自己的理解，可能有错误，欢迎指正。<br><center><u><b><em>END</em></b></u></center>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> MotionEvent </tag>
            
            <tag> 触摸事件分发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android：自定义View和属性动画ValueAnimator实现圆点指示器——支持“纵向视图”]]></title>
      <url>/2017/05/04/Android-%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%92%8C%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BBValueAnimator%E5%AE%9E%E7%8E%B0%E5%9C%86%E7%82%B9%E6%8C%87%E7%A4%BA%E5%99%A8%E2%80%94%E2%80%94%E6%94%AF%E6%8C%81%E2%80%9C%E7%BA%B5%E5%90%91%E8%A7%86%E5%9B%BE%E2%80%9D/</url>
      <content type="html"><![CDATA[<h4 id="圆点指示器支持“纵向视图”啦"><a href="#圆点指示器支持“纵向视图”啦" class="headerlink" title="圆点指示器支持“纵向视图”啦"></a>圆点指示器支持“纵向视图”啦</h4><p>关于圆点指示器的实现请参看上一篇博文：<a href="http://blog.csdn.net/aimeimeits/article/details/69370853" target="_blank" rel="external">自定义View和属性动画ValueAnimator实现圆点指示器</a><br>该篇文章将对支持纵向视图过程的关键代码和使用方法进行介绍。</p>
<p>控件元素的构成<br>| 小圆点 | 指示点 | 线段 |<br>| :—– | :— | :—- |<br>|圆|椭圆|矩形|</p>
<h5 id="一-效果图"><a href="#一-效果图" class="headerlink" title="一 效果图"></a>一 效果图</h5><p><img src="http://img.blog.csdn.net/20170504085814432?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h5 id="二-如何使用"><a href="#二-如何使用" class="headerlink" title="二 如何使用"></a>二 如何使用</h5><p>使用时只需在你的<code>xml</code>布局文件中指定<code>indicatorOrientation</code>属性为<code>vertical</code>即可。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.duan.indicatorviewdemo.IndicatorView</span></span></div><div class="line"></div><div class="line">            <span class="attr">app:indicatorOrientation</span>=<span class="string">"vertical"</span></div><div class="line">            </div><div class="line">           <span class="attr">android:layout_marginLeft</span>=<span class="string">"30dp"</span></div><div class="line">           <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">           <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">           <span class="attr">app:dotNum</span>=<span class="string">"5"</span></div><div class="line">           <span class="attr">app:dotSize</span>=<span class="string">"20dp"</span></div><div class="line">           <span class="attr">app:indicatorSize</span>=<span class="string">"20dp"</span></div><div class="line">           <span class="attr">app:dotColor</span>=<span class="string">"#a5b7b3"</span></div><div class="line">           <span class="attr">app:indicatorColor</span>=<span class="string">"#52ffda"</span></div><div class="line">           <span class="attr">app:lineColor</span>=<span class="string">"#cacaca"</span></div><div class="line">           <span class="attr">app:lineLength</span>=<span class="string">"90dp"</span></div><div class="line">           <span class="attr">app:lineWidth</span>=<span class="string">"4dp"</span> /&gt;</div></pre></td></tr></table></figure></p>
<h5 id="三-关键代码"><a href="#三-关键代码" class="headerlink" title="三 关键代码"></a>三 关键代码</h5><h6 id="3-1-attr-中添加方向属性定义"><a href="#3-1-attr-中添加方向属性定义" class="headerlink" title="3.1 attr 中添加方向属性定义"></a>3.1 attr 中添加方向属性定义</h6><p>本项目在attr.xml文件中添加如下属性定义，并将该属性添加到<code>declare-styleable</code>中：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"indicatorOrientation"</span> <span class="attr">format</span>=<span class="string">"integer"</span>&gt;</span> <span class="comment">&lt;!--控件方向--&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"vertical"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span> <span class="comment">&lt;!--纵向--&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"horizontal"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span> <span class="comment">&lt;!--水平--&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">attr</span>&gt;</span></div><div class="line"></div><div class="line"> <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"IndicatorView"</span>&gt;</span>  </div><div class="line">...</div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"indicatorOrientation"</span>/&gt;</span></div><div class="line">...</div><div class="line"> <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h6 id="3-2-修改-IndicatorView-java"><a href="#3-2-修改-IndicatorView-java" class="headerlink" title="3.2 修改 IndicatorView.java"></a>3.2 修改 IndicatorView.java</h6><ul>
<li><p>添加<code>mIndicatorOrientation</code>变量，并在构造函数中获得<code>xml</code>布局文件中指定的值，默认为水平方向。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//默认为 水平</span></div><div class="line">        mIndicatorOrientation = array.getInteger(R.styleable.IndicatorView_indicatorOrientation, INDICATOR_ORIENTATION_HORIZONTAL);</div></pre></td></tr></table></figure>
</li>
<li><p>onMeasure 方法<br>onMeasure 方法需要处理 xml 布局文件设置宽高为<code>warp_content</code>的情况，此时需要计算出控件的实际宽和高。<br>在该方法中判断当设置为“纵向视图”时，宽和高的计算方法为：<br>宽 = 左内边距 + 右内边距 + 指示点大小<br>高 = 上内边距 + 下内边距 + 线段总长 + 指示点大小</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">if (widthMode == MeasureSpec.EXACTLY) &#123;</div><div class="line">            width = widthSize;</div><div class="line">        &#125; else &#123;//xml中宽度设为warp_content</div><div class="line">            if (mIndicatorOrientation == INDICATOR_ORIENTATION_VERTICAL) //纵向</div><div class="line">                width = getPaddingLeft() + getPaddingRight() + mIndicatorSize;</div><div class="line">            else</div><div class="line">                width = getPaddingLeft() + ((mDotCount - 1) * mLineLength + mIndicatorSize) + getPaddingRight();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (heightMode == MeasureSpec.EXACTLY) &#123;</div><div class="line">            height = heightSize;</div><div class="line">        &#125; else &#123;</div><div class="line">            if (mIndicatorOrientation == INDICATOR_ORIENTATION_VERTICAL) //纵向</div><div class="line">                height = ((mDotCount - 1) * mLineLength + mIndicatorSize) + getPaddingBottom() + getPaddingTop();</div><div class="line">            else</div><div class="line">                height = getPaddingTop() + mIndicatorSize + getPaddingBottom();</div><div class="line">        &#125;</div><div class="line">        ...</div></pre></td></tr></table></figure>
</li>
<li><p>onLayout 方法<br>在 onLayout 方法中会初始化存储指示点属性值的类，在这里需要对不同的控件方向做不同的处理。<br>控件为“纵向视图”时，指示点（椭圆）的中心的横坐标是固定的，中心的纵坐标与当前指示点所在的位置有关。而控件为“水平视图”时纵坐标固定，横坐标与所在位置有关</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if (mIndicatorOrientation == INDICATOR_ORIENTATION_VERTICAL) &#123; //纵向</div><div class="line">               indicatorHolder.setCenterX(getWidth() / 2);</div><div class="line">               indicatorHolder.setCenterY(mIndicatorPos * mLineLength + getPaddingBottom() + mIndicatorSize / 2);</div><div class="line">           &#125; else &#123;</div><div class="line">               indicatorHolder.setCenterX(mIndicatorPos * mLineLength + getPaddingLeft() + mIndicatorSize / 2);</div><div class="line">               indicatorHolder.setCenterY(getHeight() / 2);</div><div class="line">           &#125;</div></pre></td></tr></table></figure>
<ul>
<li>onDraw 方法绘制线段<br>线段使用的是<code>Canvas</code>的<code>drawRect(float left, float top, float right, float bottom, @NonNull Paint paint)</code>方法绘制的。<br>画线段时需要对控件方向做出判断，控件为“纵向视图”时，线段（矩形）的 left 和 right 是固定的，而 top 和 bottom 与当前正在绘制的线段有关。“水平视图”时 top 和 bottom 固定，right 和 left 与当前正在绘制的线段有关。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> ...</div><div class="line">    <span class="keyword">if</span> (mIndicatorOrientation == INDICATOR_ORIENTATION_VERTICAL) &#123; <span class="comment">//纵向</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mDotCount - <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">int</span> top = getHeight() - (getPaddingBottom() + mIndicatorSize / <span class="number">2</span> + mLineLength * (i + <span class="number">1</span>));</div><div class="line">            <span class="keyword">int</span> bottom = getHeight() - (getPaddingBottom() + mIndicatorSize / <span class="number">2</span> + mLineLength * i);</div><div class="line">            <span class="keyword">int</span> left = (getWidth() - mLineWidth) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">int</span> right = (getWidth() + mLineWidth) / <span class="number">2</span>;</div><div class="line"></div><div class="line">            canvas.drawRect(left, top, right, bottom, mPaint);</div><div class="line">            &#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<ul>
<li>onDraw 方法绘制小圆点<br>小圆点使用的是<code>Canvas</code>的<code>drawCircle(float cx, float cy, float radius, @NonNull Paint paint)</code>方法，当控件为“纵向视图”时，cx 值是固定的，cy 需要计算。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">if</span> (mIndicatorOrientation == INDICATOR_ORIENTATION_VERTICAL) &#123; <span class="comment">//纵向</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clickableAreas.length; i++) &#123;</div><div class="line">                <span class="keyword">int</span> cx = getWidth() / <span class="number">2</span>;</div><div class="line">                <span class="keyword">int</span> cy = i * mLineLength + getPaddingBottom() + mIndicatorSize / <span class="number">2</span>;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (switchTo != -<span class="number">1</span> &amp;&amp; i == switchTo)</div><div class="line">                    mPaint.setColor(mIndicatorColor);</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    mPaint.setColor(mDotColor);</div><div class="line"></div><div class="line">                canvas.drawCircle(cx, cy, mDotSize, mPaint);</div><div class="line">                clickableAreas[i][<span class="number">0</span>] = cx;</div><div class="line">                clickableAreas[i][<span class="number">1</span>] = cy;</div><div class="line">            &#125;</div><div class="line">            ...</div></pre></td></tr></table></figure>
<ul>
<li><p>onDraw 方法绘制指示点<br>指示点的绘制时根据<code>indicatorHolder</code>对象中存的属性值进行绘制的(getter方法)，所有无需修改，需要修改的是对<code>indicatorHolder</code>对象值的控制(setter操作)，即平移动画的定义和“挤压”动画的定义。</p>
</li>
<li><p>onTouchEvent 方法<br>onTouchEvent 监听对控件的触摸事件，这个方法里需要修改连个地方<br>1 判断当前手指所在的小圆点：为“水平视图”时是根据<code>event.getX()</code>的值判断所在小圆点的位置，为“纵向视图”时应该根据<code>event.getY()</code>来判断。<br>2 当用户“拖拽”指示点时：为“水平视图”时这里要修改<code>indicatorHolder</code>的中心的横坐标，为“纵向视图”则应该修改其中心的纵坐标。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"> <span class="keyword">int</span> ey = (<span class="keyword">int</span>) event.getY();</div><div class="line"> ...</div><div class="line"> <span class="comment">//纵向</span></div><div class="line">   <span class="keyword">for</span> (; switchTo &lt; mDotCount; switchTo++) &#123;</div><div class="line">                <span class="keyword">int</span>[] xy = clickableAreas[switchTo];</div><div class="line">                <span class="comment">//只对y坐标位置进行判断，这样即使用户手指在控件外面（先在控件内触摸后不抬起而是滑到控件外面）滑动也能判断</span></div><div class="line">                <span class="keyword">if</span> (ey &lt;= xy[<span class="number">1</span>] + temp &amp;&amp; ey &gt;= xy[<span class="number">1</span>] - temp) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">...</div><div class="line"><span class="keyword">if</span> (mIndicatorOrientation == INDICATOR_ORIENTATION_VERTICAL) &#123; <span class="comment">//纵向</span></div><div class="line">                    indicatorHolder.setCenterY(ey);</div><div class="line">                &#125; </div><div class="line">                ...</div></pre></td></tr></table></figure>
</li>
<li><p>指示点切换动画<br>平移动画：为“纵向视图”时平移动画应在<code>indicatorHolder</code>中心的纵坐标上做变化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"> <span class="keyword">if</span> (mIndicatorOrientation == INDICATOR_ORIENTATION_VERTICAL) &#123; <span class="comment">//纵向</span></div><div class="line">            <span class="keyword">int</span> start = indicatorHolder.getCenterY();</div><div class="line">            end = switchTo * mLineLength + getPaddingBottom() + mIndicatorSize / <span class="number">2</span>;</div><div class="line">            trainsAnim = ObjectAnimator.ofInt(indicatorHolder, <span class="string">"centerY"</span>, start, end);</div><div class="line">        &#125;</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
</ul>
<p>挤压动画：为“纵向视图”时挤压动画改变<code>indicatorHolder</code>的宽度（centerW）因为线段的宽度，高度（centerH）为指示点当前所在位置和目标点间的距离。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">if</span> (mIndicatorOrientation == INDICATOR_ORIENTATION_VERTICAL) &#123; <span class="comment">//纵向</span></div><div class="line">                        centerH = Math.abs(indicatorHolder.getCenterY() - clickableAreas[switchTo][<span class="number">1</span>]);</div><div class="line">                        centerW = mLineWidth;</div><div class="line">                    &#125; </div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>不使用动画：此时判断为“纵向视图”时应修改<code>indicatorHolder</code>的中心的纵坐标。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="keyword">if</span> (mIndicatorOrientation == INDICATOR_ORIENTATION_VERTICAL) <span class="comment">//纵向</span></div><div class="line">                        indicatorHolder.setCenterY(end);</div><div class="line">...</div></pre></td></tr></table></figure></p>
<center>代码修改已同步到Github，你可以在这里下载到源代码：</center><br><center><a href="https://github.com/DuanJiaNing/IndicatorView" target="_blank" rel="external">DuanJiaNing/IndicatorView</a></center>

<hr>
<p><font color="#afafaf" size="-1">觉得不错的话就给颗星吧&gt;.&lt;</font></p>
<center><u><b><em>END</em></b></u></center>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 自定义 View </tag>
            
            <tag> 属性动画 </tag>
            
            <tag> 圆点指示器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Activity 的启动模式和标记位]]></title>
      <url>/2017/05/03/Android-Activity-%E7%9A%84%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%A0%87%E8%AE%B0%E4%BD%8D/</url>
      <content type="html"><![CDATA[<h3 id="android-Activity-的启动模式和标记位"><a href="#android-Activity-的启动模式和标记位" class="headerlink" title="android-Activity 的启动模式和标记位"></a>android-Activity 的启动模式和标记位</h3><h5 id="Activity-启动过程涉及到的几个概念"><a href="#Activity-启动过程涉及到的几个概念" class="headerlink" title="Activity 启动过程涉及到的几个概念"></a>Activity 启动过程涉及到的几个概念</h5><blockquote>
<p>任务栈：</p>
</blockquote>
<p>任务栈又称 Task，顾名思义使用的是 <strong>栈</strong> 结构，具有先进后出的特点，栈中存放的是 Activity 组件的实例，我们每次启动一个 Activity （该 Activity 的 onCreate 方法将首次被调用），该 Activity 将被压入启动它的 Activity 所在的任务栈，或通过 Intent 指定<code>addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)</code>在新的任务栈中创建该 Activity。任务栈有前台和后台之分，后台任务栈中的 Activity 处于暂停状态，用户可以通过切换应用（<em>Activity</em>）将后台任务栈调到前台。</p>
<p>####Activity 的 LaunchMode</p>
<ol>
<li>standard 标准模式：<br>标准模式为系统默认启动模式。在该模式下每次启动 Activity 都会重新创建一个新的实例，不管这个实例是否已经存在。在这种模式下，谁启动了这个 Activity ，那么这个 Activity 就运行在启动它的那个 Activity 所在的任务栈中。</li>
<li>singleTop 栈顶复用模式：</li>
</ol>
<ul>
<li>在这种模式下，如果新 Activity 已经位于任务栈的栈顶，那么此 Activity 不会被重新创建    。</li>
<li>如果新 Activity 的实例已存在但不位于栈顶，那么新的 Activity 任会重新。</li>
<li>onNewIntent 方法会被回调。</li>
</ul>
<ol>
<li><p>singleTask 栈内复用模式：<br>在这种模式下，只要 Activity 在一个栈中存在，那么多次启动该 Activity 都不会重新创建实例，同时系统会回调其 onNewIntent 方法。可以分为如下三种情况进行区分：</p>
<ul>
<li>要启动的 Activity A 所需的任务栈 S 不存在：<br>系统先创建任务栈 S ，然后创建 A 并入栈到 S。</li>
<li>要启动的 Activity A 所需的任务栈 S 存在，且任务栈 S 中不存在 A 的实例：<br>系统将创建 A 的实例并入栈到 S。</li>
<li>要启动的 Activity A 所需的任务栈 S 存在，且任务栈 S 中存在 A 的实例 ：<ol>
<li>实例 A 位于栈顶：<br>直接复用（<em>栈顶复用</em>） </li>
<li>实例 A 不位于栈顶：<br>此时 A 不会重新创建，同时将实例 A 切换到栈顶（<em>使实例 A 上面的所有 Activity 出栈</em>）     </li>
</ol>
</li>
</ul>
</li>
<li>singleInstance 单实例模式：<br>这是一种加强的 singleTask 模式，它具有 singleTask 的所有特性之外还有一个特性，那就是具有此种启动模式的 Activity 只能单独位于一个任务栈中。 </li>
</ol>
<h4 id="Activity-的-Flags"><a href="#Activity-的-Flags" class="headerlink" title="Activity 的 Flags"></a>Activity 的 Flags</h4><p>Activity 的 Flags 有很多，标记位的作用有很多，有的标记位可以设定 Activity 的启动模式，有的可以影响 Activity 的运行状态。</p>
<ul>
<li>FLAG_ACTIVITY_NEW_TASK<br>指定 Activity 以 singleTask 模式启动</li>
<li>FLAG_ACTIVITY_SINGLE_TOP<br>指定 Activity 以 singleTop 模式启动</li>
<li>FLAG_ACTIVITY_CLEAR_TOP<br>具备此标记为的 Activity 在启动时会将位于同一任务栈的所有位于它上面的 Activity 出栈，这个标记位一般会和 singleTask一起出现，singleTask 启动模式默认就具有此标记位的效果</li>
<li>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS<br>具有这个标记的 Activity 不会出现在历史 Activity 列表中。</li>
</ul>
<center><u><b><em>END</em></b></u></center>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网易2017春招笔试真题编程题集合 —— 2.优雅的点]]></title>
      <url>/2017/04/10/%E7%BD%91%E6%98%932017%E6%98%A5%E6%8B%9B%E7%AC%94%E8%AF%95%E7%9C%9F%E9%A2%98%E7%BC%96%E7%A8%8B%E9%A2%98%E9%9B%86%E5%90%88%E2%80%94%E2%80%942.%E4%BC%98%E9%9B%85%E7%9A%84%E7%82%B9/</url>
      <content type="html"><![CDATA[<h3 id="网易2017春招笔试真题编程题集合——2-优雅的点"><a href="#网易2017春招笔试真题编程题集合——2-优雅的点" class="headerlink" title="网易2017春招笔试真题编程题集合——2.优雅的点"></a>网易2017春招笔试真题编程题集合——<strong>2.优雅的点</strong></h3><p>原题地址在这里：<a href="https://www.nowcoder.com/question/next?pid=4575457&amp;qid=83061&amp;tid=7519540" target="_blank" rel="external">牛客网</a></p>
<h4 id="题目是这样的："><a href="#题目是这样的：" class="headerlink" title="题目是这样的："></a>题目是这样的：</h4><blockquote>
<p>小易有一个圆心在坐标原点的圆，小易知道圆的半径的平方。小易认为在圆上的点而且横纵坐标都是整数的点是优雅的，小易现在想寻找一个算法计算出优雅的点的个数，请你来帮帮他。<br>例如：半径的平方如果为25<br>优雅的点就有：(+/-3, +/-4), (+/-4, +/-3), (0, +/-5) (+/-5, 0)，一共12个点。 </p>
</blockquote>
<p>输入描述：</p>
<blockquote>
<p>输入为一个整数，即为圆半径的平方,范围在32位int范围内。</p>
</blockquote>
<p>输出描述：</p>
<blockquote>
<p>输出为一个整数，即为优雅的点的个数</p>
</blockquote>
<p>输入例子：</p>
<blockquote>
<p>25</p>
</blockquote>
<p>输出例子</p>
<blockquote>
<p>12</p>
</blockquote>
<h4 id="用java编写，思路是这样的："><a href="#用java编写，思路是这样的：" class="headerlink" title="用java编写，思路是这样的："></a>用java编写，思路是这样的：</h4><p>1 使用<code>java.util.Scanner</code>接收控制台输入<br>2 定义三个变量<code>int in,count = 0;double radius</code>；in 用于接收输入的圆的半径的平方，count 计录优雅点的个数，radius 为开平方后得到的半径<br>3 用变量 <code>int x</code> 遍历 0 到 radius 间的整数，x 作为横坐标求出对应的纵坐标 y，判断纵坐标是否为整数（小数位全为0）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">int</span> in = scanner.nextInt();</div><div class="line">        <span class="keyword">double</span> radius = Math.sqrt(in);</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= radius; x++) &#123;</div><div class="line">            <span class="keyword">double</span> y = Math.sqrt(in - x * x);</div><div class="line"><span class="comment">//            System.out.println("(" + x + "," + y + ")");</span></div><div class="line">            <span class="keyword">if</span> (y % <span class="number">1.0</span> == <span class="number">0</span>) &#123;</div><div class="line">                count++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(radius % <span class="number">1.0</span> == <span class="number">0</span> ? count * <span class="number">4</span> - <span class="number">4</span> : count * <span class="number">4</span> + <span class="string">""</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>提交运行</em> 之后就会提示通过所有测试用例：<br><img src="http://img.blog.csdn.net/20170410164323047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><ul>
<li>使用 Math.sqrt(double d) 求平方根</li>
<li>半径 radius 要用 double 型保存，因为 最后通过判断半径是否为整数决定要不要保留圆上与横纵坐标的四个交点</li>
<li>判断一个 double 型变量是否为整数 <code>number % 1.0 == 0</code></li>
</ul>
<center><u><b><em>END</em></b></u></center>]]></content>
      
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android：自定义View和属性动画ValueAnimator实现圆点指示器]]></title>
      <url>/2017/04/06/Android-%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%92%8C%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BBValueAnimator%E5%AE%9E%E7%8E%B0%E5%9C%86%E7%82%B9%E6%8C%87%E7%A4%BA%E5%99%A8/</url>
      <content type="html"><![CDATA[<h3 id="自定义View和属性动画ValueAnimator实现圆点指示器"><a href="#自定义View和属性动画ValueAnimator实现圆点指示器" class="headerlink" title="自定义View和属性动画ValueAnimator实现圆点指示器"></a>自定义View和属性动画ValueAnimator实现圆点指示器</h3><blockquote>
<p><strong>自定义View和属性动画相结合实现支持动态修改指示点位置，拖拽或点击改变指示点位置，点击位置监听及切换动画自定义的圆点指示器。</strong></p>
</blockquote>
<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="http://img.blog.csdn.net/20170406005647275?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<font size="2" color="#a8a8a8">最下面那个“吸干”，想不出用什么词形容更好&gt;.&lt;，后来改回”挤扁”</font>

<p>自定 View 代码写在 <code>IndicatorView.java</code>中</p>
<h4 id="IndicatorView由以下几个重要的图形构成"><a href="#IndicatorView由以下几个重要的图形构成" class="headerlink" title="IndicatorView由以下几个重要的图形构成"></a>IndicatorView由以下几个重要的图形构成</h4><ul>
<li>小圆点：固定不动的圆形</li>
<li>指示点：在小圆点上来回移动，通过改变指示点当前所在位置来实现 <code>指示器</code> 的功能，为了实现“挤扁”的动画效果，绘制时用的是椭圆。</li>
<li>线段：用于连接两个小圆点，绘制时以两个相邻小圆点间的距离为一个 <code>线段</code> 单位。循环绘制 <code>线段</code> ，绘制<code>小圆点个数减一</code> 次后连通所有小圆点，<em>在布局文件或代码中可修改其可见性（<code>lineVisible</code>）</em><br><img src="http://img.blog.csdn.net/20170406005737300?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><h4 id="实现的功能："><a href="#实现的功能：" class="headerlink" title="实现的功能："></a>实现的功能：</h4></li>
<li>支持通过xml定义IndicatorView的属性<ul>
<li>属性包括：<br>1 指示点大小、颜色<br>2 固定显示的小圆点的大小、颜色以及数量<br>3 连接小圆点的线条的可见性，线条宽度、长度、颜色<br>4 默认提供了两个用于指示点间切换的动画（平移和挤扁），也可选择不使用动画或自定义<br>5 默认提供的切换动画的时间可指定<br>6 启用/禁用拖拽切换（点击切换或两者）功能</li>
</ul>
</li>
<li>通过代码动态修改部分属性</li>
<li>通过代码或得属性值，如当前指示点位置，颜色等</li>
<li>通过代码自定义指示点间切换动画，指示点被触摸的反馈动画及点击事件监听的回调</li>
</ul>
<h4 id="属性定义在src-main-res-values-attrs-xml文件中。"><a href="#属性定义在src-main-res-values-attrs-xml文件中。" class="headerlink" title="属性定义在src/main/res/values/attrs.xml文件中。"></a>属性定义在<code>src/main/res/values/attrs.xml</code>文件中。</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"lineColor"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span> <span class="comment">&lt;!--线条颜色 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"lineVisible"</span> <span class="attr">format</span>=<span class="string">"boolean"</span> /&gt;</span> <span class="comment">&lt;!--线条是否可见 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"lineWidth"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span> <span class="comment">&lt;!--线条长度 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"lineHeight"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span> <span class="comment">&lt;!--线条高度 --&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"dotSize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span> <span class="comment">&lt;!--小圆点大小 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"dotNum"</span> <span class="attr">format</span>=<span class="string">"integer"</span>/&gt;</span> <span class="comment">&lt;!--小圆点个数 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"dotColor"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span> <span class="comment">&lt;!--小圆点颜色 --&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"indicatorColor"</span> <span class="attr">format</span>=<span class="string">"color"</span> /&gt;</span> <span class="comment">&lt;!--指示点颜色 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"indicatorSize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span> <span class="comment">&lt;!--指示点大小 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"indicatorPos"</span> <span class="attr">format</span>=<span class="string">"integer"</span>/&gt;</span> <span class="comment">&lt;!--指示点位置 --&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"duration"</span> <span class="attr">format</span>=<span class="string">"integer"</span>/&gt;</span> <span class="comment">&lt;!--两点间移动动画时间 --&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"dotClickEnable"</span> <span class="attr">format</span>=<span class="string">"boolean"</span>/&gt;</span><span class="comment">&lt;!--小圆点点点击时是否把指示点移到点击的小圆点处，若置为false则只能通过setIndicatorPos()方法改变指示点位置--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"indicatorDragEnable"</span> <span class="attr">format</span>=<span class="string">"boolean"</span>/&gt;</span><span class="comment">&lt;!--指示点拖拽是否可用--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"touchEnable"</span> <span class="attr">format</span>=<span class="string">"boolean"</span>/&gt;</span><span class="comment">&lt;!--同时禁用小圆点点击和指示点拖拽--&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"IndicatorSwitchAnimation"</span> <span class="attr">format</span>=<span class="string">"integer"</span>&gt;</span> <span class="comment">&lt;!--使用默认提供的动画--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"translation"</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span> <span class="comment">&lt;!--平移--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"squeeze"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span><span class="comment">&lt;!--"挤扁"--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">"none"</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span> <span class="comment">&lt;!--不使用动画--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">attr</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"IndicatorView"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"dotColor"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"dotSize"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"dotNum"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"lineColor"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"lineVisible"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"lineWidth"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"lineHeight"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"indicatorColor"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"indicatorSize"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"indicatorPos"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"duration"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"IndicatorSwitchAnimation"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"dotClickEnable"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"indicatorDragEnable"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"touchEnable"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以在布局文件中直接使用：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.duan.indicatorviewdemo.IndicatorView</span></span></div><div class="line">     <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">     <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">     <span class="attr">app:IndicatorSwitchAnimation</span>=<span class="string">"squeeze"</span></div><div class="line">     <span class="attr">app:dotColor</span>=<span class="string">"#2d2b2b"</span></div><div class="line">     <span class="attr">app:dotNum</span>=<span class="string">"4"</span></div><div class="line">     <span class="attr">app:dotSize</span>=<span class="string">"10dp"</span></div><div class="line">     <span class="attr">app:duration</span>=<span class="string">"800"</span></div><div class="line">     <span class="attr">app:indicatorColor</span>=<span class="string">"#ff9500"</span></div><div class="line">     <span class="attr">app:indicatorPos</span>=<span class="string">"1"</span></div><div class="line"></div><div class="line">     <span class="attr">app:indicatorSize</span>=<span class="string">"25dp"</span></div><div class="line">     <span class="attr">app:lineColor</span>=<span class="string">"#b3b3b3"</span></div><div class="line">     <span class="attr">app:lineHeight</span>=<span class="string">"4dp"</span></div><div class="line">     <span class="attr">app:lineWidth</span>=<span class="string">"85dp"</span> /&gt;</div></pre></td></tr></table></figure>
<h4 id="来看下实现代码吧（IndicatorView-java）"><a href="#来看下实现代码吧（IndicatorView-java）" class="headerlink" title="来看下实现代码吧（IndicatorView.java）"></a>来看下实现代码吧（IndicatorView.java）</h4><h5 id="几个重要的变量的作用要先了解一下："><a href="#几个重要的变量的作用要先了解一下：" class="headerlink" title="几个重要的变量的作用要先了解一下："></a>几个重要的变量的作用要先了解一下：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">...........</div><div class="line"><span class="comment">/**</span></div><div class="line">    * 保存所有小圆点的圆点坐标，用于在touch事件中判断触摸了哪个点</div><div class="line">    */</div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span>[][] clickableAreas;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 指示点，不断修改它的属性从而实现动画（属性动画）</div><div class="line">    */</div><div class="line">   <span class="keyword">private</span> IndicatorHolder indicatorHolder;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 指示点要移动到的目标位置</div><div class="line">    */</div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> switchTo = -<span class="number">1</span>;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 手松开后根据该变量判断是否需要启动切换动画</div><div class="line">    */</div><div class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> haveIndicatorAniming = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 指示点是否被拖拽过，当指示点被拖拽了但没有超过当前指示点位置范围时使之回到原位</div><div class="line">    */</div><div class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> haveIndicatorDraged = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 保存转移动画开始时线的颜色</div><div class="line">    */</div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> tempLineColor;</div><div class="line">   .........</div></pre></td></tr></table></figure>
<h5 id="onMeasure方法"><a href="#onMeasure方法" class="headerlink" title="onMeasure方法"></a>onMeasure方法</h5><ul>
<li>在 onMeasure 方法中要把自定义 view 的宽和高计算出来。</li>
<li>如果在 xml 中指定具体的宽高值或为 match_parent 时不做计算，因为此时宽高就是指定的值或是填满父布局后的宽高。</li>
<li>当 xml 中宽高设为 warp_content 时需要进行计算<ul>
<li>计算宽度的规则：左右的内边距 + 所有 <code>线段</code> 加起来的总长度</li>
<li>计算高度的规则：上下内边距 + <code>指示点</code> 的高度。注意：使用默认的 <code>指示点</code> 触摸反馈动画时要加上高度差</li>
</ul>
</li>
<li><code>setPadding(getPaddingLeft() + mIndicatorSize / 3......</code>这一句是为了在使用默认的 <code>指示点</code> 触摸反馈动画，或是自定义动画中有使指示点放大的情况下要多留些空间给控件，否则 <code>指示点</code>放大后超出控件高度的部分就不会被绘制（不会显示）。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">        <span class="keyword">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">        <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">        <span class="keyword">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">        <span class="keyword">int</span> width;</div><div class="line">        <span class="keyword">int</span> height;</div><div class="line">        setPadding(getPaddingLeft() + mIndicatorSize / <span class="number">3</span>,getPaddingTop(),getPaddingRight() + mIndicatorSize / <span class="number">3</span>,getPaddingBottom());</div><div class="line">        <span class="keyword">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;</div><div class="line">            width = widthSize;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//xml中宽度设为warp_content</span></div><div class="line">            width = getPaddingLeft() + ((mDotCount - <span class="number">1</span>) * mLineWidth + mIndicatorSize) + getPaddingRight();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (heightMode == MeasureSpec.EXACTLY) &#123;</div><div class="line">            height = heightSize;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            height = getPaddingTop() + mIndicatorSize + getPaddingBottom();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//若使用默认的指示点触摸动画（放大+渐变颜色）需要加上放大后指示点与放大前指示点的高度差</span></div><div class="line">        <span class="comment">//使用自定义时动画时则不加</span></div><div class="line">        setMeasuredDimension(width, mPressAnimator == <span class="keyword">null</span> ? height + mIndicatorSize / <span class="number">2</span> : height);</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="onLayout方法"><a href="#onLayout方法" class="headerlink" title="onLayout方法"></a>onLayout方法</h5><p>在onLayout方法中要对 <code>indicatorHolder</code>变量进行初始化。</p>
<h6 id="关于-indicatorHolder变量：private-IndicatorHolder-indicatorHolder"><a href="#关于-indicatorHolder变量：private-IndicatorHolder-indicatorHolder" class="headerlink" title="关于 indicatorHolder变量：private IndicatorHolder indicatorHolder;"></a>关于 <code>indicatorHolder</code>变量：<code>private IndicatorHolder indicatorHolder;</code></h6><ul>
<li><code>IndicatorHolder</code> 类的实例 <code>indicatorHolder</code> 即为属性对象的<code>target</code>，控件默认定义好了三个属性动画：<ul>
<li>颜色渐变+缩放：<code>指示点</code> 的触摸反馈</li>
<li>平移+压扁+拉伸：<code>指示点</code> 切换</li>
<li>平移： <code>指示点</code> 切换</li>
</ul>
</li>
<li>自定义动画也限定只能将<code>indicatorHolder</code>作为属性动画的target来实现动画</li>
</ul>
<blockquote>
<p>上面三个动画都是通过不断修改<code>indicatorHolder</code> 的属性（调用<code>indicatorHolder</code> 的 setXXX() 而 setXXX()方法中会调用 invalidate() 重绘 view）实现动画的。具体可参见：<a href="http://blog.csdn.net/jdsjlzx/article/details/45558901" target="_blank" rel="external">ValueAnimator和ObjectAnimator的高级用法</a></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndicatorHolder</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> centerX;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> centerY;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> height;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> color;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> width;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> alpha;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAlpha</span><span class="params">(<span class="keyword">int</span> alpha)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.alpha = alpha;</div><div class="line">            invalidate();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAlpha</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> alpha;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> height)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.height = height;</div><div class="line">            invalidate();</div><div class="line">        &#125;</div><div class="line">        ...........</div></pre></td></tr></table></figure>
<p><br></p>
<ul>
<li>注意 getHeight 方法在 onMeasure 中调用的话获取到的值是不正确的，因为此时视图的高和宽还在计算。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> right, <span class="keyword">int</span> bottom)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onLayout(changed, left, top, right, bottom);</div><div class="line">    <span class="comment">//getHeight方法在onDraw方法中会取到错误的值</span></div><div class="line">    <span class="keyword">if</span> (indicatorHolder != <span class="keyword">null</span>) &#123;</div><div class="line">        indicatorHolder.setColor(mIndicatorColor);</div><div class="line">        indicatorHolder.setCenterX(mIndicatorPos * mLineWidth + getPaddingLeft() + mIndicatorSize / <span class="number">2</span>);</div><div class="line">        indicatorHolder.setCenterY(getHeight() / <span class="number">2</span>);</div><div class="line">        indicatorHolder.setHeight(mIndicatorSize);</div><div class="line">        indicatorHolder.setWidth(mIndicatorSize);</div><div class="line">        indicatorHolder.setAlpha(<span class="number">255</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="onDraw-方法"><a href="#onDraw-方法" class="headerlink" title="onDraw()方法"></a><strong><code>onDraw()</code>方法</strong></h5><p>绘制控件的关键方法<br><br>1 控件中包含多个圆，使画笔支持抗锯齿使视觉效果更好 <code>setAntiAlias(true)</code><br>2 画线的时候先判断是否设置了 <code>线段不可见</code> 属性<br>3 画 <code>小圆点</code> ，关键的一句 <code>if (switchTo != -1 &amp;&amp; i == switchTo)</code>：</p>
<ul>
<li>switchTo 的值默认为 -1 ，在 onTouchEvent 事件中会为其赋值，当 <code>小圆点</code> 被点击或 <code>指示点</code> 被拖拽<ul>
<li><code>同时被点击小圆点的位置与当前正在绘制的小圆点的位置相同</code> 或</li>
<li><code>指示点拖拽时指示点中心点（椭圆外切矩形对角线交点）所在区域（由 clickableAreas 规定的区域）  与 当前正在绘制的小圆点的位置相同</code>  时该 if 才为 true</li>
</ul>
</li>
<li>switchTo 会在 <code>animEnd()</code> 方法中被重置为 -1</li>
<li>话小圆点时为 <code>clickableAreas</code> 赋值，记录当前小圆点的圆心坐标</li>
</ul>
<p>4 画指示点：</p>
<ul>
<li>通过调用 <code>indicatorHolder</code> 的 <code>getXXX()</code>方法获得指示点的当前形态进行绘制</li>
<li>属性动画在调用了 <code>start()</code>之后会不断调用 <code>indicatorHolder</code> 的 <code>setXXX()</code>方法，同时调用 <code>invalidate</code>方法，<code>onDraw(...)</code>方法就会被不断调用，视图不断刷新，指示点、小圆点以及线段的形态就会不断改变，动画就形成了。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line"></div><div class="line">    <span class="comment">//去锯齿</span></div><div class="line">    mPaint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">    <span class="comment">//画线（如果可见）</span></div><div class="line">    <span class="keyword">if</span> (mLineVisible) &#123;</div><div class="line">        mPaint.setColor(mLineColor);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mDotCount - <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">int</span> left = getPaddingLeft() + mIndicatorSize / <span class="number">2</span> + mLineWidth * i;</div><div class="line">            <span class="keyword">int</span> top = (getHeight() - mLineHeight) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">int</span> right = getPaddingLeft() + mIndicatorSize / <span class="number">2</span> + mLineWidth * (i + <span class="number">1</span>);</div><div class="line">            <span class="keyword">int</span> bottom = (getHeight() + mLineHeight) / <span class="number">2</span>;</div><div class="line">            canvas.drawRect(left, top, right, bottom, mPaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//画小圆点</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clickableAreas.length; i++) &#123;</div><div class="line">        <span class="keyword">int</span> cx = i * mLineWidth + getPaddingLeft() + mIndicatorSize / <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> cy = getHeight() / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (switchTo != -<span class="number">1</span> &amp;&amp; i == switchTo)</div><div class="line">            mPaint.setColor(mIndicatorColor);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            mPaint.setColor(mDotColor);</div><div class="line">        canvas.drawCircle(cx, cy, mDotSize, mPaint);</div><div class="line">        clickableAreas[i][<span class="number">0</span>] = cx;</div><div class="line">        clickableAreas[i][<span class="number">1</span>] = cy;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//画指示点</span></div><div class="line">    mPaint.setColor(indicatorHolder.getColor());</div><div class="line">    mPaint.setAlpha(indicatorHolder.getAlpha());</div><div class="line">    canvas.drawOval(</div><div class="line">            indicatorHolder.getCenterX() - indicatorHolder.getWidth() / <span class="number">2</span>,</div><div class="line">            indicatorHolder.getCenterY() - indicatorHolder.getHeight() / <span class="number">2</span>,</div><div class="line">            indicatorHolder.getCenterX() + indicatorHolder.getWidth() / <span class="number">2</span>,</div><div class="line">            indicatorHolder.getCenterY() + indicatorHolder.getHeight() / <span class="number">2</span>,</div><div class="line">            mPaint</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="最后一个关键方法-onTouchEvent"><a href="#最后一个关键方法-onTouchEvent" class="headerlink" title="最后一个关键方法 onTouchEvent"></a>最后一个关键方法 <code>onTouchEvent</code></h5><p>1 <code>touchEnable</code>属性设为 false 则不需要响应触摸事件<br>2 动画正在进行时不再响应触摸事件，否则会乱套…..<br>3 <code>if (switchTo != mIndicatorPos &amp;&amp; !mDotClickEnable &amp;&amp; !haveIndicatorDraged)</code> ：</p>
<ul>
<li>点击了非指示点所在的小圆点 &amp;&amp; 不可点击 &amp;&amp; 指示点没有被拖拽：脑补一下这种情形就是——当你设置了不可点击（点击非指示点所在小圆点时不移动指示点到所点击的小圆点的位置上），但你点击了，而且点击的不是指示点所在的小圆点。此时就不要移动指示点了，因为设置了 不可点击嘛。</li>
<li>有没有疑惑为什么要加一个 <code>&amp;&amp; !haveIndicatorDraged</code>的条件？往下看…</li>
<li>之所以要加这个判断是当你设置了 <code>不可点击</code>，<code>可拖拽</code> 时，当你开始拖拽，而且拖拽位置超出当前指示点范围（<code>clickableAreas</code>规定的范围），假设此时如果只判断 <code>switchTo != mIndicatorPos &amp;&amp; !mDotClickEnable</code>，那么此时这两条件都满足，返回。那此时效果就是指示点不能拖出<code>clickableAreas</code>规定的范围，显然不满足 <code>不可点击</code>，但<code>可拖拽</code>的要求，所有还要加一个 <code>是否被拖拽过的条件</code>。</li>
</ul>
<p>4 接下来依次判断手势状态</p>
<ul>
<li>按下：按在指示点上还是其他小圆点上</li>
<li>抬起：按下的点不是当前指示点所在小圆点（按下后立刻抬起），或被拖拽过</li>
<li>挤压：手指一直与屏幕接触，这个时候就是拖拽了</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (!mTouchEnable)</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"></div><div class="line">       <span class="comment">//动画正在进行时不在响应点击事件</span></div><div class="line">       <span class="keyword">if</span> (haveIndicatorAniming)</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"></div><div class="line">       <span class="keyword">int</span> ex = (<span class="keyword">int</span>) event.getX();</div><div class="line">       <span class="keyword">int</span> temp = mLineWidth / <span class="number">2</span>;</div><div class="line">       switchTo = <span class="number">0</span>;</div><div class="line">       <span class="comment">//判断当前手指所在的小圆点是哪个</span></div><div class="line">       <span class="keyword">for</span> (; switchTo &lt; mDotCount; switchTo++) &#123;</div><div class="line">           <span class="keyword">int</span>[] xy = clickableAreas[switchTo];</div><div class="line">           <span class="comment">//只对x坐标位置进行判断，这样即使用户手指在控件外面（先在控件内触摸后不抬起而是滑到控件外面）滑动也能判断</span></div><div class="line">           <span class="keyword">if</span> (ex &lt;= xy[<span class="number">0</span>] + temp &amp;&amp; ex &gt;= xy[<span class="number">0</span>] - temp) &#123;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (switchTo != mIndicatorPos &amp;&amp; !mDotClickEnable &amp;&amp; !haveIndicatorDraged)</div><div class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">           <span class="comment">//按下且不是指示点所在的小圆点</span></div><div class="line">           <span class="keyword">if</span> (mIndicatorPos != switchTo) &#123;</div><div class="line">               startSwitchAnimation();</div><div class="line">               <span class="keyword">if</span> (mListener != <span class="keyword">null</span>)</div><div class="line">                   mListener.onDotClickChange(<span class="keyword">this</span>, switchTo);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;<span class="comment">//按下且是指示点所在的小圆点</span></div><div class="line">               <span class="keyword">if</span> (mIndicatorDragEnable)</div><div class="line">                   startPressAnimation();</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_UP) &#123; <span class="comment">//手抬起</span></div><div class="line">           <span class="keyword">if</span> (switchTo != mIndicatorPos || haveIndicatorDraged) &#123;</div><div class="line">               haveIndicatorDraged = <span class="keyword">false</span>;</div><div class="line">               <span class="keyword">if</span> (mIndicatorDragEnable)</div><div class="line">                   startSwitchAnimation();</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">else</span> &#123; <span class="comment">//按着+拖拽</span></div><div class="line">           <span class="keyword">if</span> (mIndicatorDragEnable) &#123;</div><div class="line">               haveIndicatorDraged = <span class="keyword">true</span>;</div><div class="line">               indicatorHolder.setCenterX(ex);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h5 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h5><blockquote>
<p>代码有些多又繁琐就没贴完，上传到GitHub了，可以在这里下载到源码和示例：<a href="https://github.com/DuanJiaNing/IndicatorViewDemo" target="_blank" rel="external">DuanJiaNing/IndicatorViewDemo</a></p>
</blockquote>
<ul>
<li>开始指示点触摸（挤压）动画：<code>startPressAnimation()</code></li>
<li>开始指示点切换动画： <code>startSwitchAnimation()</code></li>
<li>指示点切换动画结束或取消时重置和恢复一些变量的值：<code>animEnd()</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 指示点触摸（挤压）动画</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startPressAnimation</span><span class="params">()</span> </span>&#123;</div><div class="line">		........</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 指示点切换动画</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startSwitchAnimation</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//平移</span></div><div class="line">        <span class="keyword">int</span> startX = indicatorHolder.getCenterX();</div><div class="line">        <span class="keyword">int</span> endX = switchTo * mLineWidth + getPaddingLeft() + mIndicatorSize / <span class="number">2</span>;</div><div class="line">        ValueAnimator trainsAnim = ObjectAnimator.ofInt(indicatorHolder, <span class="string">"centerX"</span>, startX, endX);</div><div class="line">        trainsAnim.setDuration(mDuration);</div><div class="line"></div><div class="line">        tempLineColor = mLineColor;</div><div class="line">        AnimatorSet defaultIndicatorSwitchAnim = <span class="keyword">new</span> AnimatorSet();</div><div class="line">        defaultIndicatorSwitchAnim.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">                mLineColor = indicatorHolder.getColor();</div><div class="line">                haveIndicatorAniming = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">                animEnd();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">                animEnd();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mSwitchAnimator == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">switch</span> (mIndicatorSwitchAnim) &#123;</div><div class="line">                <span class="keyword">case</span> INDICATOR_SWITCH_ANIM_NONE:</div><div class="line">                    indicatorHolder.setCenterX(endX);</div><div class="line">                    animEnd();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> INDICATOR_SWITCH_ANIM_SQUEEZE:</div><div class="line">                    <span class="comment">//“挤扁”</span></div><div class="line">                    <span class="keyword">int</span> centerH = mLineHeight * Math.abs(switchTo - mIndicatorPos);</div><div class="line">                    <span class="keyword">int</span> centerW = Math.abs(indicatorHolder.getCenterX() - clickableAreas[switchTo][<span class="number">0</span>]);</div><div class="line">                    ValueAnimator heightAnim = ObjectAnimator.ofInt(indicatorHolder, <span class="string">"height"</span>, mIndicatorSize, centerH, <span class="number">0</span>);</div><div class="line">                    ValueAnimator widthAnim = ObjectAnimator.ofInt(indicatorHolder, <span class="string">"width"</span>, mIndicatorSize, centerW, <span class="number">0</span>);</div><div class="line">                    heightAnim.setDuration(mDuration);</div><div class="line">                    widthAnim.setDuration(mDuration);</div><div class="line"></div><div class="line">                    <span class="comment">//缩放</span></div><div class="line">                    ValueAnimator scaleAnimH = ObjectAnimator.ofInt(indicatorHolder, <span class="string">"height"</span>, mDotSize, mIndicatorSize);</div><div class="line">                    ValueAnimator scaleAnimW = ObjectAnimator.ofInt(indicatorHolder, <span class="string">"width"</span>, mDotSize, mIndicatorSize);</div><div class="line">                    AnimatorSet scaleSet = <span class="keyword">new</span> AnimatorSet();</div><div class="line">                    scaleSet.play(scaleAnimH).with(scaleAnimW);</div><div class="line">                    scaleSet.setDuration(<span class="number">500</span>);</div><div class="line"></div><div class="line">                    defaultIndicatorSwitchAnim.play(trainsAnim).with(heightAnim).with(widthAnim);</div><div class="line">                    defaultIndicatorSwitchAnim.play(scaleSet).after(trainsAnim);</div><div class="line">                    defaultIndicatorSwitchAnim.start();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> INDICATOR_SWITCH_ANIM_TRANSLATION:</div><div class="line">                    defaultIndicatorSwitchAnim.play(trainsAnim);</div><div class="line">                    defaultIndicatorSwitchAnim.start();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//自定义</span></div><div class="line">            tempLineColor = mLineColor;</div><div class="line">            AnimatorSet customAnim = mSwitchAnimator.onIndicatorSwitch(<span class="keyword">this</span>, indicatorHolder);</div><div class="line">            customAnim.play(trainsAnim);</div><div class="line">            customAnim.addListener(<span class="keyword">new</span> Animator.AnimatorListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">                    mLineColor = indicatorHolder.getColor();</div><div class="line">                    haveIndicatorAniming = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">                    animEnd();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line">                    animEnd();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationRepeat</span><span class="params">(Animator animation)</span> </span>&#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            customAnim.start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 指示点切换动画结束或取消时重置和恢复一些变量的值</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">animEnd</span><span class="params">()</span> </span>&#123;</div><div class="line">        mLineColor = tempLineColor;</div><div class="line">        mIndicatorPos = switchTo;</div><div class="line">        switchTo = -<span class="number">1</span>;</div><div class="line">        haveIndicatorAniming = <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="在Activity中设置自定义动画和点击事件监听以及一些属性的修改和获取"><a href="#在Activity中设置自定义动画和点击事件监听以及一些属性的修改和获取" class="headerlink" title="在Activity中设置自定义动画和点击事件监听以及一些属性的修改和获取"></a>在Activity中设置自定义动画和点击事件监听以及一些属性的修改和获取</h5><p><a href="https://github.com/DuanJiaNing/IndicatorViewDemo" target="_blank" rel="external">DuanJiaNing/IndicatorViewDemo</a> 中示例Activity的位置：<br><code>\src\main\java\com\duan\indicatorviewdemo\MainActivity.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> IndicatorView indicator;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        indicator = (IndicatorView) findViewById(R.id.indicator);</div><div class="line">        </div><div class="line">        indicator.setOnDotClickListener((View v, <span class="keyword">int</span> position) -&gt; Toast.makeText(<span class="keyword">this</span>, <span class="string">"点击了 "</span> + position, Toast.LENGTH_SHORT).show());</div><div class="line">        indicator.setOnIndicatorSwitchAnimator((IndicatorView view, IndicatorView.IndicatorHolder target) -&gt; &#123;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> terminalColor = indicator.getIndicatorColor();</div><div class="line">            <span class="keyword">int</span> centerColor = indicator.getDotColor();</div><div class="line">            ValueAnimator colorAnim = ObjectAnimator.ofArgb(target, <span class="string">"color"</span>, terminalColor, centerColor, terminalColor);</div><div class="line"></div><div class="line">            <span class="keyword">int</span> terminalSize = indicator.getIndicatorPixeSize();</div><div class="line">            <span class="keyword">int</span> centerSize = indicator.getIndicatorPixeSize() * <span class="number">3</span> / <span class="number">2</span>;</div><div class="line">            ValueAnimator animatorH = ObjectAnimator.ofInt(target, <span class="string">"height"</span>, terminalSize, centerSize, terminalSize);</div><div class="line">            ValueAnimator animatorW = ObjectAnimator.ofInt(target, <span class="string">"width"</span>, terminalSize, centerSize, terminalSize);</div><div class="line"></div><div class="line">            AnimatorSet set = <span class="keyword">new</span> AnimatorSet();</div><div class="line">            set.play(colorAnim).with(animatorH).with(animatorW);</div><div class="line">            set.setDuration(<span class="number">500</span>);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> set;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//indicator1.setIndicatorSwitchAnim(random.nextInt(IndicatorView.INDICATOR_SWITCH_ANIM_TRANSLATION);</span></div><div class="line">        ...</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ul>
<li>自定义属性的使用，在构造方法中用<code>context.getTheme().obtainStyledAttributes(...)</code>方法获取</li>
<li><code>onMeasure()</code>方法中对宽高的计算</li>
<li><code>onDraw</code>绘制圆、矩形、椭圆时坐标的确定</li>
<li>重写触摸事件时对各种状态的判断</li>
<li><code>animEnd</code>：动画结束或取消时重置和恢复一些变量的值</li>
<li>即使设置<code>lineVisible</code>为 false ，也要为<code>lineWidth</code>赋值，当然也可以使用默认的，因为<code>lineWidth</code>是<code>onMeasure</code>方法计算控件<code>width</code>的重要变量。</li>
<li>调用<code>setOnIndicatorSwitchAnimator</code>或<code>setOnIndicatorPressAnimator</code>自定义动画时，要将定义好的<code>AnimatorSet</code>动画作为返回值返回，由控件控制动画在何时播放和添加监听事件。</li>
</ul>
<hr>
<p>你可以为<code>IndicatorHodler</code>添加更多属性并修改<code>onDraw()</code>方法以实现更丰富的动画<br>源码和示例已上传GitHub，可以在这里下载到：<a href="https://github.com/DuanJiaNing/IndicatorViewDemo" target="_blank" rel="external">DuanJiaNing/IndicatorViewDemo</a></p>
<font size="2" color="#a8a8a8">觉得还不错的话就给颗star吧&gt;.&lt;</font>

<center><b><i>END</i></b> </center>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 自定义View </tag>
            
            <tag> 属性动画 </tag>
            
            <tag> 圆点指示器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网易2017春招笔试真题编程题集合 —— 4.消除重复元素]]></title>
      <url>/2017/03/29/%E7%BD%91%E6%98%932017%E6%98%A5%E6%8B%9B%E7%AC%94%E8%AF%95%E7%9C%9F%E9%A2%98%E7%BC%96%E7%A8%8B%E9%A2%98%E9%9B%86%E5%90%88%E2%80%94%E2%80%944.%E6%B6%88%E9%99%A4%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</url>
      <content type="html"><![CDATA[<p>###网易2017春招笔试真题编程题集合——4.消除重复元素</p>
<h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><blockquote>
<p>小易有一个长度为n序列，小易想移除掉里面的重复元素，但是小易想是对于每种元素保留最后出现的那个。小易遇到了困难,希望你来帮助他。 </p>
</blockquote>
<p>原题地址 <a href="https://www.nowcoder.com/question/next?pid=4575457&amp;qid=83061&amp;tid=7519540" target="_blank" rel="external">在这</a></p>
<h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h4><blockquote>
<p>输入包括两行：<br>第一行为序列长度n(1 ≤ n ≤ 50)<br>第二行为n个数sequence<a href="1 ≤ sequence[i] ≤ 1000">i</a>，以空格分隔</p>
</blockquote>
<h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h4><blockquote>
<p>输出消除重复元素之后的序列，以空格分隔，行末无空格</p>
</blockquote>
<h4 id="输入例子"><a href="#输入例子" class="headerlink" title="输入例子:"></a>输入例子:</h4><blockquote>
<p>9<br>100 100 100 99 99 99 100 100 100</p>
</blockquote>
<h4 id="输出例子"><a href="#输出例子" class="headerlink" title="输出例子:"></a>输出例子:</h4><blockquote>
<p>99 100</p>
</blockquote>
<h4 id="用java编写，思路是这样的："><a href="#用java编写，思路是这样的：" class="headerlink" title="用java编写，思路是这样的："></a>用java编写，思路是这样的：</h4><ul>
<li>使用Scanner接收控制台输入</li>
<li>难点应该是要求中的<code>对于每种元素保留最后出现的那个</code>这一句：<ul>
<li>像出现如下情况时：100 100 99 11 11 11，移除重复元素必然是：100 99 11</li>
<li>而若出现这种情况：100 100 100 99 99 99 100 100 100，为满足 <code>对于每种元素保留最后出现的那个</code> 这一要求，三个99前后都出现了100，这时只能保留99后面的100，即 <code>99 100</code>；</li>
</ul>
</li>
<li>只需<strong>从后往前</strong>遍历给定的数组即可满足<code>对于每种元素保留最后出现的那个</code>这一要求，用一个<code>ArrayList</code>保存合并重复元素后的集合，每往前遍历一个元素先判断该元素是否已经存在集合中，不存在就添加到集合中。</li>
<li>遍历结束要将集合<strong>倒序</strong>输出，因为遍历的时候对目标数组的遍历是从后往前的，加入到集合的顺序也是从后往前的，而输出时应该<strong>从前往后</strong>输出。</li>
</ul>
<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">int</span> count = scanner.nextInt();</div><div class="line">        scanner.nextLine();</div><div class="line">        String sou = scanner.nextLine();</div><div class="line">        String[] strs = sou.split(<span class="string">" "</span>);</div><div class="line">        <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[count];</div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (String s : strs) &#123;</div><div class="line">            nums[i++] = Integer.parseInt(s);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = nums.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">if</span> (!list.contains(nums[j]))</div><div class="line">                list.add(i++, nums[j]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = list.size() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            String out = j == <span class="number">0</span> ? list.get(j) + <span class="string">""</span> : list.get(j) + <span class="string">" "</span>;</div><div class="line">            System.out.print(out);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="提交运行提示通过所有测试用例："><a href="#提交运行提示通过所有测试用例：" class="headerlink" title="提交运行提示通过所有测试用例："></a>提交运行提示通过所有测试用例：</h4><p><img src="http://img.blog.csdn.net/20170329133939169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul>
<li>调用<code>Arraylist</code>的<code>boolean contains(Object o)</code>方法判断集合中是否已经包含某一元素一简化代码</li>
</ul>
<center><u><b><em>END</em></b></u></center>]]></content>
      
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网易2017春招笔试真题编程题集合 —— 9.涂棋盘]]></title>
      <url>/2017/03/27/%E7%BD%91%E6%98%932017%E6%98%A5%E6%8B%9B%E7%AC%94%E8%AF%95%E7%9C%9F%E9%A2%98%E7%BC%96%E7%A8%8B%E9%A2%98%E9%9B%86%E5%90%88%E2%80%94%E2%80%949.%E6%B6%82%E6%A3%8B%E7%9B%98/</url>
      <content type="html"><![CDATA[<h3 id="网易2017春招笔试真题编程题集合——9-涂棋盘"><a href="#网易2017春招笔试真题编程题集合——9-涂棋盘" class="headerlink" title="网易2017春招笔试真题编程题集合——9.涂棋盘"></a>网易2017春招笔试真题编程题集合——<strong>9.涂棋盘</strong></h3><h4 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h4><blockquote>
<p>小易有一块n*n的棋盘，棋盘的每一个格子都为黑色或者白色，小易现在要用他喜欢的红色去涂画棋盘。小易会找出棋盘中某一列中拥有相同颜色的最大的区域去涂画，帮助小易算算他会涂画多少个棋格。 </p>
</blockquote>
<p>原题地址在这里：<a href="https://www.nowcoder.com/question/next?pid=4575457&amp;qid=83061&amp;tid=7519540" target="_blank" rel="external">牛客网</a></p>
<p>输入描述：</p>
<blockquote>
<ul>
<li>输入数据包括n+1行：</li>
<li>第一行为一个整数n(1 ≤ n ≤ 50),即棋盘的大小</li>
<li>接下来的n行每行一个字符串表示第i行棋盘的颜色，’W’表示白色，’B’表示黑色</li>
</ul>
</blockquote>
<p>输出描述：</p>
<blockquote>
<p>输出小易会涂画的区域大小</p>
</blockquote>
<p>输入例子：</p>
<blockquote>
<p>3<br>BWW<br>BBB<br>BWB</p>
</blockquote>
<p>输出例子</p>
<blockquote>
<p>3</p>
</blockquote>
<h4 id="用java编写，思路是这样的："><a href="#用java编写，思路是这样的：" class="headerlink" title="用java编写，思路是这样的："></a>用java编写，思路是这样的：</h4><p>1 使用<code>java.util.Scanner</code>接收控制台输入<br>2 定义两个变量<code>int iw,ib</code>和一个数组<code>int[] maxs</code>: </p>
<ul>
<li><code>iw</code>用于累加当前列 <strong>W</strong> 连续出现的次数</li>
<li><code>ib</code>用于累加当前列 <strong>B</strong> 连续出现的次数</li>
<li><code>maxs</code> 数组用于记录每一列出现的<em>拥有相同颜色的最大的区域</em>（即在一列中出现 连续的相同颜色的<em>单元格</em> 的最大个数）</li>
<li><strong>遍历（双层循环）保存了W/B的二维数组，在内层循环里判断当前 <em>单元格</em> 的值是 W 还是 B ，是 W 的话：</strong><ul>
<li><strong>先 让负责记录当前列中 W 连续出现次数的 iw 自增1</strong></li>
<li><strong>后 判断用于记录当前列出现 <em>“拥有相同颜色的最大的区域”</em> 的 maxs[i]的值是否小于此时的 iw ，是则把 iw 的值赋给他，否则不改变他的值 </strong></li>
<li><strong>最后 让负责记录当前列中 B 连续出现次数的 ib 置为0，因为此时遇到了 W ，即 B 不连续了，被 W 打断了</strong></li>
</ul>
</li>
<li><strong>遇到 B 也是同样的操作：ib 自增1，判断当前的 maxs[i] ，把 iw 置为0；</strong>    </li>
<li>注意在开始遍历每一列前（外层循环内）要把 iw , ib ,maxs[i]置为0；</li>
</ul>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.Scanner;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">int</span> n = in.nextInt();</div><div class="line">        <span class="keyword">if</span> (!(n &gt;= <span class="number">1</span> &amp;&amp; n &lt;= <span class="number">50</span>))</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        in.nextLine();</div><div class="line">        <span class="keyword">char</span>[][] res = <span class="keyword">new</span> <span class="keyword">char</span>[n][n];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            String str = in.nextLine();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">                res[i][j] = str.charAt(j);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> iw = <span class="number">0</span>, ib = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span>[] maxs= <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            maxs[i] = <span class="number">0</span>;</div><div class="line">            iw = ib = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (res[j][i] == <span class="string">'W'</span>) &#123;</div><div class="line">                    iw++;</div><div class="line">                    maxs[i] = iw &gt; maxs[i] ? iw : maxs[i];</div><div class="line">                    ib = <span class="number">0</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    ib++;</div><div class="line">                    maxs[i] = ib &gt; maxs[i] ? ib : maxs[i];</div><div class="line">                    iw = <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        Arrays.sort(maxs);</div><div class="line">        System.out.println(<span class="string">""</span>+maxs[maxs.length - <span class="number">1</span>]);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>提交运行</em> 之后就会提示通过所有测试用例：<br><img src="http://img.blog.csdn.net/20170327220859483?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><ul>
<li>在使用 Scanner 接收控制台输入时先调用了 <code>int nextInt()</code> 方法，程序运行到该句时会阻塞，等待控制台输入并按回车，之后该方法就会返回输入的 int 值，别忘了此时还有一个  <em>回车符</em>  没有被解析，先要调用 <code>String nextLine()</code>把 <em>回车符</em>  消耗掉，否则在之后调用 <code>String nextLine()</code>获取输入的 W/B 时会出错。</li>
<li>调用<code>Arrays</code>类的<code>void sort(int[] a)</code>方法对 <code>maxs</code>数组进行排序（升序），输出<br><code>maxs[maxs.length - 1]</code>即为所求。</li>
</ul>
<center><u><b><em>END</em></b></u></center>]]></content>
      
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android：用WebView开发简单的浏览器]]></title>
      <url>/2017/03/26/Android-%E7%94%A8WebView%E5%BC%80%E5%8F%91%E7%AE%80%E5%8D%95%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
      <content type="html"><![CDATA[<h3 id="Android-用WebView开发简单的浏览器"><a href="#Android-用WebView开发简单的浏览器" class="headerlink" title="Android-用WebView开发简单的浏览器"></a>Android-用WebView开发简单的浏览器</h3><p>Android 提供了 WebView 组件，WebView 本身就是一个浏览器实现。</p>
<h3 id="例子中主要用到了-WebView-的以下方法："><a href="#例子中主要用到了-WebView-的以下方法：" class="headerlink" title="例子中主要用到了 WebView 的以下方法："></a>例子中主要用到了 WebView 的以下方法：</h3><ul>
<li>void loadUrl(String url) 加载指定 url 对应的网页</li>
<li>void goBack() 后退</li>
<li>void goForward() 前进</li>
<li>boolean canGoBack() 根据<code>历史记录</code>判断是否可以回退</li>
<li>boolean canGoForward() 根据<code>历史记录</code>判断是否可以前进</li>
<li>WebSettings getSettings() 获得对 WebView 进行控制的 WebSettings 对象<br>（调用其<code>setJavaScriptEnabled</code>方法使<code>WebView</code>支持<code>JavaScript</code>）</li>
<li>void setWebViewClient(WebViewClient client) WebViewClient 负责处理<br>WebView 各种通知，请求，比如页面开始加载及加载完成、资源加载中、url已打开等</li>
<li>void setWebChromeClient(WebChromeClient client) WebChromeClient主要辅助WebView处理Javascript的对话框、网站图标、网站title、<strong>加载进度</strong>等</li>
</ul>
<h3 id="浏览器功能概述："><a href="#浏览器功能概述：" class="headerlink" title="浏览器功能概述："></a>浏览器功能概述：</h3><ol>
<li>第一次打开应用时默认会把<code>百度</code>设置为首页，可通过底部<code>主页</code>按钮跳转到主页，或通过长按弹出对话框修改主页</li>
<li><code>主页</code>的 URL 地址使用<code>SharedPreference</code>保存</li>
<li>底部四个<code>ImageButton</code>从做往右依次为<code>主页</code> <code>刷新</code> <code>回退</code> <code>前进</code></li>
<li>顶部的<code>ActionBar</code>用<code>void setCustomView(View)</code>添加了一个自定义的用于<code>输入网址</code>的输入框和一个<code>转到</code>按钮，<code>转到</code>按钮默认是不可见且不可用的，当点击了用于<code>输入网址</code>的<code>EditText</code>就会显示并可用。</li>
<li>用于显示网页加载进度的<code>ProgressBar</code></li>
</ol>
<h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><p><img src="http://img.blog.csdn.net/20170326211407503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h3 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h3><ul>
<li>每次打开一个网页时会调用该方法，在这里控制<code>ActionBar</code>内的<code>Edittext</code>显示<code>加载中...</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageStarted</span><span class="params">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>.onPageStarted(view, url, favicon);</div><div class="line">                mShowTitle.setText(<span class="string">"加载中..."</span>);</div><div class="line">            &#125;</div><div class="line">            ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>覆写<code>shouldOverrideUrlLoading</code>并返回<code>true</code>，否则 WebView 默认会调用系统的浏览器或第三方浏览器，而不使用当前activity中的<code>WebView</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</div><div class="line">			...</div><div class="line">			<span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">                view.loadUrl(url);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">		    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>当网页加载进度改变时会回调<code>onProgressChanged</code>方法，在这里更新用于显示进度的<code>ProgressBar</code>。注意<code>newProgress</code>值为 0 到 100 ，因而将<code>ProgressBar</code>最大值设为 100 。</li>
<li><p><code>onReceivedTitle</code>返回当前加载网页的标题将标题显示在 actionBar 内的 EditText 上。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">mWebView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(WebView view, <span class="keyword">int</span> newProgress)</span> </span>&#123;</div><div class="line">                mProgressBar.setProgress(newProgress);</div><div class="line">                <span class="keyword">if</span> (newProgress == <span class="number">100</span>) &#123;</div><div class="line">                    mProgressBar.postDelayed(() -&gt; mProgressBar.setProgress(<span class="number">0</span>), <span class="number">2000</span>);</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceivedTitle</span><span class="params">(WebView view, String title)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>.onReceivedTitle(view, title);</div><div class="line">                currentUrlTitle = title;</div><div class="line">                mShowTitle.setText(currentUrlTitle);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>监听物理按键<code>返回</code>的点击事件，如果<code>WebView</code>的<code>历史记录</code>里有上一页相关记录就调用<code>void goBack()</code>方法</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mWebView.canGoBack())</div><div class="line">            mWebView.goBack();</div><div class="line">        <span class="keyword">else</span> finish();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>判断当前是否处于正在输入网址（actionBar上的 EditText）的状态<br>1 是的话调用此方法表示输入结束从使<code>转到</code>按钮消失并不可用<br>2 使<code>EditText</code>控件失去焦点，不然会一直显示光标，效果不好</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">finishEdit</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isEditFocus) &#123;</div><div class="line">            isEditFocus = <span class="keyword">false</span>;</div><div class="line">            mShowTitle.clearFocus();</div><div class="line"></div><div class="line">            Animation animation = AnimationUtils.loadAnimation(MainActivity.<span class="keyword">this</span>, android.R.anim.fade_out);</div><div class="line">            animation.setFillAfter(<span class="keyword">true</span>);</div><div class="line">            mLoadUrl.startAnimation(animation);</div><div class="line">            mLoadUrl.setEnabled(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">            mShowTitle.setText(currentUrlTitle);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这个方法有三个地方调用到：<br>1 当正在输入网址时用户转移注意力到<code>WebView</code>上，并触摸到<code>WebView</code>，此时会先判断软键盘是否正在显示，正在显示就关闭软键盘然后使输入框失去焦点并隐藏<code>转到</code>按钮</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mWebView.setOnTouchListener((View view, MotionEvent event) -&gt; &#123;</div><div class="line">      <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">          finishEdit();</div><div class="line">          InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);</div><div class="line">          <span class="keyword">if</span> (imm.isActive())</div><div class="line">              imm.hideSoftInputFromWindow(mShowTitle.getWindowToken(),<span class="number">0</span>);</div><div class="line"></div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<p>2 当<strong>正在输入</strong>网址时点击了物理按键<code>返回</code>,此时<code>void onBackPressed()</code>方法是不会被调用的，因为此时软键盘正在显示，调用<code>boolean dispatchKeyEvent(KeyEvent event)</code>方法拦截<code>返回</code>按键的点击事件，关闭软键盘的同时使输入框失去焦点并隐藏<code>转到</code>按钮。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchKeyEvent</span><span class="params">(KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (event.getKeyCode() == KeyEvent.KEYCODE_BACK)</div><div class="line">            finishEdit();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.dispatchKeyEvent(event);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>3  点击了 actionBar 处的<code>转到</code>按钮<br>3.1 此时要先判断是否正确输入，然后判断输入网址是否是新的（和当前正在显示的网页的网址不同），满足就让<code>WebView</code>加载该网页<br>3.2 判断软键盘是否正在显示，正在显示就关闭软键盘然后使输入框失去焦点并隐藏<code>转到</code>按钮</p>
<blockquote>
<p>以下代码包含所有按钮的点击事件，每个按钮都在xml中添加了<br><code>android:onClick=&quot;onClick&quot;</code>属性</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">       <span class="keyword">switch</span> (view.getId()) &#123;</div><div class="line">           <span class="keyword">case</span> R.id.main_goBack:</div><div class="line">               <span class="keyword">if</span> (mWebView.canGoBack())</div><div class="line">                   mWebView.goBack();</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> R.id.main_goForward:</div><div class="line">               <span class="keyword">if</span> (mWebView.canGoForward())</div><div class="line">                   mWebView.goForward();</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> R.id.main_refresh:</div><div class="line">               mWebView.loadUrl(currentUrl);</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> R.id.actionBar_goto:</div><div class="line">               String url = mShowTitle.getText().toString() == <span class="string">""</span> ? <span class="keyword">null</span> : mShowTitle.getText().toString().equals(currentUrl) ? <span class="keyword">null</span> : mShowTitle.getText().toString();</div><div class="line">               <span class="keyword">if</span> (url != <span class="keyword">null</span>)</div><div class="line">                   mWebView.loadUrl(url);</div><div class="line"></div><div class="line">               InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);</div><div class="line">               <span class="keyword">if</span> (imm.isActive())</div><div class="line">                   imm.hideSoftInputFromWindow(mShowTitle.getWindowToken(),<span class="number">0</span>);</div><div class="line"></div><div class="line">               finishEdit();</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> R.id.main_home:</div><div class="line">               <span class="keyword">if</span> (!currentUrl.equals(homeUrl))</div><div class="line">                   mWebView.loadUrl(homeUrl);</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="值得注意的地方："><a href="#值得注意的地方：" class="headerlink" title="值得注意的地方："></a>值得注意的地方：</h3><ul>
<li><p>在style中使用<code>colorControlHighlight</code>属性改变默认的按钮点击波纹效果的颜色<br>比如这样：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorControlHighlight"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在按钮的xml属性中通过设置</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">style=`"@style/Base.Widget.AppCompat.Button.Borderless.Colored"</div></pre></td></tr></table></figure>
<p>使按钮的点击效果不受布局边界限制。其他默认不可点击的view（如EditText，TextView等）还要在添加一个：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:clickable="true"</div></pre></td></tr></table></figure>
<ul>
<li>使用到的图标在这里下载的：<a href="https://material.io/icons/" target="_blank" rel="external">Material icons - Material Design</a></li>
<li>调用<code>ActionBar</code>的<code>setCustomView</code>方法前先要调用<code>setDisplayShowCustomEnabled</code>方法并置为true。</li>
<li>修改主页用到了对话框：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AlertDialog.Builder builder</div><div class="line"> .setTitle(<span class="string">"修改主页"</span>)</div><div class="line">    .setNegativeButton(<span class="string">"取消"</span>, (DialogInterface dialog, <span class="keyword">int</span> which) -&gt; dialog.dismiss())</div></pre></td></tr></table></figure>
<p>这里本来是用<code>new DialogInterface.OnClickListener() {...}</code>的形式写的，后来改成使用<code>Lambda</code>的方式，这时要在app的<code>build.gradle</code>里加上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">        jackOptions &#123;</div><div class="line">            enabled true</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    compileOptions &#123;</div><div class="line">        targetCompatibility 1.8</div><div class="line">        sourceCompatibility 1.8</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<center><u><b><em>END</em></b></u></center>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> WebView </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android：Activity 的生命周期常用方法概述]]></title>
      <url>/2017/03/22/Android-Activity-%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<p>Android-activity的生命周期常用方法概述</p>
<h4 id="activity生命周期"><a href="#activity生命周期" class="headerlink" title="activity生命周期"></a>activity生命周期</h4><ol>
<li>activity大致会经过如下四种状态</li>
</ol>
<ul>
<li>运行状态：当前activity位于前台，用户可见，可以获得焦点</li>
<li>暂停状态：其他activity位于前台，该activity依然可见，但不能获得焦点</li>
<li>停止状态：当前activity不可见，失去焦点</li>
</ul>
<ol>
<li>activity生命周期的常用方法</li>
</ol>
<p>#####1.onCreate：</p>
<p>在activity的生命周期中这个方法是创建activity后第一个被系统调用的方<br>法。该方法只会调用一次。<br><code>Bundle savedInstanceState</code>：Bundle类型的数据类似<code>Map</code>，以<code>key-value</code>的<br>形式存储数据。</p>
<blockquote>
<p>If the activity is being re-initialized after previously being shut down then this Bundle contains the data it most recently supplied in onSaveInstanceState(Bundle). Note: Otherwise it is null.<br><br></p>
</blockquote>
<p>如果活动在先前被关闭之后被重新初始化，那么该Bundle包含最近在<br>onSaveInstanceState（Bundle）中提供的数据。 注意：否则为null。</p>
<p><code>savedInstanceState</code>参数的来源是activity生命周期的<code>onSaveInstanceState</code>方法<br>那<font color="red">活动在先前被关闭之后被重新初始化</font>指的是那些情况呢？</p>
<ul>
<li>手机屏幕从竖屏切换成横屏或横屏切换成竖屏</li>
<li>程序从全屏显示切换为分屏显示的时候，回切也会调用<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="API-21-加入的三个重载方法"><a href="#API-21-加入的三个重载方法" class="headerlink" title="API 21 加入的三个重载方法"></a>API 21 加入的三个重载方法</h5><p>API 21 为activity新增了一个属性<code>android:persistableMode</code>，将该属性设置<br>为<code>persistAcrossReboots</code>activity就具有持久化的能力，另外需要配合一个新<br>的Bundle<code>PersistableBundle</code>来保存数据。</p>
<ul>
<li>API 21 之前的<code>onRestoreInstanceState</code>,<code>onSaveInstanceState</code>,<code>onCreate</code>内的Bundle是在用户按下HOME键，返回键以及切换横竖屏等操作后回调<code>onSaveInstanceState</code>来操作交换的，而API 21 之后的这三个方法内的<code>PersistableBundle</code>则是针对<strong>系统关机重启</strong>的情况。<a href="http://blog.csdn.net/lincyang/article/details/45287599" target="_blank" rel="external">参考</a><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(Bundle outState, PersistableBundle outPersistentState)</span></span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRestoreInstanceState</span><span class="params">(Bundle savedInstanceState, PersistableBundle persistentState)</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState, PersistableBundle persistentState)</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="2-onStart"><a href="#2-onStart" class="headerlink" title="2.onStart"></a>2.onStart</h5><blockquote>
<p>Called after onCreate — or after onRestart when the activity had been stopped, but is now again being displayed to the user. It will be followed by onResume.Derived classes must call through to the super class’s implementation of this method. If they do not, an exception will be thrown.<br></p>
</blockquote>
<ul>
<li>在onCreate方法后调用</li>
<li>当activity调用了onStop方法后（该activity已不可见）用户再次打开（回</li>
<li>到）该activity时调用onRestart，之后就会后调用onStart方法</li>
<li>在衍生类（子类）的该方法中必须调用父类的onStart()方法，否则就会<br>抛出异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onStart();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-onResume"><a href="#3-onResume" class="headerlink" title="3.onResume"></a>3.onResume</h5><blockquote>
<p>Called after onRestoreInstanceState, onRestart, or onPause, for your activity to start interacting with the user. This is a good place to begin animations, open exclusive-access devices (such as the camera), etc.Keep in mind that onResume is not the best indicator that your activity is visible to the user; a system window such as the keyguard may be in front. Use onWindowFocusChanged to know for certain that your activity is visible to the user (for example, to resume a game).Derived classes must call through to the super class’s implementation of this method. If they do not, an exception will be thrown.</p>
</blockquote>
<ul>
<li>在onRestoreInstanceState, onRestart, or onPause后都有可能调用，调用此方法表示应用可以与用户进行交互。</li>
<li>在这里开始动画，打开独占设备（比如相机）等</li>
<li>注意此方法不是判断你的activity是否对用户可见的最佳指标，诸如软键盘，对话框等可能在你的activity的前面</li>
<li>使用onWindowFocusChanged 来确定activity对用户可见（比如在恢复游戏时）</li>
<li>在衍生类（子类）的该方法中必须调用父类的onResume()方法，否则就会抛出异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onResume();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="4-onPause"><a href="#4-onPause" class="headerlink" title="4.onPause"></a>4.onPause</h5><blockquote>
<p>Called as part of the activity lifecycle when an activity is going into the background, but has not (yet) been killed. The counterpart to onResume.When activity B is launched in front of activity A, this callback will be invoked on A. B will not be created until A’s onPause returns, so be sure to not do anything lengthy here.This callback is mostly used for saving any persistent state the activity is editing, to present a “edit in place” model to the user and making sure nothing is lost if there are not enough resources to start the new activity without first killing this one. This is also a good place to do things like stop animations and other things that consume a noticeable amount of CPU in order to make the switch to the next activity as fast as possible, or to close resources that are exclusive access such as the camera.In situations where the system needs more memory it may kill paused processes to reclaim resources. Because of this, you should be sure that all of your state is saved by the time you return from this function. In general onSaveInstanceState is used to save per-instance state in the activity and this method is used to store global persistent data (in content providers, files, etc.)After receiving this call you will usually receive a following call to onStop (after the next activity has been resumed and displayed), however in some cases there will be a direct call back to onResume without going through the stopped state.Derived classes must call through to the super class’s implementation of this method. If they do not, an exception will be thrown.<br></p>
</blockquote>
<ul>
<li>当activity进入后台但activity没有（还没）被杀死时会调用此方法。</li>
<li>当activity A 处于可见状态，此时你打开了activity B ，这时activity A 的onPause方法会被调用。<strong>activity B </strong>将不会被创建直到A的onPause方法返回，所以不要在这里进行耗时操作。</li>
<li>这个回调方法大多用于保存正在编辑的任何持续性状态，向用户展现当前进行的编辑正常结束的状态，确保当出现<strong>不杀死当前的activity是没有足够资源启动新的activity的</strong>的情况时不会丢失用户正在编辑的数据。</li>
<li>在此停止动画和其他对CPU消耗较大的事情，或者关闭独占资源（相机等），以便更快的切换到另一个activity</li>
<li>在系统需要更多资源分配给其他更高优先级的应用时可能会杀死已暂停的进程以回收资源。因此要确保这个函数返回时要尽快的把程序的状态保存下来，而<code>onSaveInstanceState</code>就是负责这个的。所以可以覆写<code>onSaveInstanceState</code>来保存你自己的程序状态。</li>
<li>此方法调用后通常会调用onStop方法，但一些情况下也会直接调用onResume而不执行onStop进入停止状态</li>
<li>在衍生类（子类）的该方法中必须调用父类的onResume()方法，否则就会抛出异常<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onPause();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="5-onStop"><a href="#5-onStop" class="headerlink" title="5.onStop"></a>5.onStop</h5><blockquote>
<p>Called when you are no longer visible to the user. You will next receive either onRestart, onDestroy, or nothing, depending on later user activity.Derived classes must call through to the super class’s implementation of this method. If they do not, an exception will be thrown.</p>
</blockquote>
<ul>
<li>当activity不可见时调用，在onPause一般会调用此方法（覆写了<br>onSaveInstanceState的话先调用onSaveInstanceState后调用此方法），有时也不会（onPause后调用了onResume）。</li>
<li>调用此方法后会调用onRestart（activity在此可见）、onDestroy（activity被销毁）或什么都不调用（应用进程被杀死），取决于后续用户的操作。</li>
<li>在衍生类（子类）的该方法中必须调用父类的onResume()方法，否则就会抛出异常<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onStop();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>#####6.onDestroy</p>
<blockquote>
<p>Perform any final cleanup before an activity is destroyed. This can happen either because the activity is finishing (someone called finish on it, or because the system is temporarily destroying this instance of the activity to save space. You can distinguish between these two scenarios with the isFinishing method.Note: do not count on this method being called as a place for saving data! For example, if an activity is editing data in a content provider, those edits should be committed in either onPause or onSaveInstanceState, not here. This method is usually implemented to free resources like threads that are associated with an activity, so that a destroyed activity does not leave such things around while the rest of its application is still running. There are situations where the system will simply kill the activity’s hosting process without calling this method (or any others) in it, so it should not be used to do things that are intended to remain around after the process goes away.Derived classes must call through to the super class’s implementation of this method. If they do not, an exception will be thrown.</p>
</blockquote>
<ul>
<li>在activity被销毁时回调，只会调用一次</li>
<li>不要在该方法里保存数据，这些编辑应该在onPause或onSaveInstanceState中提交，而不是在这里。</li>
<li>通常该方法用于释放资源，结束开启的线程，确保应用还在运行时而该activity结束不留下一些属于该activity而不属于应用的东西。</li>
<li>系统也可能会简单的杀死应用进程而不调用此方法或其它的任何方法，因此此方法不应该被用来做那些不需要应用进程而运行的功能（如开启服务等）。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<center>还有一张来自stromzhang公众号的图：</center><br><br><img src="http://img.blog.csdn.net/20170322211135973?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><br>参考：<a href="http://blog.csdn.net/zhao_3546/article/details/12843477" target="_blank" rel="external">Android Activity为什么要细化出onCreate、onStart、onResume、onPause、onStop、onDesdroy这么多方法让应用去重载？</a><br><br><br><center><u><b><em>END</em></b></u></center>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Activity 生命周期 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android：使用 HttpURLConnection 实现多线程下载]]></title>
      <url>/2017/03/19/Android-%E4%BD%BF%E7%94%A8HttpURLConnection%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h4 id="使用HttpURLConnection实现多线程下载"><a href="#使用HttpURLConnection实现多线程下载" class="headerlink" title="使用HttpURLConnection实现多线程下载"></a>使用<code>HttpURLConnection</code>实现<strong>多线程下载</strong></h4><p>这个小程序是根据《疯狂Android讲义》<em>（第三版）</em>第13章 <em>Android网络应用</em>，13.3节 <em>使用HTTP访问网络</em>  扩展而来。<br><br></p>
<blockquote>
<p>使用多线程下载文件可以更快地完成下载任务，因为客户端启动多条线程进行下载就意味着服务器也需要为该客户端提供相应的服务。假设服务器同时最多服务100个用户，在服务器中一个线程对应一个用户，100条线程在计算机内并发执行，也就是由CPU划分时间轮片流执行，如果A应用使用了99条线程下载文件，那么相当于占用了99个用户的资源，自然就拥有了较快的下载速度。<font size="-1"><em>不考虑网络因素</em></font></p>
</blockquote>
<p><em>实际上并不是客户端并发的下载线程越多下载速度就越快，因为当开启太多并发线程后，应用程序需要维护每条线程的开销，线程同步的开销，这些开销可能反而使下载速度减慢</em></p>
<h4 id="先看看最终效果"><a href="#先看看最终效果" class="headerlink" title="先看看最终效果"></a>先看看最终效果</h4><p><img src="http://img.blog.csdn.net/20170319152750479?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20170319152905169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20170319153003310?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20170319153045342?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h5 id="1-这个小程序中负责开启多线程下载的核心类是：DownloadUtil-java"><a href="#1-这个小程序中负责开启多线程下载的核心类是：DownloadUtil-java" class="headerlink" title="1.这个小程序中负责开启多线程下载的核心类是：DownloadUtil.java"></a>1.这个小程序中负责开启多线程下载的核心类是：<code>DownloadUtil.java</code></h5><h6 id="这个类主要做了如下的事情："><a href="#这个类主要做了如下的事情：" class="headerlink" title="这个类主要做了如下的事情："></a>这个类主要做了如下的事情：</h6><ul>
<li>创建URL对象（本程序使用的是<code>HttpURLConnection</code>）</li>
<li>获取URL指向资源的大小（由<code>HttpURLConnection.getContentLength()</code>方法完成）</li>
<li>在本地磁盘上创建一个与网络资源相同大小的空文件<br>（<code>RandomAccessFile.setLength()</code>）</li>
<li>计算每条线程应该下载网络资源的哪一部分<br>（<em>从哪个字节开始，到哪个字节结束</em>）</li>
<li>依次创建，启动多条线程来下载网络资源的指定部分</li>
</ul>
<p>######下面来看具体代码：</p>
<ol>
<li>先来看构造函数</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">DownloadUtil</span><span class="params">(OnDownloadFinish complete)</span> </span>&#123;</div><div class="line">       <span class="keyword">this</span>.downloadFinish = complete;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><code>OnDownloadFinish</code>是下载完成后的回调</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnDownloadFinish</span> </span>&#123;</div><div class="line">      <span class="comment">/**</span></div><div class="line">       * 所有线程都结束后调用</div><div class="line">       * <span class="doctag">@param</span> file 下载好的文件</div><div class="line">       */</div><div class="line">      <span class="function"><span class="keyword">void</span> <span class="title">onComplete</span><span class="params">(File file)</span></span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ol>
<li>开启下载任务的入口方法<br>下载前的计算和开启线程下载都在这个方法中完成</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 开始一次下载</div><div class="line">    * <span class="doctag">@param</span> sourcePath 目标URL</div><div class="line">    * <span class="doctag">@param</span> targetFilePath 目标保存路径</div><div class="line">    * <span class="doctag">@param</span> threadNumber 开启的线程数</div><div class="line">    * <span class="doctag">@param</span> fileName 保存的文件名</div><div class="line">    * <span class="doctag">@throws</span> IOException</div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(@NonNull String sourcePath, @Nullable String targetFilePath, <span class="keyword">int</span> threadNumber, @Nullable String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"> ....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><strong>创建HttpURLConnection对象：</strong><br>对于一次下载该对象指向的URL资源地址应是同一个，封装成一个方法：<br>该方法在两个地方被调用到</li>
</ol>
<ul>
<li>获得URL指向资源大小时。<em>获得大小后关闭该网络连接</em></li>
<li>启动线程下载该线程对应的那部分资源时</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> HttpURLConnection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">       URL url = <span class="keyword">new</span> URL(sourcePath);</div><div class="line">       HttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class="line">       conn.setConnectTimeout(<span class="number">1000</span> * <span class="number">5</span>);</div><div class="line">       conn.setRequestMethod(<span class="string">"GET"</span>);</div><div class="line">       conn.setRequestProperty(<span class="string">"Accept"</span>, accept);</div><div class="line">       conn.setRequestProperty(<span class="string">"Accept-Language"</span>, <span class="string">"zh-CN"</span>);</div><div class="line">       conn.setRequestProperty(<span class="string">"Charset"</span>, <span class="string">"UTF-8"</span>);</div><div class="line">       <span class="keyword">return</span> conn;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ol>
<li>下载前的计算和开启多个线程进行下载：<br>获得大小-&gt;本地磁盘创建同大小的空文件-&gt;求得每一个线程应下载多少字节-&gt;开启线程进行下载</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">HttpURLConnection conn = getConnection();</div><div class="line">      fileSize = conn.getContentLength();</div><div class="line">      conn.disconnect();</div><div class="line"></div><div class="line">      RandomAccessFile file = <span class="keyword">new</span> RandomAccessFile(targetFilePathAndName, <span class="string">"rw"</span>);</div><div class="line">      file.setLength(fileSize);</div><div class="line">      file.close();</div><div class="line"></div><div class="line">      partSize = fileSize / threadNumber + <span class="number">1</span>;</div><div class="line"></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadNumber; i++) &#123;</div><div class="line">          <span class="keyword">int</span> startPos = i * partSize;</div><div class="line">          threads[i] = <span class="keyword">new</span> DownLoadThread(startPos);</div><div class="line">          threads[i].start();</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<ol>
<li>负责下载的线程类<code>private class</code> <strong><code>DownLoadThread</code></strong> <code>extends Thread</code><br>来看run方法<br>在构造函数中写了该句<code>currentPart = new RandomAccessFile(targetFilePathAndName, &quot;rw&quot;);</code></li>
</ol>
<blockquote>
<p> <code>RandomAccessFile</code>: RandomAccessFile是用来访问那些保存数据记录的文件的，你可以用seek( )方法来访问记录，并进行读写了。这些记录的大小不必相同；但是其大小和位置必须是可知的。但是该类仅限于操作文件。——<a href="http://blog.csdn.net/akon_vm/article/details/7429245" target="_blank" rel="external">Java RandomAccessFile用法 </a><br><br>RandomAccessFile的对象包含一个记录指针，用于标识当前流的读写位置，这个位置可以向前移动，也可以向后移动。RandomAccessFile包含两个方法来操作文件记录指针。</p>
<ul>
<li>long getFilePoint():记录文件指针的当前位置。</li>
<li>void seek(long pos):将文件记录指针定位到pos位置</li>
</ul>
</blockquote>
<hr>
<p>在<code>finally</code>里判断当前还有几个线程还在下载，当没有线程在下载了（下载结束了），就回调<code>onComplete</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              HttpURLConnection connection = getConnection();</div><div class="line">              InputStream in = connection.getInputStream();</div><div class="line">              skipFully(in, startPos);</div><div class="line">              <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">              <span class="keyword">int</span> hasRead;</div><div class="line">              <span class="keyword">while</span> ((currentDownLoaded &lt; partSize) &amp;&amp; (hasRead = in.read(bytes)) &gt; <span class="number">0</span>) &#123;</div><div class="line">                  currentPart.write(bytes, <span class="number">0</span>, hasRead);</div><div class="line">                  currentDownLoaded += hasRead;</div><div class="line">              &#125;</div><div class="line">              currentPart.close();</div><div class="line">              in.close();</div><div class="line">              connection.disconnect();</div><div class="line"></div><div class="line">          &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</div><div class="line">              e.printStackTrace();</div><div class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">              e.printStackTrace();</div><div class="line">          &#125; <span class="keyword">finally</span> &#123;</div><div class="line">              restTask--;</div><div class="line">              <span class="keyword">if</span> (restTask == <span class="number">0</span>)</div><div class="line">                  downloadFinish.onComplete(<span class="keyword">new</span> File(targetFilePathAndName));</div><div class="line"></div><div class="line">          &#125;</div><div class="line"></div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<p>其中用到一个跳过指定字节数的方法</p>
<blockquote>
<p>由于最新的Android平台上调用InputStream的skip方法时，并不能总是准确地跳过指定的字节数，因此程序实现了一个skipFully方法。</p>
</blockquote>
<p>参考此处：<br><a href="http://www.ablanxue.com/prone_7005_1.html" target="_blank" rel="external">Java.IO.InputStream.skip() 错误（跳过字节数和预想的不等）</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 从输入流中从起点开始跳过指定长度</div><div class="line">     * <span class="doctag">@param</span> in    输入流</div><div class="line">     * <span class="doctag">@param</span> bytes 要跳过的字节数</div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">skipFully</span><span class="params">(InputStream in, <span class="keyword">long</span> bytes)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">long</span> len;</div><div class="line">        <span class="keyword">while</span> (bytes &gt; <span class="number">0</span>) &#123;</div><div class="line">            len = in.skip(bytes);</div><div class="line">            bytes -= len;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>好了，以上就时进行多线程下载的核心类，源码已上传到GitHub，你可以在这里找到：</p>
<center><a href="https://github.com/DuanJiaNing/MultithreadDownload" target="_blank" rel="external">DuanJiaNing/MultithreadDownload</a></center>

<h5 id="2-Activity部分"><a href="#2-Activity部分" class="headerlink" title="2. Activity部分"></a>2. Activity部分</h5><p>布局部分用到的控件主要有：<br><code>TextView</code>,<code>EditText</code>,<code>ProgressBar</code>,<code>CardView</code>,<code>FloatingActionButton</code>和<code>ListView</code>.</p>
<h6 id="看起来是这样子的："><a href="#看起来是这样子的：" class="headerlink" title="看起来是这样子的："></a>看起来是这样子的：</h6><p><img src="http://img.blog.csdn.net/20170319152128133?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>解释一下：</p>
<ul>
<li>最上面的<code>任务详情</code>:<br>1.当点击了<code>下载</code>之后当前正在下载任务的信息会显示在这里。<br>2.当已完成多个下载任务后，已下载的文件名会显示在<code>ListView</code>处，<code>ListView</code>的<code>onItemClick</code>时间会获得已下载文件对应的下载信息显示在这里。</li>
<li><code>进度</code>下面有个<code>ProgressBar</code>用于实时显示当前的下载进度</li>
<li><code>下载速度</code>处显示实时的下载速度（两行<code>byte/s kb/s</code>）</li>
<li><code>下载速度</code><strong>右边</strong>也会显示实时的下载进度，对应<code>ProgressBar</code>的 <code>Max</code>和<code>当前进度</code>.</li>
<li><code>已下载</code><strong>上边</strong>有个<code>TextView</code>显示文件保存的路径</li>
<li><code>FloatingActionButton</code>控制输入URL输入框，线程数输入框，下载按钮所在的<code>CardView</code>的显示和隐藏。<br><img src="./Image_001.png" alt="Alt text"></li>
</ul>
<h6 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h6><ol>
<li>进入onCreate关联布局后其他几乎都在<code>init</code>方法里搞定了<strong><code>&gt;.&lt;</code></strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">      <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">      setContentView(R.layout.main_activity);</div><div class="line"></div><div class="line">      init();</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ol>
<li><code>init()</code>方法里做了这么些事情：</li>
</ol>
<ul>
<li>初始化控件</li>
<li>初始化用于保存已下载文件名和对应任务信息的<code>ArrayList</code></li>
<li><code>ListView</code>绑定<code>adapter</code>，item点击事件</li>
<li>从<code>anim</code>和<code>animator</code>中加载动画资源并绑定给<code>FloatingActionButton</code>和<code>CardView</code>,<code>FloatingActionButton</code>的点击事件（控制动画播放）</li>
<li><code>new</code>一个<code>DownloadUtil</code>实例并定义回调方法<code>onComplete</code>,在这里遇到了不少问题[^1] [^2]（亦可在源码注释中查看）</li>
<li><code>下载</code>按钮的点击事件，在点击事件里调用<code>DownloadUtil.start</code>方法，因为<code>start</code>方法里调用了<code>URLConnection.openConnection</code>方法，所以不能在<strong>UI线程</strong>里调用此方法。同时在这里开<br>启<code>Timer</code>实时更新UI。注意<a href="只有在调用了`DownloadUtil.start`方法后，DownloadUtil的`getFileSize(),getThreadNumber(),getPartSize()`等`Getter`方法才会正确的取到值。">^3</a></li>
</ul>
<ol>
<li>控制<code>CardView</code>动画的代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> AnimatorSet cvShow = (AnimatorSet) AnimatorInflater.loadAnimator(<span class="keyword">this</span>, R.animator.input_show);</div><div class="line">       <span class="keyword">final</span> AnimatorSet cvHide = (AnimatorSet) AnimatorInflater.loadAnimator(<span class="keyword">this</span>, R.animator.input_hide);</div><div class="line">       cvShow.setTarget(cardView);</div><div class="line">       cvHide.setTarget(cardView);</div><div class="line"></div><div class="line">       input.setPivotX(<span class="number">100</span>);<span class="comment">//用ObjectAnimator实现旋转动画时用此方法指定旋转的原点</span></div><div class="line">       <span class="keyword">final</span> ObjectAnimator btShow = ObjectAnimator.ofFloat(input, <span class="string">"rotation"</span>, <span class="number">0</span>, <span class="number">180</span>).setDuration(<span class="number">1000</span>);</div><div class="line">       <span class="keyword">final</span> ObjectAnimator btHide = ObjectAnimator.ofFloat(input, <span class="string">"rotation"</span>, <span class="number">180</span>, <span class="number">0</span>).setDuration(<span class="number">1000</span>);</div><div class="line">       btShow.setInterpolator(<span class="keyword">new</span> OvershootInterpolator());</div><div class="line">       btHide.setInterpolator(<span class="keyword">new</span> DecelerateInterpolator());</div><div class="line"></div><div class="line">       btShow.start();</div><div class="line">       cvShow.start();</div><div class="line"></div><div class="line">       input.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">           <span class="keyword">boolean</span> hasCardViewShow = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">               <span class="keyword">if</span> (hasCardViewShow) &#123;</div><div class="line">                   btHide.start();</div><div class="line">                   cvHide.start();</div><div class="line">                   hasCardViewShow = <span class="keyword">false</span>;</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   btShow.start();</div><div class="line">                   cvShow.start();</div><div class="line">                   hasCardViewShow = <span class="keyword">true</span>;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
<ol>
<li>下载完成后的回调和下载按钮的点击事件<br>代码有点多就直接上张图吧！<br><img src="http://img.blog.csdn.net/20170319152255946?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li>
<li>还有动画部分的代码</li>
</ol>
<p>控制cardView隐藏<br><code>/res/animator/input_hide.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:ordering</span>=<span class="string">"together"</span></div><div class="line">    &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">objectAnimator</span></span></div><div class="line">        <span class="attr">android:duration</span>=<span class="string">"800"</span></div><div class="line">        <span class="attr">android:propertyName</span>=<span class="string">"translationY"</span></div><div class="line">        <span class="attr">android:interpolator</span>=<span class="string">"@android:anim/linear_interpolator"</span></div><div class="line">        <span class="attr">android:valueFrom</span>=<span class="string">"0.0f"</span></div><div class="line">        <span class="attr">android:valueTo</span>=<span class="string">"400.0f"</span></div><div class="line">        <span class="attr">android:valueType</span>=<span class="string">"floatType"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">objectAnimator</span></span></div><div class="line">        <span class="attr">android:duration</span>=<span class="string">"1000"</span></div><div class="line">        <span class="attr">android:propertyName</span>=<span class="string">"alpha"</span></div><div class="line">        <span class="attr">android:valueFrom</span>=<span class="string">"1.0f"</span></div><div class="line">        <span class="attr">android:valueTo</span>=<span class="string">"0.0f"</span></div><div class="line">        <span class="attr">android:valueType</span>=<span class="string">"floatType"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<p>控制cardView显示<br><code>/res/animator/input_show.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:ordering</span>=<span class="string">"together"</span></div><div class="line">    &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">objectAnimator</span></span></div><div class="line">        <span class="attr">android:duration</span>=<span class="string">"800"</span></div><div class="line">        <span class="attr">android:propertyName</span>=<span class="string">"translationY"</span></div><div class="line">        <span class="attr">android:interpolator</span>=<span class="string">"@android:anim/overshoot_interpolator"</span></div><div class="line">        <span class="attr">android:valueFrom</span>=<span class="string">"400f"</span></div><div class="line">        <span class="attr">android:valueTo</span>=<span class="string">"0.0f"</span></div><div class="line">        <span class="attr">android:valueType</span>=<span class="string">"floatType"</span></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">objectAnimator</span></span></div><div class="line">        <span class="attr">android:duration</span>=<span class="string">"1000"</span></div><div class="line">        <span class="attr">android:propertyName</span>=<span class="string">"alpha"</span></div><div class="line">        <span class="attr">android:valueFrom</span>=<span class="string">"0.0f"</span></div><div class="line">        <span class="attr">android:valueTo</span>=<span class="string">"1.0f"</span></div><div class="line">        <span class="attr">android:valueType</span>=<span class="string">"floatType"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li><code>FloatingActionButton</code>的动画直接定义在java代码中了</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">input.setPivotX(<span class="number">100</span>);<span class="comment">//用ObjectAnimator实现旋转动画时用此方法指定旋转的原点</span></div><div class="line"><span class="keyword">final</span> ObjectAnimator btShow = ObjectAnimator.ofFloat(input, <span class="string">"rotation"</span>, <span class="number">0</span>, <span class="number">180</span>).setDuration(<span class="number">1000</span>);</div><div class="line"><span class="keyword">final</span> ObjectAnimator btHide = ObjectAnimator.ofFloat(input, <span class="string">"rotation"</span>, <span class="number">180</span>, <span class="number">0</span>).setDuration(<span class="number">1000</span>);</div><div class="line">btShow.setInterpolator(<span class="keyword">new</span> OvershootInterpolator());</div><div class="line">btHide.setInterpolator(<span class="keyword">new</span> DecelerateInterpolator());</div></pre></td></tr></table></figure>
<ol>
<li>界面上有<code>EditText</code>所以一打开程序就会把软键盘调出来效果不好，所以在<code>style</code>里加了下面两句：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:configChanges"</span>&gt;</span>keyboardHidden|orientation<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowSoftInputMode"</span>&gt;</span>stateHidden<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>要访问网络和读写磁盘，所以加入如下三条权限：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></div></pre></td></tr></table></figure>
<hr>
<center><font size="+2" color="#bbb">源码已上传到GitHub，你可以在这里找到</font></center><br><center><font size="+3"><a href="https://github.com/DuanJiaNing/MultithreadDownload" target="_blank" rel="external">DuanJiaNing/MultithreadDownload</a></font></center>

<p>[^1]: 定义全局的<code>MainActivity.this.file</code>来获得<code>onComplete</code>返回的<code>File</code>引用 或 在此处（<code>onComplete</code>内）定义一个final的File来获得file的引用。<strong>不能使用第二种方法</strong> ——假设使用第二种方法：当第一次下载（<em>打开程序进行的第一次下载任务</em>）成功回调该方法时file被赋值，赋值后dialog初始化，此时dialog持有file的引用，onComplete方法执结束时file被GC回收，但dialog初始时在onclick方法里使用了他的值，使每次调用dialog里onclick方法时使用的file都是第一次调用onComplete时的值，从而使File.reNameTo方法在调用两次之后就出错无法正常重命名。而每次调用editText.setText();时用的却是该次新的final File对象使对话框能正确显示文件名。因此应使用全局的file对象。</p>
<p>[^2]: <code>onComplete</code>方法在<code>DownloadUtil$DownLoadThread</code>中调用（<font size="+2">非<code>UI</code>线程</font>），因此在<code>onComplete</code>中更新UI要使用<code>Handler</code>,<code>Activity.runOnUiThread</code>或<code>View.post</code>。</p>
<center><u><b><em>END</em></b></u></center>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> HttpURLConnection </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Socket 和 ServerSocket 实现简单的聊天程序]]></title>
      <url>/2017/03/17/java-%E7%94%A8java.net.Socket%E5%92%8Cjava.net.ServerSocket%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E8%81%8A%E5%A4%A9%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>用<code>java.net.Socket</code>和<code>java.net.ServerSocket</code>实现简单的聊天程序</p>
<blockquote>
<p>思路是这样的：<br>假设用户A与用户B进行聊天，用户B端使用ServerSocket作为服务端，而用户A使用Socket与用户B进行通信。</p>
</blockquote>
<ul>
<li>这两个小程序需要运行在同一台电脑上，才能正常通信。</li>
<li>运行时一定要先运行<code>Server.class</code>再运行<code>Client.class</code>。</li>
<li>通过异常来控制程序逻辑不是首选方式，但想了很久也没想出其它方法 <strong><code>&gt;.&lt;</code></strong></li>
</ul>
<h5 id="用户A的代码如下（Client-java）"><a href="#用户A的代码如下（Client-java）" class="headerlink" title="用户A的代码如下（Client.java）"></a>用户A的代码如下（<code>Client.java</code>）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"><span class="keyword">import</span> java.net.InetAddress;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.net.SocketException;</div><div class="line"><span class="keyword">import</span> java.text.DateFormat;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by DuanJiaNing on 2017/3/16.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//创建Socket连接到本机的2003端口</span></div><div class="line">            Socket socket = <span class="keyword">new</span> Socket(InetAddress.getLocalHost(), <span class="number">2003</span>);</div><div class="line">            println(<span class="string">"**********您正在和："</span> + InetAddress.getLocalHost().getHostAddress() + <span class="string">" 聊天***********\n"</span> + <span class="string">"输入信息，按回车即可发送!输入quit可结束会话并关闭程序。"</span>);</div><div class="line">            OutputStream out = socket.getOutputStream();</div><div class="line">            out.write(<span class="string">"Hello 在么？"</span>.getBytes());</div><div class="line"></div><div class="line">            <span class="comment">//创建新线程负责打印接收到的消息</span></div><div class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> ClientThread(socket.getInputStream())).start();</div><div class="line"></div><div class="line">            <span class="comment">//接收控制台输入</span></div><div class="line">            BufferedReader bufr = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</div><div class="line">            <span class="comment">//读取控制台输入，有输入且不为quit时进行发送</span></div><div class="line">            String line;</div><div class="line">            <span class="keyword">while</span> ((line = bufr.readLine()) != <span class="keyword">null</span> &amp;&amp; !line.equals(<span class="string">"quit"</span>)) &#123;</div><div class="line">                out.write(line.getBytes());</div><div class="line">            &#125;</div><div class="line">            <span class="comment">//关闭套接字</span></div><div class="line">            <span class="comment">//程序结束 这将导致ClientThread抛java.net.SocketException: Socket closed异常而结束（暂且就这样关闭这个线程）</span></div><div class="line">            socket.close();</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        InputStream input;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ClientThread</span><span class="params">(InputStream in)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.input = in;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">            <span class="keyword">int</span> len;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//当收到消息时把消息打印到控制台</span></div><div class="line">                <span class="keyword">while</span> ((len = input.read(bytes)) != -<span class="number">1</span>) &#123;</div><div class="line">                    println(<span class="keyword">new</span> String(bytes, <span class="number">0</span>, len));</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="comment">//当服务端或客户端结束会话时（输入quit时）会关闭socket从而抛出java.net.SocketException: Socket closed异常</span></div><div class="line">                <span class="comment">//隐藏此异常不做处理让程序继续“正常”运行(正常结束)</span></div><div class="line">                <span class="keyword">if</span> (!(e <span class="keyword">instanceof</span> SocketException))</div><div class="line">                    e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            println(<span class="string">"**********此次会话结束**********"</span>);</div><div class="line">            System.exit(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        Date date = <span class="keyword">new</span> Date();</div><div class="line">        DateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss "</span>);</div><div class="line">        System.out.println(format.format(date) + msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h5 id="用户B代码（服务端）（Server-java）"><a href="#用户B代码（服务端）（Server-java）" class="headerlink" title="用户B代码（服务端）（Server.java）"></a>用户B代码（服务端）（<code>Server.java</code>）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.net.ServerSocket;</div><div class="line"><span class="keyword">import</span> java.net.Socket;</div><div class="line"><span class="keyword">import</span> java.net.SocketException;</div><div class="line"><span class="keyword">import</span> java.text.DateFormat;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by DuanJiaNing on 2017/3/16.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BufferedReader reader;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//监听本机（服务器）的2003端口</span></div><div class="line">        ServerSocket serverSocket = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">2003</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line"></div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    println(<span class="string">"************当前没有正在进行的会话***********"</span>);</div><div class="line"></div><div class="line">                    <span class="comment">//accept为阻塞时方法，当有连接时会返回连接着的socket对象</span></div><div class="line">                    Socket socket = serverSocket.accept();</div><div class="line">                    println(<span class="string">"当前聊天对象来自："</span> + socket.getLocalAddress().getHostAddress() + <span class="string">"\n"</span> + <span class="string">"输入信息，按回车即可发送!输入quit可结束此次会话。"</span>);</div><div class="line"></div><div class="line">                    <span class="comment">//创建新线程负责打印接收到的消息</span></div><div class="line">                    InputStream in = socket.getInputStream();</div><div class="line">                    <span class="keyword">new</span> Thread(<span class="keyword">new</span> ServerThread(in)).start();</div><div class="line"></div><div class="line">                    <span class="comment">//接收输入并发送给连接者</span></div><div class="line">                    reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</div><div class="line">                    String line;</div><div class="line">                    OutputStream out = socket.getOutputStream();</div><div class="line">                    <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span> &amp;&amp; !line.equals(<span class="string">"quit"</span>)) &#123;</div><div class="line">                        out.write(line.getBytes());</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">//服务端主动结束会话</span></div><div class="line">                    out.write(<span class="string">"先不聊了。bye~"</span>.getBytes());</div><div class="line"></div><div class="line">                    <span class="comment">//关闭套接字</span></div><div class="line">                    <span class="comment">//程序结束 这将导致ServerThread抛java.net.SocketException: Socket closed异常而结束（暂且就这样关闭此次会话对应的线程）</span></div><div class="line">                    socket.close();</div><div class="line"></div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    <span class="comment">//当客户端主动结束会话（输入quit时），而服务端试图发送信息时会抛出java.net.SocketException: Software caused connection abort: socket write error</span></div><div class="line">                    <span class="comment">//借这个异常让服务端回到等待客户端接入状态</span></div><div class="line">                    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> SocketException) &#123;</div><div class="line">                        println(<span class="string">"您的聊天对象已离线\n"</span>);</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                        e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        InputStream input;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ServerThread</span><span class="params">(InputStream in)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.input = in;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">            <span class="keyword">int</span> len;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//当收到消息时把消息打印到控制台</span></div><div class="line">                <span class="keyword">while</span> ((len = input.read(bytes)) != -<span class="number">1</span>) &#123;</div><div class="line">                    println(<span class="keyword">new</span> String(bytes, <span class="number">0</span>, len));</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                <span class="comment">//当服务端或（输入quit时）会关闭socket从而抛出java.net.SocketException: Socket closed异常</span></div><div class="line">                <span class="comment">//当服务端输入quit时隐藏此异常不做处理让程序继续运行（回到等待客户端接入的状态）</span></div><div class="line">                <span class="keyword">if</span> (!(e <span class="keyword">instanceof</span> SocketException)) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">        Date date = <span class="keyword">new</span> Date();</div><div class="line">        DateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss "</span>);</div><div class="line">        System.out.println(format.format(date) + msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h5 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h5><ul>
<li><p>分别编译Server.java，Client.java文件</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">javac Server.java</div><div class="line">javac Client.java</div></pre></td></tr></table></figure>
</li>
<li><p><strong>先后</strong>运行Server.class和Client.class</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">java Server</div><div class="line">java Client</div></pre></td></tr></table></figure>
</li>
<li><p>此时可看到：<br><img src="http://img.blog.csdn.net/20170317112320578?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><br></p>
</li>
<li>接下来进行简单对话后<strong>在服务端输入<code>quit</code></strong>可看到：<br><img src="http://img.blog.csdn.net/20170317112416550?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><br></li>
<li>此时客户端已经关闭，而服务端会循环阻塞在accept方法上。此时只需<strong>再次运行Client.class</strong>（在dos终端切换到Client.class文件所在路径后输入<code>java Client</code>）就能再次连接到服务端<br><br></li>
<li>服务端主动结束会话，此时时这样的：<br><img src="http://img.blog.csdn.net/20170317112435267?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li>
</ul>
<center><em>有哪里可以改进的可以留言告诉我哦</em></center><br><center><u><b><em>END</em></b></u></center>]]></content>
      
        
        <tags>
            
            <tag> java </tag>
            
            <tag> Socket </tag>
            
            <tag> ServerSocket </tag>
            
            <tag> 聊天程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android：TextView及其子类]]></title>
      <url>/2017/03/14/Android-TextView%E5%8F%8A%E5%85%B6%E5%AD%90%E7%B1%BB%EF%BC%88TextView%E3%80%81EditText%E3%80%81Button%EF%BC%89/</url>
      <content type="html"><![CDATA[<hr>
<h4 id="TextView及其子类"><a href="#TextView及其子类" class="headerlink" title="TextView及其子类"></a>TextView及其子类</h4><p>TextView直接继承自View，它还是EditText和Button的父类。</p>
<h5 id="1-TextView"><a href="#1-TextView" class="headerlink" title="1.TextView"></a>1.TextView</h5><ol>
<li>TextView及其子类的继承关系图如下：<br><img src="http://img.blog.csdn.net/20170314232142595?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></li>
<li>CheckedTextView跟TextView相比增加了一个checked状态，开发者可通过<code>setChecked(bool check)</code>和<code>isChecked()</code>方法来改变和判断其状态。通过<code>setCheckMarkDrawable()</code>设置它的勾选图标。</li>
<li>TextView提供了大量的XML属性，这些属性大部分不仅适用于TextView，而且可使用于它的子类。</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left">xml属性</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">android:autoLink</td>
<td style="text-align:left">是否将符合指定格式的文本转换为可单击的超链接形式</td>
</tr>
<tr>
<td style="text-align:left">android:autoText</td>
<td style="text-align:left">是否将URL，Email地址等连接自动转换为可单击的超链接</td>
</tr>
<tr>
<td style="text-align:left">android:linksClickable</td>
<td style="text-align:left">控制该文本框的URL，Email等链接是否可以点击</td>
</tr>
<tr>
<td style="text-align:left">android:capitalize</td>
<td style="text-align:left">控制是否将用户输入的文本转换为大写字母，支持如下属性：<br>none：不转换<br>sentences：每个句子的首字母大写<br>words：每个单词的首字母大写<br>characters：每个字母都大写</td>
</tr>
<tr>
<td style="text-align:left">android:drawableBottom[End\</td>
<td style="text-align:left">Left\</td>
<td>Top\</td>
<td>Start\</td>
<td>Right]</td>
<td>在文本框内文本的底部（结尾处、左边、顶部、开始处、右边）绘制指定图像</td>
</tr>
<tr>
<td style="text-align:left">android:drawablePadding</td>
<td style="text-align:left">文本框内文本与图形之间的距离</td>
</tr>
<tr>
<td style="text-align:left">android:ellipsize</td>
<td style="text-align:left">设置当文本超过TextView的长度时如何处理文本，支持如下属性值：<br>none：不做任何处理<br>start：在文本开始处截断并显示省略号<br>middle：在文本中间截断并显示省略号<br>end：在文本结尾处截断并显示省略号<br>marquee：使用marquee滚动动画显示文本</td>
</tr>
<tr>
<td style="text-align:left">android:marqueeRepeatLimit</td>
<td style="text-align:left">设置marquee动画重复的次数</td>
</tr>
<tr>
<td style="text-align:left">android:ems</td>
<td style="text-align:left">设置该组件的宽度，以em为单位</td>
</tr>
<tr>
<td style="text-align:left">android:fontFamily</td>
<td style="text-align:left">设置文本框内文字的字体</td>
</tr>
<tr>
<td style="text-align:left">android:gravity</td>
<td style="text-align:left">设置文本框内文本的对齐方式</td>
</tr>
<tr>
<td style="text-align:left">android:height</td>
<td style="text-align:left">设置文本框的高度</td>
</tr>
<tr>
<td style="text-align:left">android:width</td>
<td style="text-align:left">设置文本框的宽度</td>
</tr>
<tr>
<td style="text-align:left">android:hint</td>
<td style="text-align:left">当文本框内没有文本时默认显示的提示文本</td>
</tr>
<tr>
<td style="text-align:left">android:inputType</td>
<td style="text-align:left">指定文本框的输入类型</td>
</tr>
<tr>
<td style="text-align:left">android:lineSpacingExtra</td>
<td style="text-align:left">控制两行文本之间的额外间距</td>
</tr>
<tr>
<td style="text-align:left">android:lines</td>
<td style="text-align:left">设置该文本框默认占几行</td>
</tr>
<tr>
<td style="text-align:left">android:maxEms[Height\</td>
<td style="text-align:left">Length\</td>
<td>Lines\</td>
<td>Width]</td>
<td>设置该文本框的最大ems（高度、字符长度、占几行、宽度）</td>
</tr>
<tr>
<td style="text-align:left">android:minEms[Height\</td>
<td style="text-align:left">Lines\</td>
<td>Width]</td>
<td>设置该文本框的最小ems（高度、占几行、宽度）</td>
</tr>
<tr>
<td style="text-align:left">android:scrollHorizontally</td>
<td style="text-align:left">设置当文本框不够显示时是否允许水平滚动</td>
</tr>
<tr>
<td style="text-align:left">android:shadowColor</td>
<td style="text-align:left">设置文本框内文本的阴影颜色</td>
</tr>
<tr>
<td style="text-align:left">android:shadowDx[y]</td>
<td style="text-align:left">设置文本框内文本的阴影在水平（垂直）方向的偏移</td>
</tr>
<tr>
<td style="text-align:left">android:shadowRadius</td>
<td style="text-align:left">设置文本框内文本的模糊程度，值越大越模糊</td>
</tr>
<tr>
<td style="text-align:left">android:text</td>
<td style="text-align:left">指定文本内容</td>
</tr>
<tr>
<td style="text-align:left">android:textAllCaps</td>
<td style="text-align:left">文本全部大写</td>
</tr>
<tr>
<td style="text-align:left">android:textColor</td>
<td style="text-align:left">指定文本颜色</td>
</tr>
<tr>
<td style="text-align:left">android:textColorHighLight</td>
<td style="text-align:left">文本被选中时颜色</td>
</tr>
<tr>
<td style="text-align:left">android:textColorHint</td>
<td style="text-align:left">提示文本颜色</td>
</tr>
<tr>
<td style="text-align:left">android:textScaleX</td>
<td style="text-align:left">文本的水平缩放因子</td>
</tr>
<tr>
<td style="text-align:left">android:textStyle</td>
<td style="text-align:left">字体风格（粗体、斜体等）</td>
</tr>
</tbody>
</table>
<ol>
<li>例子<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:textColorLink</span>=<span class="string">"#00ff0d"</span></div><div class="line">    <span class="attr">android:autoLink</span>=<span class="string">"email|web"</span></div><div class="line">    <span class="attr">android:lineSpacingExtra</span>=<span class="string">"10dp"</span></div><div class="line">    <span class="attr">android:ems</span>=<span class="string">"8"</span></div><div class="line">    <span class="attr">android:textSize</span>=<span class="string">"20sp"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"20dp"</span></div><div class="line">    <span class="attr">android:gravity</span>=<span class="string">"end"</span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"20dp"</span></div><div class="line">    <span class="attr">android:drawablePadding</span>=<span class="string">"20dp"</span></div><div class="line">    <span class="attr">android:drawableTop</span>=<span class="string">"@drawable/lines"</span></div><div class="line">    <span class="attr">android:drawableBottom</span>=<span class="string">"@drawable/lines"</span></div><div class="line">    <span class="attr">android:shadowColor</span>=<span class="string">"@color/colorPrimaryDark"</span></div><div class="line">    <span class="attr">android:shadowDx</span>=<span class="string">"20.0"</span></div><div class="line">    <span class="attr">android:shadowDy</span>=<span class="string">"10.0"</span></div><div class="line">    <span class="attr">android:shadowRadius</span>=<span class="string">"10.0"</span></div><div class="line"></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"23232@163.com**0872-18345678908**afffwerwerhttp://www.baidu.com"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    /&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>阴影效果需远行到模拟器中才能看到。<br><img src="http://img.blog.csdn.net/20170314232111985?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h5 id="2-EditText、AutoCompleteTextView、ExtractEditText"><a href="#2-EditText、AutoCompleteTextView、ExtractEditText" class="headerlink" title="2.EditText、AutoCompleteTextView、ExtractEditText"></a>2.EditText、AutoCompleteTextView、ExtractEditText</h5><h6 id="2-1EditText"><a href="#2-1EditText" class="headerlink" title="2.1EditText"></a>2.1EditText</h6><ol>
<li>EditText与TextView非常相似，它与TextView共用了绝大部分xml属性和方法。区别在于EditText可以接收用户的输入。</li>
<li>EditText最重要的属性是InputType属性，该属性将EditText设置为指定类型的输入组件，该属性随着Android的不断升级也会被不断扩充。</li>
<li>可参见此处：<a href="http://blog.csdn.net/u014651216/article/details/53199870" target="_blank" rel="external">Android EditText的属性和方法介绍使用及值得注意的点</a><br>|可用属性值|说明|<br>|:—-|:—|<br>|none|输入普通字符|<br>|text|输入普通字符|<br>|textCapCharacters|输入普通字符|<br>|textCapWords|单词首字母大小|<br>|textCapSentences|仅第一个字母大小|<br>|textAutoCorrect|前两个自动完成|<br>|textAutoComplete|前两个自动完成|<br>|textMultiLine|多行输入|<br>|textImeMultiLine|输入法多行（不一定支持）|<br>|textNoSuggestions|不提示|<br>|textUri|URI格式|<br>|textEmailAddress|电子邮件地址格式|<br>|textEmailSubject|邮件主题格式|<br>|textShortMessage|短消息格式|<br>|textLongMessage|长消息格式|<br>|textPersonName|人名格式|<br>|textPostalAddress|邮政格式|<br>|textPassword|密码格式|<br>|textVisiblePassword|密码可见格式|<br>|textWebEditText|作为网页表单的文本格式|<br>|textFilter|文本筛选格式|<br>|textPhonetic|拼音输入格式|<br>|number|数字格式|<br>|numberSigned|有符号数字格式|<br>|numberDecimal|可以带小数点的浮点格式|<br>|phone|拨号键盘|<br>|datetime|日期+时间格式|<br>|date|日期键盘|<br>|time|时间键盘|</li>
</ol>
<h6 id="2-2AutoCompleteTextView"><a href="#2-2AutoCompleteTextView" class="headerlink" title="2.2AutoCompleteTextView"></a>2.2AutoCompleteTextView</h6><p>带自动完成功能的EditText，该类需要与Adapter结合使用。</p>
<h6 id="2-3ExtractEditText"><a href="#2-3ExtractEditText" class="headerlink" title="2.3ExtractEditText"></a>2.3ExtractEditText</h6><p>它并不是UI组件，而是EditText的底层服务类，负责提供全屏输入法支持</p>
<h5 id="3-Button"><a href="#3-Button" class="headerlink" title="3.Button"></a>3.Button</h5><blockquote>
<p>在Android L5.0中加入了触摸反馈动画。</p>
</blockquote>
<p>其中最明显，最具代表性的就是波纹动画，比如当点击按钮时会从点击的位置产生类似于波纹的扩散效果。<br>波纹效果<code>Ripple</code>：<br>当你使用了Material主题后，波纹动画会自动应用在所有的控件上</p>
<h6 id="可以通过如下代码设置波纹的背景："><a href="#可以通过如下代码设置波纹的背景：" class="headerlink" title="可以通过如下代码设置波纹的背景："></a>可以通过如下代码设置波纹的背景：</h6><ul>
<li><strong>波纹超出边界：</strong><code>android:background=&quot;?android:attr/selectableItemBackgroundBorderless&quot;</code> </li>
<li><strong>背景透明，波纹有边界：</strong><code>android:background=&quot;?android:attr/selectableItemBackground&quot;</code></li>
</ul>
<h6 id="我们也可以通过设置xml属性来调节动画颜色，从而可以适应不同的主题："><a href="#我们也可以通过设置xml属性来调节动画颜色，从而可以适应不同的主题：" class="headerlink" title="我们也可以通过设置xml属性来调节动画颜色，从而可以适应不同的主题："></a>我们也可以通过设置xml属性来调节动画颜色，从而可以适应不同的主题：</h6><ul>
<li><strong>设置波纹颜色：</strong><code>android:colorControlHighlight</code></li>
<li><strong>设置checkbox等控件的选中颜色：</strong><code>android:colorAccent</code></li>
</ul>
<h6 id="为view添加波纹效果："><a href="#为view添加波纹效果：" class="headerlink" title="为view添加波纹效果："></a>为view添加波纹效果：</h6><ul>
<li><code>android:clickable=&quot;true&quot;</code></li>
<li><code>android:background=&quot;?android:attr/selectableItemBackground&quot;</code>  </li>
</ul>
<center><u><b><em>END</em></b></u></center>

]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> TextView </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android：的布局管理器（下篇）-GridLayout、AbsoluteLayout、android单位转换]]></title>
      <url>/2017/03/09/Android-%E7%9A%84%E5%B8%83%E5%B1%80%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%88%E4%B8%8B%E7%AF%87%EF%BC%89-GridLayout%E3%80%81AbsoluteLayout%E3%80%81android%E5%8D%95%E4%BD%8D%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>线性布局，表格布局、帧布局和相对布局的介绍参看上一篇博文：<br><a href="http://blog.csdn.net/aimeimeits/article/details/59174975" target="_blank" rel="external">Android的布局管理器（上篇）</a></p>
</blockquote>
<ul>
<li><font color="green">网格布局</font></li>
<li><font color="green">绝对布局</font>

</li>
</ul>
<h4 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h4><ol>
<li>网格布局由GridLayout类表示，它是Android4.0新增的布局管理器。如果希望在更早的Android平台上使用该布局管理器，则需要导入相应支撑库。</li>
<li>GridLayout的作用类似HTML中的table标签，它把整个容器划分成rows $\times$Columns个网格，每个网格可以放置一个组件，除此之外也可以设置一个组件<strong>横跨多少列</strong>，一个组件<strong>纵跨多少行</strong>。<blockquote>
<p>参考：<a href="http://blog.csdn.net/pku_android/article/details/7343258" target="_blank" rel="external">浅谈android4.0开发之GridLayout布局</a><br> 如果需要设置某控件跨越多行或多列，只需将该子控件的android:layout_rowSpan或者layout_columnSpan属性设置为数值，再<strong>设置其layout_gravity属性为</strong><font color="red"><b>fill<b></b></b></font>即可，前一个设置表明该控件跨越的行数或列数，后一个设置表明该控件填满所跨越的整行或整列。</p>
</blockquote>
</li>
</ol>
<h5 id="GridLayout的常用属性"><a href="#GridLayout的常用属性" class="headerlink" title="GridLayout的常用属性"></a>GridLayout的常用属性</h5><ul>
<li>android:alignmentMode   设置该布局管理器采用的对齐模式</li>
<li>android:columnCount        设置该网格的列数量</li>
<li>android:columnOrderPreserved   设置该网格布局管理器是否保留列序号</li>
<li>android:rowCount              设置该网格的行数目</li>
<li>android:rowOrderPreserved         设置该网格布局管理器是否保留行序号</li>
<li>android:useDefaultMargins          设置布局管理器是否使用默认的页边距</li>
</ul>
<h5 id="GridLayout-LayoutParams常用属性"><a href="#GridLayout-LayoutParams常用属性" class="headerlink" title="GridLayout.LayoutParams常用属性"></a>GridLayout.LayoutParams常用属性</h5><ul>
<li>android:layout_column        设置该子组件在GridLayout的第几列</li>
<li>android:layout_columnSpan 设置该子组件在GridLayout横向上跨几行</li>
<li>android:layout_gravity         设置该子组件采用何种方式占据该网格的空间</li>
<li>android:layout_row              设置该子组件在GridLayout的第几行</li>
<li>android:layout_rowSpan      设置该子组件在GridLayout纵向上跨几行</li>
</ul>
<h5 id="xml示例"><a href="#xml示例" class="headerlink" title="xml示例"></a>xml示例</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line"></div><div class="line">    &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">GridLayout</span></span></div><div class="line">        <span class="attr">android:columnCount</span>=<span class="string">"4"</span></div><div class="line">        <span class="attr">android:rowCount</span>=<span class="string">"7"</span></div><div class="line"></div><div class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        &gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line"></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_columnSpan</span>=<span class="string">"4"</span></div><div class="line">            <span class="attr">android:paddingBottom</span>=<span class="string">"30dp"</span></div><div class="line">            <span class="attr">android:paddingLeft</span>=<span class="string">"16dp"</span></div><div class="line">            <span class="attr">android:paddingTop</span>=<span class="string">"30dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"22 * 10"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"30sp"</span></div><div class="line">            <span class="attr">android:textStyle</span>=<span class="string">"bold"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/Base.Widget.AppCompat.Button.Borderless.Colored"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_columnSpan</span>=<span class="string">"4"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"right"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"clear"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/Base.Widget.AppCompat.Button.Borderless.Colored"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">            <span class="attr">android:layout_column</span>=<span class="string">"0"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"left"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_row</span>=<span class="string">"2"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#fff8f8"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"7"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/Base.Widget.AppCompat.Button.Borderless.Colored"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_column</span>=<span class="string">"1"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_row</span>=<span class="string">"2"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#fde3e3"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"8"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/Base.Widget.AppCompat.Button.Borderless.Colored"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_column</span>=<span class="string">"2"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_row</span>=<span class="string">"2"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#ffd9d9"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"9"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/Base.Widget.AppCompat.Button.Borderless.Colored"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">            <span class="attr">android:layout_column</span>=<span class="string">"3"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"right"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_row</span>=<span class="string">"2"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#ffc6c6"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"/"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/Base.Widget.AppCompat.Button.Borderless.Colored"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">            <span class="attr">android:layout_column</span>=<span class="string">"0"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"left"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_row</span>=<span class="string">"3"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#fff8f8"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"4"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/Base.Widget.AppCompat.Button.Borderless.Colored"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_column</span>=<span class="string">"1"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_row</span>=<span class="string">"3"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#ffdbfb"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"5"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/Base.Widget.AppCompat.Button.Borderless.Colored"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_column</span>=<span class="string">"2"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_row</span>=<span class="string">"3"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#ffc5f9"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"6"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/Base.Widget.AppCompat.Button.Borderless.Colored"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">            <span class="attr">android:layout_column</span>=<span class="string">"3"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"right"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_row</span>=<span class="string">"3"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#ff96f3"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"*"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/Base.Widget.AppCompat.Button.Borderless.Colored"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">            <span class="attr">android:layout_column</span>=<span class="string">"0"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"left"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_row</span>=<span class="string">"4"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#fff8f8"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"1"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/Base.Widget.AppCompat.Button.Borderless.Colored"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_column</span>=<span class="string">"1"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_row</span>=<span class="string">"4"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#fdcdce"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"2"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/Base.Widget.AppCompat.Button.Borderless.Colored"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_column</span>=<span class="string">"2"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_row</span>=<span class="string">"4"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#ffbdbe"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"3"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/Base.Widget.AppCompat.Button.Borderless.Colored"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">            <span class="attr">android:layout_column</span>=<span class="string">"3"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"right"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_row</span>=<span class="string">"4"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#fd8789"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"-"</span> /&gt;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/Base.Widget.AppCompat.Button.Borderless.Colored"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">            <span class="attr">android:layout_column</span>=<span class="string">"0"</span></div><div class="line">            <span class="attr">android:layout_row</span>=<span class="string">"5"</span></div><div class="line">            <span class="attr">android:layout_columnSpan</span>=<span class="string">"2"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"fill"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#d9eaff"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"0"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line"></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/Base.Widget.AppCompat.Button.Borderless.Colored"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_column</span>=<span class="string">"2"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_row</span>=<span class="string">"5"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#bbd9ff"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"."</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/Base.Widget.AppCompat.Button.Borderless.Colored"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"30sp"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#585858"</span></div><div class="line"></div><div class="line">            <span class="attr">android:layout_columnSpan</span>=<span class="string">"3"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"fill"</span></div><div class="line">            <span class="attr">android:layout_column</span>=<span class="string">"0"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_row</span>=<span class="string">"6"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#7bedff"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"="</span> /&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">style</span>=<span class="string">"@style/Base.Widget.AppCompat.Button.Borderless.Colored"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line"></div><div class="line">            <span class="attr">android:layout_rowSpan</span>=<span class="string">"2"</span></div><div class="line">            <span class="attr">android:layout_column</span>=<span class="string">"3"</span></div><div class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"fill"</span></div><div class="line">            <span class="attr">android:layout_margin</span>=<span class="string">"5dp"</span></div><div class="line">            <span class="attr">android:layout_row</span>=<span class="string">"5"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"#7dcfff"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"+"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">GridLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20170309141059507?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYWltZWltZWlUUw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="截图"></p>
<h4 id="绝对布局"><a href="#绝对布局" class="headerlink" title="绝对布局"></a>绝对布局</h4><ol>
<li>绝对布局由AbsoluteLayout表示，对于AbsoluteLayout布局Android不提供任何控制，而是由开发人员自己用过X坐标和Y坐标来控制组件的位置，以及其他的一些属性。</li>
<li>大部分时候，使用绝对布局都不是一个好思路，因为运行Android应用的手机往往千差万别，因此屏幕分辨率，大小都可能存在较大差异，使用绝对布局会很难兼顾不同屏幕分辨率，大小不同的问题，因此<font color="#0000ff">AbsoluteLayout已经过时。</font></li>
</ol>
<h5 id="xml属性"><a href="#xml属性" class="headerlink" title="xml属性"></a>xml属性</h5><p>android:layout_x     指定该子组件的x坐标<br>android:layout_y     指定该子组件的y坐标</p>
<h4 id="Android单位与换算"><a href="#Android单位与换算" class="headerlink" title="Android单位与换算"></a>Android单位与换算</h4><blockquote>
<p>详细可参考：<a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650662634&amp;idx=1&amp;sn=88ee5d63f2552e65d5a0d7d8b1b5e055&amp;chksm=87d13bb5b0a6b2a3b39bebacbf322277fed65fc416ca35f9d4222e65a0fefccb6a2e9a8c9c2b&amp;mpshare=1&amp;scene=23&amp;srcid=0309RIgiFGJ1xIrK4O07POVS#rd" target="_blank" rel="external">关于 Android 适配，看完这篇文章就够了</a></p>
</blockquote>
<h5 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h5><ul>
<li>px（像素）：每一个px对应屏幕上的一点</li>
<li>in：表示英寸，每英寸相当于2.54厘米</li>
<li>dpi（屏幕像素密度）：每英寸的像素点数比如120dpi、160dpi等，其值与屏幕尺寸和分辨率有关</li>
<li>dp/dip（设备独立像素）：密度无关像素，以160dpi为基准。如求xdip对应的像素值y：<br>$\frac{dpi}{160}\times x=y$</li>
</ul>
<h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><font color="#df0000" face="黑体">一个手机屏幕分辨率为480*800，屏幕尺寸为3.7in。求其dpi？在布局中宽设为320dp时相当于多少px？</font>

<ul>
<li>dpi：$ \frac{\sqrt{480^2+800^2}}{3.7}  =252dpi$  <br><br></li>
<li>320dp：$\frac{252}{160}\times320=504dp $<br><br></li>
</ul>
<p><em>然而手机屏幕才480px，算出的结果却是504px！</em><br><br><br><strong>注意：</strong><br>手机上面计算dpi为理论值，实际上只有120(low)，160(medium)，240(high)，320(xhigh)等几种，因此实际的计算公式为：<code>320</code>$\times\frac{240}{160}=480px$，与屏幕宽度相同，刚好占据整个屏幕。</p>
<center><u><b><em>END</em></b></u></center>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 布局管理器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android：的布局管理器（上篇）-LinearLayout、TableLayout、FrameLayout、RelativeLayout]]></title>
      <url>/2017/03/01/Android-%E7%9A%84%E5%B8%83%E5%B1%80%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%88%E4%B8%8A%E7%AF%87%EF%BC%89-LinearLayout%E3%80%81TableLayout%E3%80%81FrameLayout%E3%80%81RelativeLayout/</url>
      <content type="html"><![CDATA[<p>为了更好的管理Android应用的用户界面里的各种组件，Android提供了布局管理器。 通过使用布局管理器，Android应用的图形用户界面具有良好的平台无关性。同时合理的选择布局管理器是解决Android设备屏幕分辨率、尺寸差异较大问题的首选方式。<br>布局管理器分类：</p>
<h4 id="线性布局"><a href="#线性布局" class="headerlink" title="线性布局"></a>线性布局</h4><p>线性布局由LinearLayout类表示，LinearLayout可以控制各组件横向或纵向排列，线性布局不会换行，当组件一个挨着一个排到头之后，剩下的组件不会被显示出来。</p>
<ol>
<li>LinearLayout常用xml属性及说明：<br>Android:baselineAligned 该属性为false，将会阻止该布局管理器与它的子元素的基线对齐。<br>android:divider 设置垂直布局时两个子元素之间的分隔条，通常与android:showdivider配合使用<br>android:gravity 设置布局内组件的对齐方式，可以同时指定多种对齐方式（通过‘|’分隔），如center_vertical | bottom。<br>android:measureWithLargestChild 设置为true时，所有带权中的子元素都会具有最大子元素的最小尺寸。<br>android:orientation 设置布局管理器内子元素的排列方式。horizontal为水平排列，vertical为纵向。</li>
<li><p>linearLayout包含的所有子元素都受LinearLayout.LayoutParams的控制，因此LinearLayout包含的子元素可以额外指定如下两个属性：<br>android:layout_gravity 指定该子元素在LinearLayout中的对齐方式。<br>android:layout_weight 指定该子元素在Linearlayout中所占的权重。</p>
</li>
<li><p>基本上很多布局管理器都提供了相应的LayoutParams内部类，该内部类用于控制他们的子元素相对于布局管理器的一些特性，如android:layout_gravity和android:layout_weight。而android:gravity属性（一般只有容器才支持指定该属性），该属性用于控制她所包含的子元素的对齐方式。<br>更多关于android:layout_weight的可以参看这篇文章：<a href="http://blog.csdn.net/chy800/article/details/46397927" target="_blank" rel="external">http://blog.csdn.net/chy800/article/details/46397927</a><br>示例xml<br>&lt;?xml version=”1.0” encoding=”utf-8”?&gt;</p>
<linearlayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="match_parent" android:measurewithlargestchild="true" android:gravity="center"><br><br> <linearlayout android:background="#e4e4e4" android:layout_width="300dp" android:layout_height="300dp" android:orientation="vertical" android:divider="?android:dividerVertical" android:showdividers="beginning|end|middle"><br>     <button android:background="#f00" android:layout_gravity="end" android:layout_weight="0.5" android:text="Button" android:layout_width="wrap_content" android:layout_height="0dp"><br><br>     <textview android:gravity="center_vertical" android:layout_gravity="start" android:layout_weight="0.5" android:background="#0f0" android:text="this is aTextView" android:layout_width="wrap_content" android:layout_height="0dp"><br> </textview></button></linearlayout>


</linearlayout></li>
</ol>
<p></p>
<h4 id="表格布局"><a href="#表格布局" class="headerlink" title="表格布局"></a>表格布局</h4><ol>
<li>表格布局由TableLayout类代表，TableLayout继承自LinearLayout。表格布局才用行，列的形式管理UI组件，TableLayout并不需要明确的声明有几行几列，而是通过添加TableRow来表示表格行，TableRow也是容器，因此可以不断向其添加其他组件，每添加一个组件代表增加一列。</li>
<li>如果直接向TableLayout中添加组件，则这个组件直接占用一行。</li>
<li>在表格布局中，列的宽度由该列中最宽的那个单元格决定。</li>
<li>在表格布局中，可以为单元格（一个非TabRow的子元素）设置如下三种行为方式：<br>Shrinkable：若某列被设为Shrinkable，那么该列所有的单元格的宽度可以被收缩，以保证该表格能适应父容器的宽度<br>Stretchable：设为Stretchable表示该列的所有单元格的宽度可以被拉伸以保证组件能完全填满表格空余空间<br>Collapsed：设为Collapsed表示该列的所有单元格会被隐藏</li>
<li>Tablayout继承自LinearLayout，所以可以使用LinearLayout的所有属性。</li>
<li>TabLayout其他常用的xml属性<br>android:collapseColumns 设置需要被隐藏的列的列序号，多个列序号间用逗号隔开<br>android:shrinkColumns 设置允许被收缩的列的列序号，多个列序号间逗号隔开<br>android:stretchColumns 设置允许被拉伸的列的列序号，多个列序号间逗号隔开</li>
</ol>
<p>xml示例：<br>&lt;?xml version=”1.0” encoding=”utf-8”?&gt;</p>
<linearlayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="match_parent" android:orientation="vertical"><br><br>    <tablelayout android:layout_width="match_parent" android:layout_height="wrap_content"><br><br>        <button android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="独自一行的按钮"><br>    </button></tablelayout><br><br>    <tablelayout android:layout_width="match_parent" android:layout_height="wrap_content"><br><br>        <tablerow><br><br>            <button android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="普通按钮"><br><br>            </button><button android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="普通按钮"><br>        </button></tablerow><br>    </tablelayout><br><br>    <tablelayout android:layout_width="match_parent" android:layout_height="wrap_content" android:stretchcolumns="1"><br><br>        <tablerow><br><br>            <button android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="普通按钮"><br><br>            </button><button android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="拉伸按钮"><br>        </button></tablerow><br>    </tablelayout><br><br>    <tablelayout android:layout_width="match_parent" android:layout_height="wrap_content" android:collapsecolumns="1"><br><br>        <tablerow><br><br>            <button android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="普通按钮"><br><br>            </button><button android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="会被隐藏的按钮"><br><br>            </button><button android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="拉伸按钮"><br>        </button></tablerow><br>    </tablelayout><br><br>    <tablelayout android:layout_width="match_parent" android:layout_height="wrap_content" android:shrinkcolumns="3"><br><br>        <tablerow><br><br>            <button android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="普通按钮"><br><br>            </button><button android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="普通按钮"><br><br>            </button><button android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="普通按钮"><br><br>            </button><button android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="压缩的按钮"><br><br>            </button><button android:layout_width="wrap_content" android:layout_height="wrap_content" android:text="普通按钮"><br>        </button></tablerow><br>    </tablelayout><br><br></linearlayout>



<h4 id="帧布局"><a href="#帧布局" class="headerlink" title="帧布局"></a>帧布局</h4><p>帧布局由FrameLayout表示，FrameLayout直接继承自ViewGroup。</p>
<ol>
<li>帧布局为每一个加入其中的组件创建一个空白的区域（称为一帧），这些帧会根据gravity属性自动对齐。</li>
<li>帧布局常用的xml属性：<br>android:foreground 设置该帧布局的前景图像<br>android:foregroundGravity 定义绘制前景图像的gravity属性</li>
<li>FrameLayout包含的子元素也受FrameLayout.LayoutParames控制，因此它所包含的子元素也可以指定android:layout_gravity属性，该属性控制该子元素在FrameLayout中的对齐方式。</li>
</ol>
<p>xml示例：<br>&lt;?xml version=”1.0” encoding=”utf-8”?&gt;</p>
<linearlayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="match_parent" android:orientation="vertical"><br><br>    <framelayout android:layout_width="match_parent" android:layout_height="match_parent" android:foreground="@android:drawable/ic_menu_slideshow" android:foregroundgravity="left|center_vertical"><br><br>        <textview android:paddingtop="20dp" android:gravity="center_horizontal" android:text="最底层" android:layout_margintop="100dp" android:id="@+id/one_tv_01" android:layout_width="match_parent" android:layout_height="250dp" android:background="#dccece"><br><br>        <textview android:id="@+id/one_tv_02" android:layout_width="300dp" android:layout_height="220dp" android:layout_gravity="center" android:background="#e864ff"><br><br>        <textview android:id="@+id/one_tv_03" android:layout_width="200dp" android:layout_height="160dp" android:layout_gravity="center" android:background="#f13c3c"><br><br>        <textview android:textcolor="#fff" android:gravity="center" android:textsize="20sp" android:text="最顶层" android:id="@+id/one_tv_04" android:layout_width="100dp" android:layout_height="100dp" android:layout_gravity="center" android:background="#115fbe"><br>    </textview></textview></textview></textview></framelayout><br></linearlayout>


<p>更详细介绍可参照这篇文章，还提到了关于布局优化的一些方法：<a href="http://android.blog.51cto.com/268543/308090/" target="_blank" rel="external">http://android.blog.51cto.com/268543/308090/</a></p>
<h4 id="相对布局"><a href="#相对布局" class="headerlink" title="相对布局"></a>相对布局</h4><p>相对布局由RelativeLayout代表，RelativeLayout继承自ViewGroup。相对布局管理器里的子组件的位置总是相对兄弟组件和容器来决定的。</p>
<ol>
<li>如果A组件的位置是由B组件的位置来决定的，Android要求先定义B组件，在定义A组件。</li>
<li>RelativeLayout的xml属性：<br>android:gravity 设置该布局容器内子组件的对齐方式<br>android:igonreGravity 设置哪个组件不受gravity属性的影响</li>
<li>RelativeLayout.LayoutParams提供的xml属性：<br>android:layout_centerHorizontal 控制该子组件是否位于布局容器的水平居中<br>android:layout_centerVertical 控制该子组件是否位于布局容器的垂直居中<br>android:layout_centerParent 控制该子组件是否位于布局容器的中央位置</li>
</ol>
<p>android:layout_alignParentBottom 控制该子组件是否与布局容器低端对齐<br>android:layout_alignParentLeft 控制该子组件是否与布局容器左边对齐<br>android:layout_alignParentRight 控制该子组件是否与布局容器右边对齐<br>android:layout_alignParentTop 控制该子组件是否与布局容器顶端对齐</p>
<p>android:layout_toRightOf 控制该子组件位于给出ID组件的右端<br>android:layout_toLeftOf 控制该子组件位于给出ID组件的左端<br>android:layout_above 控制该子组件位于给出ID组件的上方<br>android:layout_below 控制该子组件位于给出ID组件的下方</p>
<p>android:layout_alignTop 控制该子组件位于给出ID组件的上边界对齐<br>android:layout_alignBottom 控制该子组件位于给出ID组件的下边界对齐<br>android:layout_alignLeft 控制该子组件位于给出ID组件的左边界对齐<br>android:layout_alignRight 控制该子组件位于给出ID组件的右边界对齐</p>
<p>除以上给出的以外，因为RelativeLayout.LayoutParames继承了android.view.ViewGroup.MarginLayoutParames,因此可以使用MarginLayoutParams提供的各属性。</p>
<p>xml示例：<br>&lt;?xml version=”1.0” encoding=”utf-8”?&gt;</p>
<relativelayout xmlns:android="http://schemas.android.com/apk/res/android" android:layout_width="match_parent" android:layout_height="match_parent"><br><br>    <button android:layout_torightof="@id/bt_5" android:layout_centervertical="true" android:layout_alignbottom="@id/bt_5" android:text="bt_1_right" android:id="@+id/bt_1" android:layout_width="wrap_content" android:layout_height="wrap_content"><br>    </button><button android:layout_below="@id/bt_5" android:layout_alignright="@id/bt_5" android:text="bt_2_below" android:id="@+id/bt_2" android:layout_width="wrap_content" android:layout_height="wrap_content"><br>    </button><button android:layout_above="@id/bt_5" android:layout_alignleft="@id/bt_5" android:text="bt_3_above" android:id="@+id/bt_3" android:layout_width="wrap_content" android:layout_height="wrap_content"><br>    </button><button android:layout_toleftof="@id/bt_5" android:layout_centervertical="true" android:layout_aligntop="@id/bt_5" android:text="bt_4_left" android:id="@+id/bt_4" android:layout_width="wrap_content" android:layout_height="wrap_content"><br><br>    </button><button android:layout_centerinparent="true" android:text="bt_5_center________\n-----------------\n++++++++++\n00\n111" android:id="@+id/bt_5" android:layout_width="wrap_content" android:layout_height="wrap_content"><br><br></button></relativelayout>



<p>网格布局和绝对布局在下篇介绍。</p>
<center><u><b><em>END</em></b></u></center>


]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 布局管理器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[其它文章]]></title>
      <url>/2017/01/01/%E5%85%B6%E5%AE%83%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<p>其它文章</p>
<ul>
<li><a href="http://blog.csdn.net/aimeimeits/article/details/54136219" target="_blank" rel="external">java中private，public，protected详解</a></li>
<li><a href="http://blog.csdn.net/aimeimeits/article/details/52563898" target="_blank" rel="external">android中AsyncTask的使用</a></li>
<li><a href="http://blog.csdn.net/aimeimeits/article/details/52725564" target="_blank" rel="external">android属性动画浅析——ValueAnimator、ObjectAnimator、Interprolators</a></li>
<li><a href="http://blog.csdn.net/aimeimeits/article/details/52736308" target="_blank" rel="external"> java中的static</a></li>
<li><a href="http://blog.csdn.net/aimeimeits/article/details/57403107" target="_blank" rel="external">Android的发展历史</a></li>
</ul>
<center><u><b><em>END</em></b></u></center>]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> 属性动画 </tag>
            
            <tag> java </tag>
            
            <tag> AsyncTask </tag>
            
            <tag> private 关键字 </tag>
            
            <tag> public 关键字 </tag>
            
            <tag> protected 关键字 </tag>
            
            <tag> Android 发展史 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
